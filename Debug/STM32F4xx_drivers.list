
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001354  08001354  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001354  08001354  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001354  08001354  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001354  08001354  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800135c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000038  08001394  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001394  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f73  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000565  00000000  00000000  00021fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e8  00000000  00000000  00022540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00022728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023bc  00000000  00000000  000228d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001503  00000000  00000000  00024c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093ac  00000000  00000000  00026197  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000750  00000000  00000000  0002f5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800133c 	.word	0x0800133c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	0800133c 	.word	0x0800133c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <I2C1_GPIOInits>:
/*
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <I2C1_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001f2:	2301      	movs	r3, #1
 80001f4:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001f6:	2301      	movs	r3, #1
 80001f8:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001fa:	2304      	movs	r3, #4
 80001fc:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000202:	2306      	movs	r3, #6
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f98b 	bl	8000524 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800020e:	2307      	movs	r3, #7
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f985 	bl	8000524 <GPIO_Init>

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <I2C1_Inits>:

void I2C1_Inits(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <I2C1_Inits+0x2c>)
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <I2C1_Inits+0x30>)
 8000230:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <I2C1_Inits+0x2c>)
 8000234:	2201      	movs	r2, #1
 8000236:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <I2C1_Inits+0x2c>)
 800023a:	2269      	movs	r2, #105	; 0x69
 800023c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <I2C1_Inits+0x2c>)
 8000240:	2200      	movs	r2, #0
 8000242:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <I2C1_Inits+0x2c>)
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <I2C1_Inits+0x34>)
 8000248:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800024a:	4802      	ldr	r0, [pc, #8]	; (8000254 <I2C1_Inits+0x2c>)
 800024c:	f000 fc34 	bl	8000ab8 <I2C_Init>

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000058 	.word	0x20000058
 8000258:	40005400 	.word	0x40005400
 800025c:	000186a0 	.word	0x000186a0

08000260 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <GPIO_ButtonInit+0x2c>)
 8000268:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800026a:	2304      	movs	r3, #4
 800026c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800026e:	2300      	movs	r3, #0
 8000270:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f951 	bl	8000524 <GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40020800 	.word	0x40020800

08000290 <main>:

int main(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000294:	f7ff ffe4 	bl	8000260 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 8000298:	f7ff ffa4 	bl	80001e4 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 800029c:	f7ff ffc4 	bl	8000228 <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002a0:	2101      	movs	r1, #1
 80002a2:	201f      	movs	r0, #31
 80002a4:	f000 fed2 	bl	800104c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	2020      	movs	r0, #32
 80002ac:	f000 fece 	bl	800104c <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <main+0x3c>)
 80002b4:	f000 fd2f 	bl	8000d16 <I2C_SlaveEnableDisableCallbackEvents>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <main+0x3c>)
 80002bc:	f000 fbe0 	bl	8000a80 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <main+0x3c>)
 80002c4:	f000 fb3a 	bl	800093c <I2C_ManageAcking>

	while(1);
 80002c8:	e7fe      	b.n	80002c8 <main+0x38>
 80002ca:	bf00      	nop
 80002cc:	40005400 	.word	0x40005400

080002d0 <I2C1_EV_IRQHandler>:

}

void I2C1_EV_IRQHandler (void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80002d4:	4802      	ldr	r0, [pc, #8]	; (80002e0 <I2C1_EV_IRQHandler+0x10>)
 80002d6:	f000 fd52 	bl	8000d7e <I2C_EV_IRQHandling>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000058 	.word	0x20000058

080002e4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler (void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <I2C1_ER_IRQHandler+0x10>)
 80002ea:	f000 fe26 	bl	8000f3a <I2C_ER_IRQHandling>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000058 	.word	0x20000058

080002f8 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv){
 80002f8:	b590      	push	{r4, r7, lr}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]

	static uint8_t commandCode = 0;
	static uint8_t Cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ){
 8000304:	78fb      	ldrb	r3, [r7, #3]
 8000306:	2b08      	cmp	r3, #8
 8000308:	d122      	bne.n	8000350 <I2C_ApplicationEventCallback+0x58>
		//Master wants some data and slave has to send it
		if(commandCode == 0x51){
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <I2C_ApplicationEventCallback+0x8c>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b51      	cmp	r3, #81	; 0x51
 8000310:	d10b      	bne.n	800032a <I2C_ApplicationEventCallback+0x32>
			//send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)Tx_buf));
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681c      	ldr	r4, [r3, #0]
 8000316:	481c      	ldr	r0, [pc, #112]	; (8000388 <I2C_ApplicationEventCallback+0x90>)
 8000318:	f7ff ff5c 	bl	80001d4 <strlen>
 800031c:	4603      	mov	r3, r0
 800031e:	b2db      	uxtb	r3, r3
 8000320:	4619      	mov	r1, r3
 8000322:	4620      	mov	r0, r4
 8000324:	f000 fcdb 	bl	8000cde <I2C_SlaveSendData>
		Cnt = 0;
	} else if(AppEv == I2C_EV_STOP){
		//This happens only during slave reception .
		//Master has ended the I2C communication with the slave.
	}
}
 8000328:	e028      	b.n	800037c <I2C_ApplicationEventCallback+0x84>
		} else if(commandCode == 0x52){
 800032a:	4b16      	ldr	r3, [pc, #88]	; (8000384 <I2C_ApplicationEventCallback+0x8c>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b52      	cmp	r3, #82	; 0x52
 8000330:	d124      	bne.n	800037c <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, Tx_buf[Cnt++]);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <I2C_ApplicationEventCallback+0x94>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	b2d1      	uxtb	r1, r2
 800033e:	4a13      	ldr	r2, [pc, #76]	; (800038c <I2C_ApplicationEventCallback+0x94>)
 8000340:	7011      	strb	r1, [r2, #0]
 8000342:	461a      	mov	r2, r3
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <I2C_ApplicationEventCallback+0x90>)
 8000346:	5c9b      	ldrb	r3, [r3, r2]
 8000348:	4619      	mov	r1, r3
 800034a:	f000 fcc8 	bl	8000cde <I2C_SlaveSendData>
}
 800034e:	e015      	b.n	800037c <I2C_ApplicationEventCallback+0x84>
	} else if(AppEv == I2C_EV_DATA_RCV){
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b09      	cmp	r3, #9
 8000354:	d109      	bne.n	800036a <I2C_ApplicationEventCallback+0x72>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fcce 	bl	8000cfc <I2C_SlaveReceiveData>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <I2C_ApplicationEventCallback+0x8c>)
 8000366:	701a      	strb	r2, [r3, #0]
}
 8000368:	e008      	b.n	800037c <I2C_ApplicationEventCallback+0x84>
	} else if(AppEv == I2C_ERROR_AF){
 800036a:	78fb      	ldrb	r3, [r7, #3]
 800036c:	2b05      	cmp	r3, #5
 800036e:	d105      	bne.n	800037c <I2C_ApplicationEventCallback+0x84>
		commandCode = 0xFF;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <I2C_ApplicationEventCallback+0x8c>)
 8000372:	22ff      	movs	r2, #255	; 0xff
 8000374:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <I2C_ApplicationEventCallback+0x94>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}
 8000384:	20000054 	.word	0x20000054
 8000388:	20000000 	.word	0x20000000
 800038c:	20000055 	.word	0x20000055

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	; (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490e      	ldr	r1, [pc, #56]	; (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0b      	ldr	r4, [pc, #44]	; (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ba:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 ff99 	bl	80012f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff65 	bl	8000290 <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80003d4:	0800135c 	.word	0x0800135c
  ldr r2, =_sbss
 80003d8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80003dc:	20000080 	.word	0x20000080

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d141      	bne.n	800047a <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a43      	ldr	r2, [pc, #268]	; (8000508 <GPIO_PeriClockControl+0x124>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003fe:	4b43      	ldr	r3, [pc, #268]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a42      	ldr	r2, [pc, #264]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800040a:	e077      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a40      	ldr	r2, [pc, #256]	; (8000510 <GPIO_PeriClockControl+0x12c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000414:	4b3d      	ldr	r3, [pc, #244]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <GPIO_PeriClockControl+0x128>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	e06c      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a3b      	ldr	r2, [pc, #236]	; (8000514 <GPIO_PeriClockControl+0x130>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800042a:	4b38      	ldr	r3, [pc, #224]	; (800050c <GPIO_PeriClockControl+0x128>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a37      	ldr	r2, [pc, #220]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000436:	e061      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a37      	ldr	r2, [pc, #220]	; (8000518 <GPIO_PeriClockControl+0x134>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000440:	4b32      	ldr	r3, [pc, #200]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a31      	ldr	r2, [pc, #196]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e056      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a32      	ldr	r2, [pc, #200]	; (800051c <GPIO_PeriClockControl+0x138>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000456:	4b2d      	ldr	r3, [pc, #180]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a2c      	ldr	r2, [pc, #176]	; (800050c <GPIO_PeriClockControl+0x128>)
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e04b      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a2e      	ldr	r2, [pc, #184]	; (8000520 <GPIO_PeriClockControl+0x13c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d147      	bne.n	80004fc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 800046c:	4b27      	ldr	r3, [pc, #156]	; (800050c <GPIO_PeriClockControl+0x128>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a26      	ldr	r2, [pc, #152]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e040      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a22      	ldr	r2, [pc, #136]	; (8000508 <GPIO_PeriClockControl+0x124>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a21      	ldr	r2, [pc, #132]	; (800050c <GPIO_PeriClockControl+0x128>)
 8000488:	f023 0301 	bic.w	r3, r3, #1
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e035      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a1f      	ldr	r2, [pc, #124]	; (8000510 <GPIO_PeriClockControl+0x12c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <GPIO_PeriClockControl+0x128>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <GPIO_PeriClockControl+0x128>)
 800049e:	f023 0302 	bic.w	r3, r3, #2
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e02a      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <GPIO_PeriClockControl+0x130>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a16      	ldr	r2, [pc, #88]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004b4:	f023 0304 	bic.w	r3, r3, #4
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e01f      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <GPIO_PeriClockControl+0x134>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004ca:	f023 0308 	bic.w	r3, r3, #8
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e014      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a11      	ldr	r2, [pc, #68]	; (800051c <GPIO_PeriClockControl+0x138>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004e0:	f023 0310 	bic.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e009      	b.n	80004fc <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <GPIO_PeriClockControl+0x13c>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d105      	bne.n	80004fc <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <GPIO_PeriClockControl+0x128>)
 80004f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40020000 	.word	0x40020000
 800050c:	40023800 	.word	0x40023800
 8000510:	40020400 	.word	0x40020400
 8000514:	40020800 	.word	0x40020800
 8000518:	40020c00 	.word	0x40020c00
 800051c:	40021000 	.word	0x40021000
 8000520:	40021c00 	.word	0x40021c00

08000524 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff54 	bl	80003e4 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d822      	bhi.n	800058a <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	2103      	movs	r1, #3
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	430a      	orrs	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	e0ca      	b.n	8000720 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d117      	bne.n	80005c2 <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000592:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <GPIO_Init+0x17c>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a3f      	ldr	r2, [pc, #252]	; (80006a0 <GPIO_Init+0x17c>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b3d      	ldr	r3, [pc, #244]	; (80006a0 <GPIO_Init+0x17c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <GPIO_Init+0x17c>)
 80005bc:	400b      	ands	r3, r1
 80005be:	6093      	str	r3, [r2, #8]
 80005c0:	e035      	b.n	800062e <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b05      	cmp	r3, #5
 80005c8:	d117      	bne.n	80005fa <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <GPIO_Init+0x17c>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	4611      	mov	r1, r2
 80005da:	4a31      	ldr	r2, [pc, #196]	; (80006a0 <GPIO_Init+0x17c>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <GPIO_Init+0x17c>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	7912      	ldrb	r2, [r2, #4]
 80005e8:	4611      	mov	r1, r2
 80005ea:	2201      	movs	r2, #1
 80005ec:	408a      	lsls	r2, r1
 80005ee:	43d2      	mvns	r2, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <GPIO_Init+0x17c>)
 80005f4:	400b      	ands	r3, r1
 80005f6:	60d3      	str	r3, [r2, #12]
 80005f8:	e019      	b.n	800062e <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d115      	bne.n	800062e <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <GPIO_Init+0x17c>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	4611      	mov	r1, r2
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <GPIO_Init+0x17c>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <GPIO_Init+0x17c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	4611      	mov	r1, r2
 8000622:	2201      	movs	r2, #1
 8000624:	408a      	lsls	r2, r1
 8000626:	4611      	mov	r1, r2
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <GPIO_Init+0x17c>)
 800062a:	430b      	orrs	r3, r1
 800062c:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <GPIO_Init+0x180>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <GPIO_Init+0x180>)
 8000634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000638:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	f003 0303 	and.w	r3, r3, #3
 800064a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <GPIO_Init+0x184>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d034      	beq.n	80006c0 <GPIO_Init+0x19c>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <GPIO_Init+0x188>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d01d      	beq.n	800069c <GPIO_Init+0x178>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <GPIO_Init+0x18c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d016      	beq.n	8000698 <GPIO_Init+0x174>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <GPIO_Init+0x190>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d00f      	beq.n	8000694 <GPIO_Init+0x170>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0f      	ldr	r2, [pc, #60]	; (80006b8 <GPIO_Init+0x194>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d008      	beq.n	8000690 <GPIO_Init+0x16c>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <GPIO_Init+0x198>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d101      	bne.n	800068c <GPIO_Init+0x168>
 8000688:	2307      	movs	r3, #7
 800068a:	e01a      	b.n	80006c2 <GPIO_Init+0x19e>
 800068c:	2300      	movs	r3, #0
 800068e:	e018      	b.n	80006c2 <GPIO_Init+0x19e>
 8000690:	2304      	movs	r3, #4
 8000692:	e016      	b.n	80006c2 <GPIO_Init+0x19e>
 8000694:	2303      	movs	r3, #3
 8000696:	e014      	b.n	80006c2 <GPIO_Init+0x19e>
 8000698:	2302      	movs	r3, #2
 800069a:	e012      	b.n	80006c2 <GPIO_Init+0x19e>
 800069c:	2301      	movs	r3, #1
 800069e:	e010      	b.n	80006c2 <GPIO_Init+0x19e>
 80006a0:	40013c00 	.word	0x40013c00
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020400 	.word	0x40020400
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020c00 	.word	0x40020c00
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40021c00 	.word	0x40021c00
 80006c0:	2300      	movs	r3, #0
 80006c2:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 80006c4:	4a66      	ldr	r2, [pc, #408]	; (8000860 <GPIO_Init+0x33c>)
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	3302      	adds	r3, #2
 80006ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ce:	7cbb      	ldrb	r3, [r7, #18]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	210f      	movs	r1, #15
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	4960      	ldr	r1, [pc, #384]	; (8000860 <GPIO_Init+0x33c>)
 80006de:	7cfb      	ldrb	r3, [r7, #19]
 80006e0:	4002      	ands	r2, r0
 80006e2:	3302      	adds	r3, #2
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 80006e8:	4a5d      	ldr	r2, [pc, #372]	; (8000860 <GPIO_Init+0x33c>)
 80006ea:	7cfb      	ldrb	r3, [r7, #19]
 80006ec:	3302      	adds	r3, #2
 80006ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f2:	7c79      	ldrb	r1, [r7, #17]
 80006f4:	7cbb      	ldrb	r3, [r7, #18]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	4958      	ldr	r1, [pc, #352]	; (8000860 <GPIO_Init+0x33c>)
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	4302      	orrs	r2, r0
 8000704:	3302      	adds	r3, #2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800070a:	4b56      	ldr	r3, [pc, #344]	; (8000864 <GPIO_Init+0x340>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	7912      	ldrb	r2, [r2, #4]
 8000712:	4611      	mov	r1, r2
 8000714:	2201      	movs	r2, #1
 8000716:	408a      	lsls	r2, r1
 8000718:	4611      	mov	r1, r2
 800071a:	4a52      	ldr	r2, [pc, #328]	; (8000864 <GPIO_Init+0x340>)
 800071c:	430b      	orrs	r3, r1
 800071e:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	799b      	ldrb	r3, [r3, #6]
 8000728:	461a      	mov	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	2103      	movs	r1, #3
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6899      	ldr	r1, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	430a      	orrs	r2, r1
 8000762:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	2103      	movs	r1, #3
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	400a      	ands	r2, r1
 8000796:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68d9      	ldr	r1, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7a1b      	ldrb	r3, [r3, #8]
 80007b0:	461a      	mov	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	4619      	mov	r1, r3
 80007c8:	2301      	movs	r3, #1
 80007ca:	408b      	lsls	r3, r1
 80007cc:	43db      	mvns	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	400a      	ands	r2, r1
 80007d6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6859      	ldr	r1, [r3, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	795b      	ldrb	r3, [r3, #5]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d131      	bne.n	8000858 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7c3a      	ldrb	r2, [r7, #16]
 800080c:	3208      	adds	r2, #8
 800080e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	220f      	movs	r2, #15
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	7c3a      	ldrb	r2, [r7, #16]
 8000826:	4001      	ands	r1, r0
 8000828:	3208      	adds	r2, #8
 800082a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	7c3a      	ldrb	r2, [r7, #16]
 8000834:	3208      	adds	r2, #8
 8000836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7a5b      	ldrb	r3, [r3, #9]
 800083e:	461a      	mov	r2, r3
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	4618      	mov	r0, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	7c3a      	ldrb	r2, [r7, #16]
 8000850:	4301      	orrs	r1, r0
 8000852:	3208      	adds	r2, #8
 8000854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013800 	.word	0x40013800
 8000864:	40013c00 	.word	0x40013c00

08000868 <GPIO_ToggleOutputPin>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	78fa      	ldrb	r2, [r7, #3]
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	405a      	eors	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	615a      	str	r2, [r3, #20]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <RCC_GetPCLK1Value>:
uint32_t RCC_GetPLLOutputClock();

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_Prescaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <RCC_GetPCLK1Value+0x94>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80008a8:	7a7b      	ldrb	r3, [r7, #9]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <RCC_GetPCLK1Value+0x98>)
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e004      	b.n	80008be <RCC_GetPCLK1Value+0x2a>

	} else if(clksrc == 1){
 80008b4:	7a7b      	ldrb	r3, [r7, #9]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d101      	bne.n	80008be <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <RCC_GetPCLK1Value+0x9c>)
 80008bc:	60fb      	str	r3, [r7, #12]
	} else if(clksrc == 2){
		//SystemClk = RCC_GetPLLOutputClock();
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <RCC_GetPCLK1Value+0x94>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80008cc:	7a3b      	ldrb	r3, [r7, #8]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d802      	bhi.n	80008d8 <RCC_GetPCLK1Value+0x44>
		ahbp = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	72fb      	strb	r3, [r7, #11]
 80008d6:	e005      	b.n	80008e4 <RCC_GetPCLK1Value+0x50>
	} else{
		ahbp = AHB_Prescaler[temp - 8];
 80008d8:	7a3b      	ldrb	r3, [r7, #8]
 80008da:	3b08      	subs	r3, #8
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <RCC_GetPCLK1Value+0xa0>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <RCC_GetPCLK1Value+0x94>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	0a9b      	lsrs	r3, r3, #10
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d802      	bhi.n	80008fe <RCC_GetPCLK1Value+0x6a>
		apb1 = 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	72bb      	strb	r3, [r7, #10]
 80008fc:	e005      	b.n	800090a <RCC_GetPCLK1Value+0x76>
	} else{
		apb1 = APB1_Prescaler[temp - 4];
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	3b04      	subs	r3, #4
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <RCC_GetPCLK1Value+0xa4>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp)/apb1;
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000912:	7abb      	ldrb	r3, [r7, #10]
 8000914:	fbb2 f3f3 	udiv	r3, r2, r3
 8000918:	607b      	str	r3, [r7, #4]

	return pclk1;
 800091a:	687b      	ldr	r3, [r7, #4]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40023800 	.word	0x40023800
 800092c:	00f42400 	.word	0x00f42400
 8000930:	007a1200 	.word	0x007a1200
 8000934:	20000020 	.word	0x20000020
 8000938:	20000030 	.word	0x20000030

0800093c <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE){
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d106      	bne.n	800095c <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
	} else{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800095a:	e005      	b.n	8000968 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <I2C_GenerateStopCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <teste>:

void teste(){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOC;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <teste+0x38>)
 800099c:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800099e:	2305      	movs	r3, #5
 80009a0:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009a2:	2301      	movs	r3, #1
 80009a4:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009a6:	2302      	movs	r3, #2
 80009a8:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009aa:	2300      	movs	r3, #0
 80009ac:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009ae:	2300      	movs	r3, #0
 80009b0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioLed);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fdb5 	bl	8000524 <GPIO_Init>

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_5);
 80009ba:	2105      	movs	r1, #5
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <teste+0x38>)
 80009be:	f7ff ff53 	bl	8000868 <GPIO_ToggleOutputPin>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020800 	.word	0x40020800

080009d0 <I2C_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *********************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d120      	bne.n	8000a24 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <I2C_PeriClockControl+0xa0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 80009f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 80009f6:	e035      	b.n	8000a64 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <I2C_PeriClockControl+0xa8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a0c:	e02a      	b.n	8000a64 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <I2C_PeriClockControl+0xac>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d126      	bne.n	8000a64 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a22:	e01f      	b.n	8000a64 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <I2C_PeriClockControl+0xa0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a38:	e014      	b.n	8000a64 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <I2C_PeriClockControl+0xa8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a4e:	e009      	b.n	8000a64 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <I2C_PeriClockControl+0xac>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d105      	bne.n	8000a64 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <I2C_PeriClockControl+0xa4>)
 8000a5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	40005c00 	.word	0x40005c00

08000a80 <I2C_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d106      	bne.n	8000aa0 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000a9e:	e005      	b.n	8000aac <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0201 	bic.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <I2C_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff80 	bl	80009d0 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a5b      	ldrb	r3, [r3, #9]
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000af2:	f7ff fecf 	bl	8000894 <RCC_GetPCLK1Value>
 8000af6:	4602      	mov	r2, r0
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <I2C_Init+0x178>)
 8000afa:	fba3 2302 	umull	r2, r3, r3, r2
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	461a      	mov	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);													/* Should always be kept at 1 by software */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6899      	ldr	r1, [r3, #8]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4a38      	ldr	r2, [pc, #224]	; (8000c34 <I2C_Init+0x17c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d80f      	bhi.n	8000b76 <I2C_Init+0xbe>
		 * T_high + T_low = T_scl
		 * T_scl = 2 * CCR * T_pclk1
		 * CCR = T_scl / (2 * T_pclk1) [time domain]
		 * CCR = F_pclk1 / (2 * F_scl) [frequency domain] */

		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b56:	f7ff fe9d 	bl	8000894 <RCC_GetPCLK1Value>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);										/* Only 12 bits */
 8000b68:	897b      	ldrh	r3, [r7, #10]
 8000b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e02d      	b.n	8000bd2 <I2C_Init+0x11a>

	} else{
		//mode is fast mode

		tempreg |= (1 << 15);												/* F/S: I2C master mode selection (FM) */
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);			/* DUTY: Fm mode duty cycle */
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7a9b      	ldrb	r3, [r3, #10]
 8000b82:	039b      	lsls	r3, r3, #14
 8000b84:	461a      	mov	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7a9b      	ldrb	r3, [r3, #10]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d10b      	bne.n	8000bac <I2C_Init+0xf4>
			 * T_high + T_low = T_scl
			 * T_scl = 3 * CCR * T_pclk1
			 * CCR = T_scl / (3 * T_pclk1) [time domain]
			 * CCR = F_pclk1 / (3 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b94:	f7ff fe7e 	bl	8000894 <RCC_GetPCLK1Value>
 8000b98:	4601      	mov	r1, r0
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba8:	817b      	strh	r3, [r7, #10]
 8000baa:	e00c      	b.n	8000bc6 <I2C_Init+0x10e>
			* T_high + T_low = T_scl
			* T_scl = 25 * CCR * T_pclk1
			* CCR = T_scl / (25 * T_pclk1) [time domain]
			* CCR = F_pclk1 / (25 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000bac:	f7ff fe72 	bl	8000894 <RCC_GetPCLK1Value>
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	009a      	lsls	r2, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc4:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	69d9      	ldr	r1, [r3, #28]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <I2C_Init+0x17c>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d809      	bhi.n	8000c00 <I2C_Init+0x148>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000bec:	f7ff fe52 	bl	8000894 <RCC_GetPCLK1Value>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <I2C_Init+0x178>)
 8000bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bf8:	0c9b      	lsrs	r3, r3, #18
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e00d      	b.n	8000c1c <I2C_Init+0x164>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c00:	f7ff fe48 	bl	8000894 <RCC_GetPCLK1Value>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c0a:	fb03 f302 	mul.w	r3, r3, r2
 8000c0e:	0a5b      	lsrs	r3, r3, #9
 8000c10:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <I2C_Init+0x180>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	09db      	lsrs	r3, r3, #7
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c26:	621a      	str	r2, [r3, #32]
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	000186a0 	.word	0x000186a0
 8000c38:	00044b83 	.word	0x00044b83

08000c3c <I2C_CloseReceiveData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c52:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c62:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7a5b      	ldrb	r3, [r3, #9]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d105      	bne.n	8000c90 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe56 	bl	800093c <I2C_ManageAcking>
	}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <I2C_CloseSendData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cae:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cbe:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <I2C_SlaveSendData>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data){
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <I2C_SlaveReceiveData>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *****************************************************************/
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	691b      	ldr	r3, [r3, #16]
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <I2C_SlaveEnableDisableCallbackEvents>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	70fb      	strb	r3, [r7, #3]

	 if(EnorDi == ENABLE){
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d112      	bne.n	8000d4e <I2C_SlaveEnableDisableCallbackEvents+0x38>
			pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	605a      	str	r2, [r3, #4]
	 } else{
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	 }
}
 8000d4c:	e011      	b.n	8000d72 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <I2C_EV_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]

	//Interrupt handling for both master and slave mode of a device

	teste();
 8000d86:	f7ff fe05 	bl	8000994 <teste>

	uint32_t temp1, temp2, temp3;
	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d94:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	613b      	str	r3, [r7, #16]

	// For setting it, see Table 71 on reference manual

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);		//Check the SB (start bit) flag
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
	//1. Handle for interrupt generated by SB event
	// 	 Note : SB flag is only applicable in Master mode

	if(temp1 && temp3){
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01b      	beq.n	8000dec <I2C_EV_IRQHandling+0x6e>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d018      	beq.n	8000dec <I2C_EV_IRQHandling+0x6e>
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7f1b      	ldrb	r3, [r3, #28]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d108      	bne.n	8000dd4 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7f5b      	ldrb	r3, [r3, #29]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f000 f9c3 	bl	8001158 <I2C_ExecuteAddressPhaseWrite>
 8000dd2:	e00b      	b.n	8000dec <I2C_EV_IRQHandling+0x6e>
		} else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7f1b      	ldrb	r3, [r3, #28]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d107      	bne.n	8000dec <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7f5b      	ldrb	r3, [r3, #29]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4610      	mov	r0, r2
 8000de8:	f000 f9cc 	bl	8001184 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode  : Address matched with own address
	if(temp1 && temp3){
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <I2C_EV_IRQHandling+0x8c>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <I2C_EV_IRQHandling+0x8c>
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f9d3 	bl	80011b0 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3){
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d022      	beq.n	8000e62 <I2C_EV_IRQHandling+0xe4>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d01f      	beq.n	8000e62 <I2C_EV_IRQHandling+0xe4>
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7f1b      	ldrb	r3, [r3, #28]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d11b      	bne.n	8000e62 <I2C_EV_IRQHandling+0xe4>
			//make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d014      	beq.n	8000e62 <I2C_EV_IRQHandling+0xe4>
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0){		// Make sure that Tx Lenght is equal to zero
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d110      	bne.n	8000e62 <I2C_EV_IRQHandling+0xe4>
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <I2C_EV_IRQHandling+0xd6>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fd90 	bl	8000974 <I2C_GenerateStopCondition>
					}

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff1f 	bl	8000c98 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fa4b 	bl	80002f8 <I2C_ApplicationEventCallback>
			; //nothing to do here
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	// The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3){
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <I2C_EV_IRQHandling+0x110>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <I2C_EV_IRQHandling+0x110>
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 (already done above) 2) Write to CR1

		pI2CHandle->pI2Cx->CR1 |= 0x0000;	// Do not modify the register in write operation
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected or generated by the master
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000e86:	2102      	movs	r1, #2
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fa35 	bl	80002f8 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e98:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3){
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01f      	beq.n	8000ee0 <I2C_EV_IRQHandling+0x162>
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d01c      	beq.n	8000ee0 <I2C_EV_IRQHandling+0x162>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d019      	beq.n	8000ee0 <I2C_EV_IRQHandling+0x162>
		//TXE flag is set
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <I2C_EV_IRQHandling+0x14c>
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7f1b      	ldrb	r3, [r3, #28]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d10e      	bne.n	8000ee0 <I2C_EV_IRQHandling+0x162>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f9ab 	bl	800121e <I2C_MasterHandleTXEInterrupt>
 8000ec8:	e00a      	b.n	8000ee0 <I2C_EV_IRQHandling+0x162>
			}
		} else{
			//slave
			//make sure that the slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <I2C_EV_IRQHandling+0x162>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000ed8:	2108      	movs	r1, #8
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fa0c 	bl	80002f8 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eea:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3){
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d01f      	beq.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01c      	beq.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
		//RXNE flag is set
		//check device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <I2C_EV_IRQHandling+0x19e>
			//The device is master
			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7f1b      	ldrb	r3, [r3, #28]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d10e      	bne.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f9a0 	bl	800125a <I2C_MasterHandleRXNEInterrupt>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f1a:	e00a      	b.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <I2C_EV_IRQHandling+0x1b4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000f2a:	2109      	movs	r1, #9
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff f9e3 	bl	80002f8 <I2C_ApplicationEventCallback>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <I2C_ER_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]

	teste();
 8000f42:	f7ff fd27 	bl	8000994 <teste>

	uint32_t temp1, temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & (1 << I2C_CR2_ITERREN);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f50:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_BERR);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5c:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2){
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <I2C_ER_IRQHandling+0x48>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <I2C_ER_IRQHandling+0x48>
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f78:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff f9bb 	bl	80002f8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_ARLO);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f8c:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00e      	beq.n	8000fb2 <I2C_ER_IRQHandling+0x78>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <I2C_ER_IRQHandling+0x78>
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fa8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8000faa:	2104      	movs	r1, #4
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff f9a3 	bl	80002f8 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_AF);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <I2C_ER_IRQHandling+0xa8>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <I2C_ER_IRQHandling+0xa8>
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8000fda:	2105      	movs	r1, #5
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff f98b 	bl	80002f8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_OVR);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fec:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00e      	beq.n	8001012 <I2C_ER_IRQHandling+0xd8>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <I2C_ER_IRQHandling+0xd8>
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001008:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800100a:	2106      	movs	r1, #6
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f973 	bl	80002f8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_TIMEOUT);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00e      	beq.n	8001042 <I2C_ER_IRQHandling+0x108>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <I2C_ER_IRQHandling+0x108>
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001038:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 800103a:	2107      	movs	r1, #7
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff f95b 	bl	80002f8 <I2C_ApplicationEventCallback>
	}
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <I2C_IRQInterruptConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d133      	bne.n	80010ca <I2C_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b1f      	cmp	r3, #31
 8001066:	d80a      	bhi.n	800107e <I2C_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <I2C_IRQInterruptConfig+0xf4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4611      	mov	r1, r2
 8001076:	4a32      	ldr	r2, [pc, #200]	; (8001140 <I2C_IRQInterruptConfig+0xf4>)
 8001078:	430b      	orrs	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 800107c:	e059      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b1f      	cmp	r3, #31
 8001082:	d90f      	bls.n	80010a4 <I2C_IRQInterruptConfig+0x58>
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b3f      	cmp	r3, #63	; 0x3f
 8001088:	d80c      	bhi.n	80010a4 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <I2C_IRQInterruptConfig+0xf8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	f002 021f 	and.w	r2, r2, #31
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4611      	mov	r1, r2
 800109c:	4a29      	ldr	r2, [pc, #164]	; (8001144 <I2C_IRQInterruptConfig+0xf8>)
 800109e:	430b      	orrs	r3, r1
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e046      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b3f      	cmp	r3, #63	; 0x3f
 80010a8:	d943      	bls.n	8001132 <I2C_IRQInterruptConfig+0xe6>
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b5f      	cmp	r3, #95	; 0x5f
 80010ae:	d840      	bhi.n	8001132 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <I2C_IRQInterruptConfig+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <I2C_IRQInterruptConfig+0xfc>)
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	e033      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b1f      	cmp	r3, #31
 80010ce:	d80a      	bhi.n	80010e6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <I2C_IRQInterruptConfig+0x100>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4611      	mov	r1, r2
 80010de:	4a1b      	ldr	r2, [pc, #108]	; (800114c <I2C_IRQInterruptConfig+0x100>)
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	e025      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b1f      	cmp	r3, #31
 80010ea:	d90f      	bls.n	800110c <I2C_IRQInterruptConfig+0xc0>
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b3f      	cmp	r3, #63	; 0x3f
 80010f0:	d80c      	bhi.n	800110c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <I2C_IRQInterruptConfig+0x104>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	f002 021f 	and.w	r2, r2, #31
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	4611      	mov	r1, r2
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <I2C_IRQInterruptConfig+0x104>)
 8001106:	430b      	orrs	r3, r1
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e012      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b3f      	cmp	r3, #63	; 0x3f
 8001110:	d90f      	bls.n	8001132 <I2C_IRQInterruptConfig+0xe6>
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b5f      	cmp	r3, #95	; 0x5f
 8001116:	d80c      	bhi.n	8001132 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <I2C_IRQInterruptConfig+0x108>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	4611      	mov	r1, r2
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <I2C_IRQInterruptConfig+0x108>)
 800112c:	430b      	orrs	r3, r1
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	e7ff      	b.n	8001132 <I2C_IRQInterruptConfig+0xe6>
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000e104 	.word	0xe000e104
 8001148:	e000e108 	.word	0xe000e108
 800114c:	e000e180 	.word	0xe000e180
 8001150:	e000e184 	.word	0xe000e184
 8001154:	e000e188 	.word	0xe000e188

08001158 <I2C_ExecuteAddressPhaseWrite>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;		// Makes space for read/write bit
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 				// SlaveAddr is Slave address + r/nw bit=0 (write)
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <I2C_ExecuteAddressPhaseRead>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 						//SlaveAddr is Slave address + r/nw bit=1
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	611a      	str	r2, [r3, #16]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <I2C_ClearADDRFlag>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01f      	beq.n	8001206 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7f1b      	ldrb	r3, [r3, #28]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d112      	bne.n	80011f4 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d11f      	bne.n	8001216 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fbad 	bl	800093c <I2C_ManageAcking>

				//clear the ADDR flag (read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag (read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80011f2:	e010      	b.n	8001216 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	60fb      	str	r3, [r7, #12]
}
 8001204:	e007      	b.n	8001216 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	60fb      	str	r3, [r7, #12]
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <I2C_MasterHandleTXEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0){
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00f      	beq.n	800124e <I2C_MasterHandleTXEInterrupt+0x30>
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60da      	str	r2, [r3, #12]

	}
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <I2C_MasterHandleRXNEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1){
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10b      	bne.n	8001282 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1){
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d91a      	bls.n	80012c0 <I2C_MasterHandleRXNEInterrupt+0x66>

		if(pI2CHandle->RxLen == 2){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d105      	bne.n	800129e <I2C_MasterHandleRXNEInterrupt+0x44>
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fb4f 	bl	800093c <I2C_ManageAcking>
		}
		//read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d110      	bne.n	80012ea <I2C_MasterHandleRXNEInterrupt+0x90>
		//close the I2C data reception and notify the application

		//1. Generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d104      	bne.n	80012dc <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb4c 	bl	8000974 <I2C_GenerateStopCondition>

		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fcad 	bl	8000c3c <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80012e2:	2101      	movs	r1, #1
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff f807 	bl	80002f8 <I2C_ApplicationEventCallback>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <__libc_init_array>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	4e0d      	ldr	r6, [pc, #52]	; (800132c <__libc_init_array+0x38>)
 80012f8:	4c0d      	ldr	r4, [pc, #52]	; (8001330 <__libc_init_array+0x3c>)
 80012fa:	1ba4      	subs	r4, r4, r6
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	2500      	movs	r5, #0
 8001300:	42a5      	cmp	r5, r4
 8001302:	d109      	bne.n	8001318 <__libc_init_array+0x24>
 8001304:	4e0b      	ldr	r6, [pc, #44]	; (8001334 <__libc_init_array+0x40>)
 8001306:	4c0c      	ldr	r4, [pc, #48]	; (8001338 <__libc_init_array+0x44>)
 8001308:	f000 f818 	bl	800133c <_init>
 800130c:	1ba4      	subs	r4, r4, r6
 800130e:	10a4      	asrs	r4, r4, #2
 8001310:	2500      	movs	r5, #0
 8001312:	42a5      	cmp	r5, r4
 8001314:	d105      	bne.n	8001322 <__libc_init_array+0x2e>
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800131c:	4798      	blx	r3
 800131e:	3501      	adds	r5, #1
 8001320:	e7ee      	b.n	8001300 <__libc_init_array+0xc>
 8001322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001326:	4798      	blx	r3
 8001328:	3501      	adds	r5, #1
 800132a:	e7f2      	b.n	8001312 <__libc_init_array+0x1e>
 800132c:	08001354 	.word	0x08001354
 8001330:	08001354 	.word	0x08001354
 8001334:	08001354 	.word	0x08001354
 8001338:	08001358 	.word	0x08001358

0800133c <_init>:
 800133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133e:	bf00      	nop
 8001340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001342:	bc08      	pop	{r3}
 8001344:	469e      	mov	lr, r3
 8001346:	4770      	bx	lr

08001348 <_fini>:
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	bf00      	nop
 800134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134e:	bc08      	pop	{r3}
 8001350:	469e      	mov	lr, r3
 8001352:	4770      	bx	lr
