
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001484  08001484  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001484  08001484  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001484  08001484  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001484  08001484  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001488  08001488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800148c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000018  080014a4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080014a4  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001eef  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000567  00000000  00000000  00021f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  000224a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023bc  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000014f9  00000000  00000000  00024bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009365  00000000  00000000  000260bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006d8  00000000  00000000  0002f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800146c 	.word	0x0800146c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	0800146c 	.word	0x0800146c

080001d4 <delay>:
//extern void initialise_monitor_handles();

//Flag variable
uint8_t rxComplt = RESET;

void delay(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <I2C1_GPIOInits>:
/*
 * PB6-> SCL // 28
 * PB7-> SDA // 27
 */

void I2C1_GPIOInits(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <I2C1_GPIOInits+0x40>)
 8000208:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800020e:	2301      	movs	r3, #1
 8000210:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000212:	2301      	movs	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800021e:	2306      	movs	r3, #6
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9b3 	bl	8000590 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022a:	2307      	movs	r3, #7
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9ad 	bl	8000590 <GPIO_Init>

}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <I2C1_Inits>:

void I2C1_Inits(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <I2C1_Inits+0x2c>)
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <I2C1_Inits+0x30>)
 800024c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <I2C1_Inits+0x2c>)
 8000250:	2201      	movs	r2, #1
 8000252:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <I2C1_Inits+0x2c>)
 8000256:	2261      	movs	r2, #97	; 0x61
 8000258:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <I2C1_Inits+0x2c>)
 800025c:	2200      	movs	r2, #0
 800025e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <I2C1_Inits+0x2c>)
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <I2C1_Inits+0x34>)
 8000264:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000266:	4802      	ldr	r0, [pc, #8]	; (8000270 <I2C1_Inits+0x2c>)
 8000268:	f000 fc72 	bl	8000b50 <I2C_Init>

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000038 	.word	0x20000038
 8000274:	40005400 	.word	0x40005400
 8000278:	000186a0 	.word	0x000186a0

0800027c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <GPIO_ButtonInit+0x2c>)
 8000284:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000286:	2304      	movs	r3, #4
 8000288:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028a:	2300      	movs	r3, #0
 800028c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028e:	2302      	movs	r3, #2
 8000290:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f979 	bl	8000590 <GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020800 	.word	0x40020800

080002ac <main>:

int main(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af02      	add	r7, sp, #8

	//initialise_monitor_handles();

	//printf("Application is running\n");

	GPIO_ButtonInit();
 80002b2:	f7ff ffe3 	bl	800027c <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002b6:	f7ff ffa3 	bl	8000200 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ba:	f7ff ffc3 	bl	8000244 <I2C1_Inits>

	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	201f      	movs	r0, #31
 80002c2:	f000 ff4b 	bl	800115c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	2020      	movs	r0, #32
 80002ca:	f000 ff47 	bl	800115c <I2C_IRQInterruptConfig>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	482a      	ldr	r0, [pc, #168]	; (800037c <main+0xd0>)
 80002d2:	f000 fc21 	bl	8000b18 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002d6:	2101      	movs	r1, #1
 80002d8:	4828      	ldr	r0, [pc, #160]	; (800037c <main+0xd0>)
 80002da:	f000 fb7b 	bl	80009d4 <I2C_ManageAcking>

	while(1){
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 80002de:	bf00      	nop
 80002e0:	2104      	movs	r1, #4
 80002e2:	4827      	ldr	r0, [pc, #156]	; (8000380 <main+0xd4>)
 80002e4:	f000 faf6 	bl	80008d4 <GPIO_ReadFromInputPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f8      	bne.n	80002e0 <main+0x34>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002ee:	f7ff ff71 	bl	80001d4 <delay>

		commandcode = 0x51;
 80002f2:	2351      	movs	r3, #81	; 0x51
 80002f4:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80002f6:	bf00      	nop
 80002f8:	1df9      	adds	r1, r7, #7
 80002fa:	2301      	movs	r3, #1
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2368      	movs	r3, #104	; 0x68
 8000300:	2201      	movs	r2, #1
 8000302:	4820      	ldr	r0, [pc, #128]	; (8000384 <main+0xd8>)
 8000304:	f000 fd37 	bl	8000d76 <I2C_MasterSendDataIT>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f4      	bne.n	80002f8 <main+0x4c>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800030e:	bf00      	nop
 8000310:	1db9      	adds	r1, r7, #6
 8000312:	2301      	movs	r3, #1
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2368      	movs	r3, #104	; 0x68
 8000318:	2201      	movs	r2, #1
 800031a:	481a      	ldr	r0, [pc, #104]	; (8000384 <main+0xd8>)
 800031c:	f000 fd6e 	bl	8000dfc <I2C_MasterReceiveDataIT>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f4      	bne.n	8000310 <main+0x64>

		commandcode = 0x52;
 8000326:	2352      	movs	r3, #82	; 0x52
 8000328:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 800032a:	bf00      	nop
 800032c:	1df9      	adds	r1, r7, #7
 800032e:	2301      	movs	r3, #1
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2368      	movs	r3, #104	; 0x68
 8000334:	2201      	movs	r2, #1
 8000336:	4813      	ldr	r0, [pc, #76]	; (8000384 <main+0xd8>)
 8000338:	f000 fd1d 	bl	8000d76 <I2C_MasterSendDataIT>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f4      	bne.n	800032c <main+0x80>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_READY);
 8000342:	bf00      	nop
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	2300      	movs	r3, #0
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2368      	movs	r3, #104	; 0x68
 800034c:	490e      	ldr	r1, [pc, #56]	; (8000388 <main+0xdc>)
 800034e:	480d      	ldr	r0, [pc, #52]	; (8000384 <main+0xd8>)
 8000350:	f000 fd54 	bl	8000dfc <I2C_MasterReceiveDataIT>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f4      	bne.n	8000344 <main+0x98>

		rxComplt = RESET;
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <main+0xe0>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]

		//wait till rx completes
	    while(rxComplt != SET){}
 8000360:	bf00      	nop
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <main+0xe0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d1fb      	bne.n	8000362 <main+0xb6>

		rcv_buf[len+1] = '\0';
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	3301      	adds	r3, #1
 800036e:	4a06      	ldr	r2, [pc, #24]	; (8000388 <main+0xdc>)
 8000370:	2100      	movs	r1, #0
 8000372:	54d1      	strb	r1, [r2, r3]

		//printf("Data : %s",rcv_buf);

		rxComplt = RESET;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <main+0xe0>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 800037a:	e7b0      	b.n	80002de <main+0x32>
 800037c:	40005400 	.word	0x40005400
 8000380:	40020800 	.word	0x40020800
 8000384:	20000038 	.word	0x20000038
 8000388:	20000060 	.word	0x20000060
 800038c:	20000034 	.word	0x20000034

08000390 <I2C1_EV_IRQHandler>:
	}
}

void I2C1_EV_IRQHandler(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <I2C1_EV_IRQHandler+0x10>)
 8000396:	f000 fd7b 	bl	8000e90 <I2C_EV_IRQHandling>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000038 	.word	0x20000038

080003a4 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <I2C1_ER_IRQHandler+0x10>)
 80003aa:	f000 fe4f 	bl	800104c <I2C_ER_IRQHandling>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000038 	.word	0x20000038

080003b8 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]

     if(AppEv == I2C_EV_TX_CMPLT){
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d010      	beq.n	80003ec <I2C_ApplicationEventCallback+0x34>
    	 //printf("Tx is completed\n");
     } else if (AppEv == I2C_EV_RX_CMPLT){
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d103      	bne.n	80003d8 <I2C_ApplicationEventCallback+0x20>
    	 //printf("Rx is completed\n");
    	 rxComplt = SET;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <I2C_ApplicationEventCallback+0x3c>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	701a      	strb	r2, [r3, #0]
    	 I2C_GenerateStopCondition(I2C1);

    	 //Hang in infinite loop
    	 while(1);
     }
}
 80003d6:	e009      	b.n	80003ec <I2C_ApplicationEventCallback+0x34>
     } else if (AppEv == I2C_ERROR_AF){
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b05      	cmp	r3, #5
 80003dc:	d106      	bne.n	80003ec <I2C_ApplicationEventCallback+0x34>
    	 I2C_CloseSendData(pI2CHandle);
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f000 fca6 	bl	8000d30 <I2C_CloseSendData>
    	 I2C_GenerateStopCondition(I2C1);
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <I2C_ApplicationEventCallback+0x40>)
 80003e6:	f000 fb11 	bl	8000a0c <I2C_GenerateStopCondition>
    	 while(1);
 80003ea:	e7fe      	b.n	80003ea <I2C_ApplicationEventCallback+0x32>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000034 	.word	0x20000034
 80003f8:	40005400 	.word	0x40005400

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480d      	ldr	r0, [pc, #52]	; (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490e      	ldr	r1, [pc, #56]	; (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0b      	ldr	r4, [pc, #44]	; (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000426:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 fffb 	bl	8001424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff ff3d 	bl	80002ac <main>

08000432 <LoopForever>:

LoopForever:
    b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000440:	0800148c 	.word	0x0800148c
  ldr r2, =_sbss
 8000444:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000448:	20000080 	.word	0x20000080

0800044c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC_IRQHandler>
	...

08000450 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800045c:	78fb      	ldrb	r3, [r7, #3]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d141      	bne.n	80004e6 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a43      	ldr	r2, [pc, #268]	; (8000574 <GPIO_PeriClockControl+0x124>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800046a:	4b43      	ldr	r3, [pc, #268]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a42      	ldr	r2, [pc, #264]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000476:	e077      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a40      	ldr	r2, [pc, #256]	; (800057c <GPIO_PeriClockControl+0x12c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d106      	bne.n	800048e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a3c      	ldr	r2, [pc, #240]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000486:	f043 0302 	orr.w	r3, r3, #2
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	e06c      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a3b      	ldr	r2, [pc, #236]	; (8000580 <GPIO_PeriClockControl+0x130>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049a:	4a37      	ldr	r2, [pc, #220]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a2:	e061      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a37      	ldr	r2, [pc, #220]	; (8000584 <GPIO_PeriClockControl+0x134>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d106      	bne.n	80004ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4a31      	ldr	r2, [pc, #196]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b8:	e056      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <GPIO_PeriClockControl+0x138>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d106      	bne.n	80004d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004c2:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c6:	4a2c      	ldr	r2, [pc, #176]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004c8:	f043 0310 	orr.w	r3, r3, #16
 80004cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ce:	e04b      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <GPIO_PeriClockControl+0x13c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d147      	bne.n	8000568 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e4:	e040      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a22      	ldr	r2, [pc, #136]	; (8000574 <GPIO_PeriClockControl+0x124>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a21      	ldr	r2, [pc, #132]	; (8000578 <GPIO_PeriClockControl+0x128>)
 80004f4:	f023 0301 	bic.w	r3, r3, #1
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fa:	e035      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a1f      	ldr	r2, [pc, #124]	; (800057c <GPIO_PeriClockControl+0x12c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800050a:	f023 0302 	bic.w	r3, r3, #2
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e02a      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a1a      	ldr	r2, [pc, #104]	; (8000580 <GPIO_PeriClockControl+0x130>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000520:	f023 0304 	bic.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e01f      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a16      	ldr	r2, [pc, #88]	; (8000584 <GPIO_PeriClockControl+0x134>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000536:	f023 0308 	bic.w	r3, r3, #8
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e014      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a11      	ldr	r2, [pc, #68]	; (8000588 <GPIO_PeriClockControl+0x138>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800054c:	f023 0310 	bic.w	r3, r3, #16
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e009      	b.n	8000568 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <GPIO_PeriClockControl+0x13c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d105      	bne.n	8000568 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <GPIO_PeriClockControl+0x128>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <GPIO_PeriClockControl+0x128>)
 8000562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40020000 	.word	0x40020000
 8000578:	40023800 	.word	0x40023800
 800057c:	40020400 	.word	0x40020400
 8000580:	40020800 	.word	0x40020800
 8000584:	40020c00 	.word	0x40020c00
 8000588:	40021000 	.word	0x40021000
 800058c:	40021c00 	.word	0x40021c00

08000590 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff54 	bl	8000450 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d822      	bhi.n	80005f6 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	461a      	mov	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	2103      	movs	r1, #3
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	400a      	ands	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
		temp = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	e0ca      	b.n	800078c <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	d117      	bne.n	800062e <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <GPIO_Init+0x17c>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a3f      	ldr	r2, [pc, #252]	; (800070c <GPIO_Init+0x17c>)
 8000610:	430b      	orrs	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <GPIO_Init+0x17c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <GPIO_Init+0x17c>)
 8000628:	400b      	ands	r3, r1
 800062a:	6093      	str	r3, [r2, #8]
 800062c:	e035      	b.n	800069a <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	795b      	ldrb	r3, [r3, #5]
 8000632:	2b05      	cmp	r3, #5
 8000634:	d117      	bne.n	8000666 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <GPIO_Init+0x17c>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7912      	ldrb	r2, [r2, #4]
 800063e:	4611      	mov	r1, r2
 8000640:	2201      	movs	r2, #1
 8000642:	408a      	lsls	r2, r1
 8000644:	4611      	mov	r1, r2
 8000646:	4a31      	ldr	r2, [pc, #196]	; (800070c <GPIO_Init+0x17c>)
 8000648:	430b      	orrs	r3, r1
 800064a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <GPIO_Init+0x17c>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	43d2      	mvns	r2, r2
 800065c:	4611      	mov	r1, r2
 800065e:	4a2b      	ldr	r2, [pc, #172]	; (800070c <GPIO_Init+0x17c>)
 8000660:	400b      	ands	r3, r1
 8000662:	60d3      	str	r3, [r2, #12]
 8000664:	e019      	b.n	800069a <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d115      	bne.n	800069a <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <GPIO_Init+0x17c>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7912      	ldrb	r2, [r2, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a23      	ldr	r2, [pc, #140]	; (800070c <GPIO_Init+0x17c>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <GPIO_Init+0x17c>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	7912      	ldrb	r2, [r2, #4]
 800068c:	4611      	mov	r1, r2
 800068e:	2201      	movs	r2, #1
 8000690:	408a      	lsls	r2, r1
 8000692:	4611      	mov	r1, r2
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <GPIO_Init+0x17c>)
 8000696:	430b      	orrs	r3, r1
 8000698:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <GPIO_Init+0x180>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_Init+0x180>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <GPIO_Init+0x184>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d034      	beq.n	800072c <GPIO_Init+0x19c>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <GPIO_Init+0x188>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d01d      	beq.n	8000708 <GPIO_Init+0x178>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <GPIO_Init+0x18c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d016      	beq.n	8000704 <GPIO_Init+0x174>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <GPIO_Init+0x190>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d00f      	beq.n	8000700 <GPIO_Init+0x170>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <GPIO_Init+0x194>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d008      	beq.n	80006fc <GPIO_Init+0x16c>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <GPIO_Init+0x198>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d101      	bne.n	80006f8 <GPIO_Init+0x168>
 80006f4:	2307      	movs	r3, #7
 80006f6:	e01a      	b.n	800072e <GPIO_Init+0x19e>
 80006f8:	2300      	movs	r3, #0
 80006fa:	e018      	b.n	800072e <GPIO_Init+0x19e>
 80006fc:	2304      	movs	r3, #4
 80006fe:	e016      	b.n	800072e <GPIO_Init+0x19e>
 8000700:	2303      	movs	r3, #3
 8000702:	e014      	b.n	800072e <GPIO_Init+0x19e>
 8000704:	2302      	movs	r3, #2
 8000706:	e012      	b.n	800072e <GPIO_Init+0x19e>
 8000708:	2301      	movs	r3, #1
 800070a:	e010      	b.n	800072e <GPIO_Init+0x19e>
 800070c:	40013c00 	.word	0x40013c00
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400
 800071c:	40020800 	.word	0x40020800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40021000 	.word	0x40021000
 8000728:	40021c00 	.word	0x40021c00
 800072c:	2300      	movs	r3, #0
 800072e:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 8000730:	4a66      	ldr	r2, [pc, #408]	; (80008cc <GPIO_Init+0x33c>)
 8000732:	7cfb      	ldrb	r3, [r7, #19]
 8000734:	3302      	adds	r3, #2
 8000736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800073a:	7cbb      	ldrb	r3, [r7, #18]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	210f      	movs	r1, #15
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	4960      	ldr	r1, [pc, #384]	; (80008cc <GPIO_Init+0x33c>)
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	4002      	ands	r2, r0
 800074e:	3302      	adds	r3, #2
 8000750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 8000754:	4a5d      	ldr	r2, [pc, #372]	; (80008cc <GPIO_Init+0x33c>)
 8000756:	7cfb      	ldrb	r3, [r7, #19]
 8000758:	3302      	adds	r3, #2
 800075a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075e:	7c79      	ldrb	r1, [r7, #17]
 8000760:	7cbb      	ldrb	r3, [r7, #18]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	4618      	mov	r0, r3
 800076a:	4958      	ldr	r1, [pc, #352]	; (80008cc <GPIO_Init+0x33c>)
 800076c:	7cfb      	ldrb	r3, [r7, #19]
 800076e:	4302      	orrs	r2, r0
 8000770:	3302      	adds	r3, #2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000776:	4b56      	ldr	r3, [pc, #344]	; (80008d0 <GPIO_Init+0x340>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7912      	ldrb	r2, [r2, #4]
 800077e:	4611      	mov	r1, r2
 8000780:	2201      	movs	r2, #1
 8000782:	408a      	lsls	r2, r1
 8000784:	4611      	mov	r1, r2
 8000786:	4a52      	ldr	r2, [pc, #328]	; (80008d0 <GPIO_Init+0x340>)
 8000788:	430b      	orrs	r3, r1
 800078a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2103      	movs	r1, #3
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	400a      	ands	r2, r1
 80007be:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6899      	ldr	r1, [r3, #8]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	79db      	ldrb	r3, [r3, #7]
 80007d8:	461a      	mov	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	400a      	ands	r2, r1
 8000802:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68d9      	ldr	r1, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	430a      	orrs	r2, r1
 8000812:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a1b      	ldrb	r3, [r3, #8]
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	4619      	mov	r1, r3
 8000834:	2301      	movs	r3, #1
 8000836:	408b      	lsls	r3, r1
 8000838:	43db      	mvns	r3, r3
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	400a      	ands	r2, r1
 8000842:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6859      	ldr	r1, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	430a      	orrs	r2, r1
 8000852:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d131      	bne.n	80008c4 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	7c3a      	ldrb	r2, [r7, #16]
 8000878:	3208      	adds	r2, #8
 800087a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	220f      	movs	r2, #15
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	4618      	mov	r0, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	7c3a      	ldrb	r2, [r7, #16]
 8000892:	4001      	ands	r1, r0
 8000894:	3208      	adds	r2, #8
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	7c3a      	ldrb	r2, [r7, #16]
 80008a0:	3208      	adds	r2, #8
 80008a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7a5b      	ldrb	r3, [r3, #9]
 80008aa:	461a      	mov	r2, r3
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7c3a      	ldrb	r2, [r7, #16]
 80008bc:	4301      	orrs	r1, r0
 80008be:	3208      	adds	r2, #8
 80008c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40013800 	.word	0x40013800
 80008d0:	40013c00 	.word	0x40013c00

080008d4 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]

	return value;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]

}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <GPIO_ToggleOutputPin>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	78fa      	ldrb	r2, [r7, #3]
 8000912:	2101      	movs	r1, #1
 8000914:	fa01 f202 	lsl.w	r2, r1, r2
 8000918:	405a      	eors	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	615a      	str	r2, [r3, #20]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <RCC_GetPCLK1Value>:
uint32_t RCC_GetPLLOutputClock();

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_Prescaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <RCC_GetPCLK1Value+0x94>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0303 	and.w	r3, r3, #3
 800093e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000940:	7a7b      	ldrb	r3, [r7, #9]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <RCC_GetPCLK1Value+0x98>)
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e004      	b.n	8000956 <RCC_GetPCLK1Value+0x2a>

	} else if(clksrc == 1){
 800094c:	7a7b      	ldrb	r3, [r7, #9]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <RCC_GetPCLK1Value+0x9c>)
 8000954:	60fb      	str	r3, [r7, #12]
	} else if(clksrc == 2){
		//SystemClk = RCC_GetPLLOutputClock();
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <RCC_GetPCLK1Value+0x94>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000964:	7a3b      	ldrb	r3, [r7, #8]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d802      	bhi.n	8000970 <RCC_GetPCLK1Value+0x44>
		ahbp = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	72fb      	strb	r3, [r7, #11]
 800096e:	e005      	b.n	800097c <RCC_GetPCLK1Value+0x50>
	} else{
		ahbp = AHB_Prescaler[temp - 8];
 8000970:	7a3b      	ldrb	r3, [r7, #8]
 8000972:	3b08      	subs	r3, #8
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <RCC_GetPCLK1Value+0xa0>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <RCC_GetPCLK1Value+0x94>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	0a9b      	lsrs	r3, r3, #10
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 800098a:	7a3b      	ldrb	r3, [r7, #8]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d802      	bhi.n	8000996 <RCC_GetPCLK1Value+0x6a>
		apb1 = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	72bb      	strb	r3, [r7, #10]
 8000994:	e005      	b.n	80009a2 <RCC_GetPCLK1Value+0x76>
	} else{
		apb1 = APB1_Prescaler[temp - 4];
 8000996:	7a3b      	ldrb	r3, [r7, #8]
 8000998:	3b04      	subs	r3, #4
 800099a:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <RCC_GetPCLK1Value+0xa4>)
 800099c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp)/apb1;
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80009aa:	7abb      	ldrb	r3, [r7, #10]
 80009ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40023800 	.word	0x40023800
 80009c4:	00f42400 	.word	0x00f42400
 80009c8:	007a1200 	.word	0x007a1200
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000010 	.word	0x20000010

080009d4 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE){
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
	} else{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80009f2:	e005      	b.n	8000a00 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <I2C_GenerateStopCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <teste>:

void teste(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOC;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <teste+0x38>)
 8000a34:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000a36:	2305      	movs	r3, #5
 8000a38:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a42:	2300      	movs	r3, #0
 8000a44:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioLed);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd9f 	bl	8000590 <GPIO_Init>

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_5);
 8000a52:	2105      	movs	r1, #5
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <teste+0x38>)
 8000a56:	f7ff ff53 	bl	8000900 <GPIO_ToggleOutputPin>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020800 	.word	0x40020800

08000a68 <I2C_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *********************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d120      	bne.n	8000abc <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <I2C_PeriClockControl+0xa0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d106      	bne.n	8000a90 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000a8e:	e035      	b.n	8000afc <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <I2C_PeriClockControl+0xa8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d106      	bne.n	8000aa6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aa4:	e02a      	b.n	8000afc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <I2C_PeriClockControl+0xac>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d126      	bne.n	8000afc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aba:	e01f      	b.n	8000afc <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <I2C_PeriClockControl+0xa0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad0:	e014      	b.n	8000afc <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <I2C_PeriClockControl+0xa8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000ae0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae6:	e009      	b.n	8000afc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <I2C_PeriClockControl+0xac>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d105      	bne.n	8000afc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <I2C_PeriClockControl+0xa4>)
 8000af6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40005800 	.word	0x40005800
 8000b14:	40005c00 	.word	0x40005c00

08000b18 <I2C_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d106      	bne.n	8000b38 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f043 0201 	orr.w	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000b36:	e005      	b.n	8000b44 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f023 0201 	bic.w	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <I2C_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff80 	bl	8000a68 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7a5b      	ldrb	r3, [r3, #9]
 8000b6c:	029b      	lsls	r3, r3, #10
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6819      	ldr	r1, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000b8a:	f7ff fecf 	bl	800092c <RCC_GetPCLK1Value>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <I2C_Init+0x178>)
 8000b92:	fba3 2302 	umull	r2, r3, r3, r2
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6859      	ldr	r1, [r3, #4]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7a1b      	ldrb	r3, [r3, #8]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);													/* Should always be kept at 1 by software */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bca:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6899      	ldr	r1, [r3, #8]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4a38      	ldr	r2, [pc, #224]	; (8000ccc <I2C_Init+0x17c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d80f      	bhi.n	8000c0e <I2C_Init+0xbe>
		 * T_high + T_low = T_scl
		 * T_scl = 2 * CCR * T_pclk1
		 * CCR = T_scl / (2 * T_pclk1) [time domain]
		 * CCR = F_pclk1 / (2 * F_scl) [frequency domain] */

		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000bee:	f7ff fe9d 	bl	800092c <RCC_GetPCLK1Value>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);										/* Only 12 bits */
 8000c00:	897b      	ldrh	r3, [r7, #10]
 8000c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e02d      	b.n	8000c6a <I2C_Init+0x11a>

	} else{
		//mode is fast mode

		tempreg |= (1 << 15);												/* F/S: I2C master mode selection (FM) */
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c14:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);			/* DUTY: Fm mode duty cycle */
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a9b      	ldrb	r3, [r3, #10]
 8000c1a:	039b      	lsls	r3, r3, #14
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7a9b      	ldrb	r3, [r3, #10]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10b      	bne.n	8000c44 <I2C_Init+0xf4>
			 * T_high + T_low = T_scl
			 * T_scl = 3 * CCR * T_pclk1
			 * CCR = T_scl / (3 * T_pclk1) [time domain]
			 * CCR = F_pclk1 / (3 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c2c:	f7ff fe7e 	bl	800092c <RCC_GetPCLK1Value>
 8000c30:	4601      	mov	r1, r0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c40:	817b      	strh	r3, [r7, #10]
 8000c42:	e00c      	b.n	8000c5e <I2C_Init+0x10e>
			* T_high + T_low = T_scl
			* T_scl = 25 * CCR * T_pclk1
			* CCR = T_scl / (25 * T_pclk1) [time domain]
			* CCR = F_pclk1 / (25 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c44:	f7ff fe72 	bl	800092c <RCC_GetPCLK1Value>
 8000c48:	4601      	mov	r1, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	009a      	lsls	r2, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5c:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000c5e:	897b      	ldrh	r3, [r7, #10]
 8000c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69d9      	ldr	r1, [r3, #28]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <I2C_Init+0x17c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d809      	bhi.n	8000c98 <I2C_Init+0x148>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000c84:	f7ff fe52 	bl	800092c <RCC_GetPCLK1Value>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <I2C_Init+0x178>)
 8000c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c90:	0c9b      	lsrs	r3, r3, #18
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e00d      	b.n	8000cb4 <I2C_Init+0x164>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c98:	f7ff fe48 	bl	800092c <RCC_GetPCLK1Value>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ca2:	fb03 f302 	mul.w	r3, r3, r2
 8000ca6:	0a5b      	lsrs	r3, r3, #9
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <I2C_Init+0x180>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	09db      	lsrs	r3, r3, #7
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cbe:	621a      	str	r2, [r3, #32]
}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	000186a0 	.word	0x000186a0
 8000cd0:	00044b83 	.word	0x00044b83

08000cd4 <I2C_CloseReceiveData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cea:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cfa:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7a5b      	ldrb	r3, [r3, #9]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe56 	bl	80009d4 <I2C_ManageAcking>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <I2C_CloseSendData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d46:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d56:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <I2C_MasterSendDataIT>:
 *
 * @return            -
 *
 * @Note              -
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	7f1b      	ldrb	r3, [r3, #28]
 8000d88:	75fb      	strb	r3, [r7, #23]

	if((busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)){
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d030      	beq.n	8000df2 <I2C_MasterSendDataIT+0x7c>
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d02d      	beq.n	8000df2 <I2C_MasterSendDataIT+0x7c>

		pI2CHandle->pTxBuffer = pTxBuffer;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2202      	movs	r2, #2
 8000da6:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fa53 	bl	8001268 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dd0:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de0:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df0:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <I2C_MasterReceiveDataIT>:

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	7f1b      	ldrb	r3, [r3, #28]
 8000e16:	75fb      	strb	r3, [r7, #23]

	if((busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)){
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d033      	beq.n	8000e86 <I2C_MasterReceiveDataIT+0x8a>
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d030      	beq.n	8000e86 <I2C_MasterReceiveDataIT+0x8a>

		pI2CHandle->pRxBuffer = pRxBuffer;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2201      	movs	r2, #1
 8000e34:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; 					//Rxsize is used in the ISR code to manage the data reception
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	79ba      	ldrb	r2, [r7, #6]
 8000e40:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fa09 	bl	8001268 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e64:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e74:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e84:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	//Interrupt handling for both master and slave mode of a device

	teste();
 8000e98:	f7ff fdc8 	bl	8000a2c <teste>

	uint32_t temp1, temp2, temp3;
	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea6:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb2:	613b      	str	r3, [r7, #16]

	// For setting it, see Table 71 on reference manual

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);		//Check the SB (start bit) flag
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
	//1. Handle for interrupt generated by SB event
	// 	 Note : SB flag is only applicable in Master mode

	if(temp1 && temp3){
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d01b      	beq.n	8000efe <I2C_EV_IRQHandling+0x6e>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d018      	beq.n	8000efe <I2C_EV_IRQHandling+0x6e>
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7f1b      	ldrb	r3, [r3, #28]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d108      	bne.n	8000ee6 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f5b      	ldrb	r3, [r3, #29]
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f000 f9d2 	bl	8001288 <I2C_ExecuteAddressPhaseWrite>
 8000ee4:	e00b      	b.n	8000efe <I2C_EV_IRQHandling+0x6e>
		} else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f1b      	ldrb	r3, [r3, #28]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d107      	bne.n	8000efe <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7f5b      	ldrb	r3, [r3, #29]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f000 f9db 	bl	80012b4 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode  : Address matched with own address
	if(temp1 && temp3){
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <I2C_EV_IRQHandling+0x8c>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <I2C_EV_IRQHandling+0x8c>
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f9e2 	bl	80012e0 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3){
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d022      	beq.n	8000f74 <I2C_EV_IRQHandling+0xe4>
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d01f      	beq.n	8000f74 <I2C_EV_IRQHandling+0xe4>
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7f1b      	ldrb	r3, [r3, #28]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d11b      	bne.n	8000f74 <I2C_EV_IRQHandling+0xe4>
			//make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d014      	beq.n	8000f74 <I2C_EV_IRQHandling+0xe4>
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0){		// Make sure that Tx Lenght is equal to zero
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d110      	bne.n	8000f74 <I2C_EV_IRQHandling+0xe4>
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d104      	bne.n	8000f66 <I2C_EV_IRQHandling+0xd6>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd53 	bl	8000a0c <I2C_GenerateStopCondition>
					}

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fee2 	bl	8000d30 <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fa22 	bl	80003b8 <I2C_ApplicationEventCallback>
			; //nothing to do here
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	// The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3){
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <I2C_EV_IRQHandling+0x110>
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d009      	beq.n	8000fa0 <I2C_EV_IRQHandling+0x110>
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 (already done above) 2) Write to CR1

		pI2CHandle->pI2Cx->CR1 |= 0x0000;	// Do not modify the register in write operation
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected or generated by the master
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000f98:	2102      	movs	r1, #2
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fa0c 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3){
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d01f      	beq.n	8000ff2 <I2C_EV_IRQHandling+0x162>
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01c      	beq.n	8000ff2 <I2C_EV_IRQHandling+0x162>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <I2C_EV_IRQHandling+0x162>
		//TXE flag is set
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <I2C_EV_IRQHandling+0x14c>
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7f1b      	ldrb	r3, [r3, #28]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d10e      	bne.n	8000ff2 <I2C_EV_IRQHandling+0x162>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f9ba 	bl	800134e <I2C_MasterHandleTXEInterrupt>
 8000fda:	e00a      	b.n	8000ff2 <I2C_EV_IRQHandling+0x162>
			}
		} else{
			//slave
			//make sure that the slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <I2C_EV_IRQHandling+0x162>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000fea:	2108      	movs	r1, #8
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff f9e3 	bl	80003b8 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffc:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3){
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d01f      	beq.n	8001044 <I2C_EV_IRQHandling+0x1b4>
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d01c      	beq.n	8001044 <I2C_EV_IRQHandling+0x1b4>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d019      	beq.n	8001044 <I2C_EV_IRQHandling+0x1b4>
		//RXNE flag is set
		//check device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <I2C_EV_IRQHandling+0x19e>
			//The device is master
			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10e      	bne.n	8001044 <I2C_EV_IRQHandling+0x1b4>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f9af 	bl	800138a <I2C_MasterHandleRXNEInterrupt>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 800102c:	e00a      	b.n	8001044 <I2C_EV_IRQHandling+0x1b4>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <I2C_EV_IRQHandling+0x1b4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 800103c:	2109      	movs	r1, #9
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff f9ba 	bl	80003b8 <I2C_ApplicationEventCallback>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <I2C_ER_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	teste();
 8001054:	f7ff fcea 	bl	8000a2c <teste>

	uint32_t temp1, temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & (1 << I2C_CR2_ITERREN);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_BERR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2){
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00e      	beq.n	8001094 <I2C_ER_IRQHandling+0x48>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <I2C_ER_IRQHandling+0x48>
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 800108c:	2103      	movs	r1, #3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff f992 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_ARLO);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800109e:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00e      	beq.n	80010c4 <I2C_ER_IRQHandling+0x78>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <I2C_ER_IRQHandling+0x78>
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010ba:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 80010bc:	2104      	movs	r1, #4
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff f97a 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_AF);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <I2C_ER_IRQHandling+0xa8>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <I2C_ER_IRQHandling+0xa8>
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ea:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 80010ec:	2105      	movs	r1, #5
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff f962 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_OVR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010fe:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00e      	beq.n	8001124 <I2C_ER_IRQHandling+0xd8>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <I2C_ER_IRQHandling+0xd8>
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800111a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800111c:	2106      	movs	r1, #6
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff f94a 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_TIMEOUT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00e      	beq.n	8001154 <I2C_ER_IRQHandling+0x108>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <I2C_ER_IRQHandling+0x108>
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800114a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 800114c:	2107      	movs	r1, #7
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff f932 	bl	80003b8 <I2C_ApplicationEventCallback>
	}
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <I2C_IRQInterruptConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d133      	bne.n	80011da <I2C_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b1f      	cmp	r3, #31
 8001176:	d80a      	bhi.n	800118e <I2C_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <I2C_IRQInterruptConfig+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	4611      	mov	r1, r2
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <I2C_IRQInterruptConfig+0xf4>)
 8001188:	430b      	orrs	r3, r1
 800118a:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 800118c:	e059      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b1f      	cmp	r3, #31
 8001192:	d90f      	bls.n	80011b4 <I2C_IRQInterruptConfig+0x58>
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b3f      	cmp	r3, #63	; 0x3f
 8001198:	d80c      	bhi.n	80011b4 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <I2C_IRQInterruptConfig+0xf8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	f002 021f 	and.w	r2, r2, #31
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	4611      	mov	r1, r2
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <I2C_IRQInterruptConfig+0xf8>)
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e046      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b3f      	cmp	r3, #63	; 0x3f
 80011b8:	d943      	bls.n	8001242 <I2C_IRQInterruptConfig+0xe6>
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b5f      	cmp	r3, #95	; 0x5f
 80011be:	d840      	bhi.n	8001242 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <I2C_IRQInterruptConfig+0xfc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	4611      	mov	r1, r2
 80011d2:	4a21      	ldr	r2, [pc, #132]	; (8001258 <I2C_IRQInterruptConfig+0xfc>)
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	e033      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b1f      	cmp	r3, #31
 80011de:	d80a      	bhi.n	80011f6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <I2C_IRQInterruptConfig+0x100>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	4611      	mov	r1, r2
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <I2C_IRQInterruptConfig+0x100>)
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	e025      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b1f      	cmp	r3, #31
 80011fa:	d90f      	bls.n	800121c <I2C_IRQInterruptConfig+0xc0>
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001200:	d80c      	bhi.n	800121c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <I2C_IRQInterruptConfig+0x104>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	f002 021f 	and.w	r2, r2, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4611      	mov	r1, r2
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <I2C_IRQInterruptConfig+0x104>)
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e012      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b3f      	cmp	r3, #63	; 0x3f
 8001220:	d90f      	bls.n	8001242 <I2C_IRQInterruptConfig+0xe6>
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b5f      	cmp	r3, #95	; 0x5f
 8001226:	d80c      	bhi.n	8001242 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <I2C_IRQInterruptConfig+0x108>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001232:	2101      	movs	r1, #1
 8001234:	fa01 f202 	lsl.w	r2, r1, r2
 8001238:	4611      	mov	r1, r2
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <I2C_IRQInterruptConfig+0x108>)
 800123c:	430b      	orrs	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	e7ff      	b.n	8001242 <I2C_IRQInterruptConfig+0xe6>
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000e104 	.word	0xe000e104
 8001258:	e000e108 	.word	0xe000e108
 800125c:	e000e180 	.word	0xe000e180
 8001260:	e000e184 	.word	0xe000e184
 8001264:	e000e188 	.word	0xe000e188

08001268 <I2C_GenerateStartCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <I2C_ExecuteAddressPhaseWrite>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;		// Makes space for read/write bit
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 				// SlaveAddr is Slave address + r/nw bit=0 (write)
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80012a2:	78fa      	ldrb	r2, [r7, #3]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <I2C_ExecuteAddressPhaseRead>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 						//SlaveAddr is Slave address + r/nw bit=1
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	611a      	str	r2, [r3, #16]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <I2C_ClearADDRFlag>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01f      	beq.n	8001336 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7f1b      	ldrb	r3, [r3, #28]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d112      	bne.n	8001324 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d11f      	bne.n	8001346 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb61 	bl	80009d4 <I2C_ManageAcking>

				//clear the ADDR flag (read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag (read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001322:	e010      	b.n	8001346 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	60fb      	str	r3, [r7, #12]
}
 8001334:	e007      	b.n	8001346 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	60fb      	str	r3, [r7, #12]
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <I2C_MasterHandleTXEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00f      	beq.n	800137e <I2C_MasterHandleTXEInterrupt+0x30>
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60da      	str	r2, [r3, #12]

	}
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <I2C_MasterHandleRXNEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1){
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10b      	bne.n	80013b2 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d91a      	bls.n	80013f0 <I2C_MasterHandleRXNEInterrupt+0x66>

		if(pI2CHandle->RxLen == 2){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d105      	bne.n	80013ce <I2C_MasterHandleRXNEInterrupt+0x44>
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fb03 	bl	80009d4 <I2C_ManageAcking>
		}
		//read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	1e5a      	subs	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d110      	bne.n	800141a <I2C_MasterHandleRXNEInterrupt+0x90>
		//close the I2C data reception and notify the application

		//1. Generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d104      	bne.n	800140c <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb00 	bl	8000a0c <I2C_GenerateStopCondition>

		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fc61 	bl	8000cd4 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001412:	2101      	movs	r1, #1
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7fe ffcf 	bl	80003b8 <I2C_ApplicationEventCallback>
	}
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <__libc_init_array>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	4e0d      	ldr	r6, [pc, #52]	; (800145c <__libc_init_array+0x38>)
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <__libc_init_array+0x3c>)
 800142a:	1ba4      	subs	r4, r4, r6
 800142c:	10a4      	asrs	r4, r4, #2
 800142e:	2500      	movs	r5, #0
 8001430:	42a5      	cmp	r5, r4
 8001432:	d109      	bne.n	8001448 <__libc_init_array+0x24>
 8001434:	4e0b      	ldr	r6, [pc, #44]	; (8001464 <__libc_init_array+0x40>)
 8001436:	4c0c      	ldr	r4, [pc, #48]	; (8001468 <__libc_init_array+0x44>)
 8001438:	f000 f818 	bl	800146c <_init>
 800143c:	1ba4      	subs	r4, r4, r6
 800143e:	10a4      	asrs	r4, r4, #2
 8001440:	2500      	movs	r5, #0
 8001442:	42a5      	cmp	r5, r4
 8001444:	d105      	bne.n	8001452 <__libc_init_array+0x2e>
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144c:	4798      	blx	r3
 800144e:	3501      	adds	r5, #1
 8001450:	e7ee      	b.n	8001430 <__libc_init_array+0xc>
 8001452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001456:	4798      	blx	r3
 8001458:	3501      	adds	r5, #1
 800145a:	e7f2      	b.n	8001442 <__libc_init_array+0x1e>
 800145c:	08001484 	.word	0x08001484
 8001460:	08001484 	.word	0x08001484
 8001464:	08001484 	.word	0x08001484
 8001468:	08001488 	.word	0x08001488

0800146c <_init>:
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	bf00      	nop
 8001470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001472:	bc08      	pop	{r3}
 8001474:	469e      	mov	lr, r3
 8001476:	4770      	bx	lr

08001478 <_fini>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr
