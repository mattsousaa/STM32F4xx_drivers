
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001214  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013a8  080013a8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013a8  080013a8  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  080013a8  080013a8  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013a8  080013a8  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013ac  080013ac  000113ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  080013b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200001b0  08001560  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08001560  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fb7  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000056e  00000000  00000000  00022197  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e8  00000000  00000000  00022708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000023bc  00000000  00000000  00022aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000150e  00000000  00000000  00024e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000093bf  00000000  00000000  0002636a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000074c  00000000  00000000  0002f7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001b0 	.word	0x200001b0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001390 	.word	0x08001390

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001b4 	.word	0x200001b4
 80001d0:	08001390 	.word	0x08001390

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <I2C1_GPIOInits>:
/*
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <I2C1_GPIOInits+0x40>)
 80001ec:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001f2:	2301      	movs	r3, #1
 80001f4:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001f6:	2300      	movs	r3, #0
 80001f8:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001fa:	2304      	movs	r3, #4
 80001fc:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000202:	2306      	movs	r3, #6
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9b5 	bl	8000578 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800020e:	2307      	movs	r3, #7
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f9af 	bl	8000578 <GPIO_Init>

}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40020400 	.word	0x40020400

08000228 <I2C1_Inits>:

void I2C1_Inits(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <I2C1_Inits+0x2c>)
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <I2C1_Inits+0x30>)
 8000230:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <I2C1_Inits+0x2c>)
 8000234:	2201      	movs	r2, #1
 8000236:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <I2C1_Inits+0x2c>)
 800023a:	2268      	movs	r2, #104	; 0x68
 800023c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <I2C1_Inits+0x2c>)
 8000240:	2200      	movs	r2, #0
 8000242:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <I2C1_Inits+0x2c>)
 8000246:	4a05      	ldr	r2, [pc, #20]	; (800025c <I2C1_Inits+0x34>)
 8000248:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800024a:	4802      	ldr	r0, [pc, #8]	; (8000254 <I2C1_Inits+0x2c>)
 800024c:	f000 fc5e 	bl	8000b0c <I2C_Init>

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	200001d8 	.word	0x200001d8
 8000258:	40005400 	.word	0x40005400
 800025c:	000186a0 	.word	0x000186a0

08000260 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <GPIO_ButtonInit+0x2c>)
 8000268:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800026a:	2304      	movs	r3, #4
 800026c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800026e:	2300      	movs	r3, #0
 8000270:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000272:	2302      	movs	r3, #2
 8000274:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f97b 	bl	8000578 <GPIO_Init>

}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40020800 	.word	0x40020800

08000290 <main>:

int main(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	data_len = strlen((char*)Tx_buf);
 8000294:	4810      	ldr	r0, [pc, #64]	; (80002d8 <main+0x48>)
 8000296:	f7ff ff9d 	bl	80001d4 <strlen>
 800029a:	4602      	mov	r2, r0
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <main+0x4c>)
 800029e:	601a      	str	r2, [r3, #0]

	GPIO_ButtonInit();
 80002a0:	f7ff ffde 	bl	8000260 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002a4:	f7ff ff9e 	bl	80001e4 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002a8:	f7ff ffbe 	bl	8000228 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <main+0x50>)
 80002b0:	f000 fc10 	bl	8000ad4 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002b4:	2101      	movs	r1, #1
 80002b6:	480a      	ldr	r0, [pc, #40]	; (80002e0 <main+0x50>)
 80002b8:	f000 fb6a 	bl	8000990 <I2C_ManageAcking>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002bc:	2101      	movs	r1, #1
 80002be:	2020      	movs	r0, #32
 80002c0:	f000 feee 	bl	80010a0 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	201f      	movs	r0, #31
 80002c8:	f000 feea 	bl	80010a0 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002cc:	2101      	movs	r1, #1
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <main+0x50>)
 80002d0:	f000 fd4b 	bl	8000d6a <I2C_SlaveEnableDisableCallbackEvents>


	while(1);
 80002d4:	e7fe      	b.n	80002d4 <main+0x44>
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	200001cc 	.word	0x200001cc
 80002e0:	40005400 	.word	0x40005400

080002e4 <I2C_ApplicationEventCallback>:

}


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]

	static uint32_t cnt = 0;
	static uint32_t w_ptr = 0;

	if(AppEv == I2C_ERROR_AF){
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b05      	cmp	r3, #5
 80002f4:	d116      	bne.n	8000324 <I2C_ApplicationEventCallback+0x40>
		//This will happen during slave transmitting data to master.
		//slave should understand master needs no more data
		//slave concludes end of Tx

		//if the current active code is 0x52 then dont invalidate
		if(! (CommandCode == 0x52))
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b52      	cmp	r3, #82	; 0x52
 80002fc:	d002      	beq.n	8000304 <I2C_ApplicationEventCallback+0x20>
			CommandCode = 0XFF;
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 8000300:	22ff      	movs	r2, #255	; 0xff
 8000302:	701a      	strb	r2, [r3, #0]

		//reset the cnt variable because its end of transmission
		cnt = 0;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <I2C_ApplicationEventCallback+0xc4>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]

		//Slave concludes it sent all the bytes when w_ptr reaches data_len
		if(w_ptr >= (data_len)){
 800030a:	4b28      	ldr	r3, [pc, #160]	; (80003ac <I2C_ApplicationEventCallback+0xc8>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <I2C_ApplicationEventCallback+0xcc>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	429a      	cmp	r2, r3
 8000314:	d342      	bcc.n	800039c <I2C_ApplicationEventCallback+0xb8>
			w_ptr=0;
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <I2C_ApplicationEventCallback+0xc8>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
			CommandCode = 0xff;
 800031c:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 800031e:	22ff      	movs	r2, #255	; 0xff
 8000320:	701a      	strb	r2, [r3, #0]
	} else if (AppEv == I2C_EV_DATA_RCV){
		//Master has sent command code, read it
		 CommandCode = I2C_SlaveReceiveData(I2C1);

	}
}
 8000322:	e03b      	b.n	800039c <I2C_ApplicationEventCallback+0xb8>
	} else if (AppEv == I2C_EV_STOP){
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d103      	bne.n	8000332 <I2C_ApplicationEventCallback+0x4e>
		cnt = 0;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <I2C_ApplicationEventCallback+0xc4>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	e034      	b.n	800039c <I2C_ApplicationEventCallback+0xb8>
	} else if (AppEv == I2C_EV_DATA_REQ){
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	2b08      	cmp	r3, #8
 8000336:	d127      	bne.n	8000388 <I2C_ApplicationEventCallback+0xa4>
		if(CommandCode == 0x51){
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b51      	cmp	r3, #81	; 0x51
 800033e:	d113      	bne.n	8000368 <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(I2C1,((data_len >> ((cnt%4) * 8)) & 0xFF));
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <I2C_ApplicationEventCallback+0xcc>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <I2C_ApplicationEventCallback+0xc4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0303 	and.w	r3, r3, #3
 800034c:	00db      	lsls	r3, r3, #3
 800034e:	fa22 f303 	lsr.w	r3, r2, r3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	4619      	mov	r1, r3
 8000356:	4817      	ldr	r0, [pc, #92]	; (80003b4 <I2C_ApplicationEventCallback+0xd0>)
 8000358:	f000 fceb 	bl	8000d32 <I2C_SlaveSendData>
		    cnt++;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <I2C_ApplicationEventCallback+0xc4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <I2C_ApplicationEventCallback+0xc4>)
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	e019      	b.n	800039c <I2C_ApplicationEventCallback+0xb8>
		} else if (CommandCode == 0x52){
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b52      	cmp	r3, #82	; 0x52
 800036e:	d115      	bne.n	800039c <I2C_ApplicationEventCallback+0xb8>
			I2C_SlaveSendData(I2C1,Tx_buf[w_ptr++]);
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <I2C_ApplicationEventCallback+0xc8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1c5a      	adds	r2, r3, #1
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <I2C_ApplicationEventCallback+0xc8>)
 8000378:	600a      	str	r2, [r1, #0]
 800037a:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <I2C_ApplicationEventCallback+0xd4>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <I2C_ApplicationEventCallback+0xd0>)
 8000382:	f000 fcd6 	bl	8000d32 <I2C_SlaveSendData>
}
 8000386:	e009      	b.n	800039c <I2C_ApplicationEventCallback+0xb8>
	} else if (AppEv == I2C_EV_DATA_RCV){
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b09      	cmp	r3, #9
 800038c:	d106      	bne.n	800039c <I2C_ApplicationEventCallback+0xb8>
		 CommandCode = I2C_SlaveReceiveData(I2C1);
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <I2C_ApplicationEventCallback+0xd0>)
 8000390:	f000 fcde 	bl	8000d50 <I2C_SlaveReceiveData>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <I2C_ApplicationEventCallback+0xc0>)
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000200 	.word	0x20000200
 80003a8:	200001d0 	.word	0x200001d0
 80003ac:	200001d4 	.word	0x200001d4
 80003b0:	200001cc 	.word	0x200001cc
 80003b4:	40005400 	.word	0x40005400
 80003b8:	20000000 	.word	0x20000000

080003bc <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <I2C1_EV_IRQHandler+0x10>)
 80003c2:	f000 fd06 	bl	8000dd2 <I2C_EV_IRQHandling>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	200001d8 	.word	0x200001d8

080003d0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <I2C1_ER_IRQHandler+0x10>)
 80003d6:	f000 fdda 	bl	8000f8e <I2C_ER_IRQHandling>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200001d8 	.word	0x200001d8

080003e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490e      	ldr	r1, [pc, #56]	; (8000424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0b      	ldr	r4, [pc, #44]	; (8000430 <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800040e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000412:	f000 ff99 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000416:	f7ff ff3b 	bl	8000290 <main>

0800041a <LoopForever>:

LoopForever:
    b LoopForever
 800041a:	e7fe      	b.n	800041a <LoopForever>
  ldr   r0, =_estack
 800041c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000424:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8000428:	080013b0 	.word	0x080013b0
  ldr r2, =_sbss
 800042c:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000430:	20000224 	.word	0x20000224

08000434 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>
	...

08000438 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d141      	bne.n	80004ce <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a43      	ldr	r2, [pc, #268]	; (800055c <GPIO_PeriClockControl+0x124>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000452:	4b43      	ldr	r3, [pc, #268]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a42      	ldr	r2, [pc, #264]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800045e:	e077      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a40      	ldr	r2, [pc, #256]	; (8000564 <GPIO_PeriClockControl+0x12c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000468:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a3c      	ldr	r2, [pc, #240]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e06c      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a3b      	ldr	r2, [pc, #236]	; (8000568 <GPIO_PeriClockControl+0x130>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800047e:	4b38      	ldr	r3, [pc, #224]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a37      	ldr	r2, [pc, #220]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e061      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a37      	ldr	r2, [pc, #220]	; (800056c <GPIO_PeriClockControl+0x134>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000494:	4b32      	ldr	r3, [pc, #200]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a31      	ldr	r2, [pc, #196]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	e056      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a32      	ldr	r2, [pc, #200]	; (8000570 <GPIO_PeriClockControl+0x138>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004aa:	4b2d      	ldr	r3, [pc, #180]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ae:	4a2c      	ldr	r2, [pc, #176]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b6:	e04b      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2e      	ldr	r2, [pc, #184]	; (8000574 <GPIO_PeriClockControl+0x13c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d147      	bne.n	8000550 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80004c0:	4b27      	ldr	r3, [pc, #156]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4a26      	ldr	r2, [pc, #152]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004cc:	e040      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a22      	ldr	r2, [pc, #136]	; (800055c <GPIO_PeriClockControl+0x124>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a21      	ldr	r2, [pc, #132]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004dc:	f023 0301 	bic.w	r3, r3, #1
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e2:	e035      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_PeriClockControl+0x12c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <GPIO_PeriClockControl+0x128>)
 80004f2:	f023 0302 	bic.w	r3, r3, #2
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f8:	e02a      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <GPIO_PeriClockControl+0x130>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a16      	ldr	r2, [pc, #88]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000508:	f023 0304 	bic.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	e01f      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <GPIO_PeriClockControl+0x134>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800051e:	f023 0308 	bic.w	r3, r3, #8
 8000522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000524:	e014      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <GPIO_PeriClockControl+0x138>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000534:	f023 0310 	bic.w	r3, r3, #16
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053a:	e009      	b.n	8000550 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <GPIO_PeriClockControl+0x13c>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d105      	bne.n	8000550 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <GPIO_PeriClockControl+0x128>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <GPIO_PeriClockControl+0x128>)
 800054a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40020000 	.word	0x40020000
 8000560:	40023800 	.word	0x40023800
 8000564:	40020400 	.word	0x40020400
 8000568:	40020800 	.word	0x40020800
 800056c:	40020c00 	.word	0x40020c00
 8000570:	40021000 	.word	0x40021000
 8000574:	40021c00 	.word	0x40021c00

08000578 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff54 	bl	8000438 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d822      	bhi.n	80005de <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
		temp = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	e0ca      	b.n	8000774 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d117      	bne.n	8000616 <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <GPIO_Init+0x17c>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a3f      	ldr	r2, [pc, #252]	; (80006f4 <GPIO_Init+0x17c>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <GPIO_Init+0x17c>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a39      	ldr	r2, [pc, #228]	; (80006f4 <GPIO_Init+0x17c>)
 8000610:	400b      	ands	r3, r1
 8000612:	6093      	str	r3, [r2, #8]
 8000614:	e035      	b.n	8000682 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795b      	ldrb	r3, [r3, #5]
 800061a:	2b05      	cmp	r3, #5
 800061c:	d117      	bne.n	800064e <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <GPIO_Init+0x17c>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a31      	ldr	r2, [pc, #196]	; (80006f4 <GPIO_Init+0x17c>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b2f      	ldr	r3, [pc, #188]	; (80006f4 <GPIO_Init+0x17c>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a2b      	ldr	r2, [pc, #172]	; (80006f4 <GPIO_Init+0x17c>)
 8000648:	400b      	ands	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
 800064c:	e019      	b.n	8000682 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d115      	bne.n	8000682 <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <GPIO_Init+0x17c>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a23      	ldr	r2, [pc, #140]	; (80006f4 <GPIO_Init+0x17c>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <GPIO_Init+0x17c>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	4611      	mov	r1, r2
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <GPIO_Init+0x17c>)
 800067e:	430b      	orrs	r3, r1
 8000680:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <GPIO_Init+0x180>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <GPIO_Init+0x180>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <GPIO_Init+0x184>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d034      	beq.n	8000714 <GPIO_Init+0x19c>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a14      	ldr	r2, [pc, #80]	; (8000700 <GPIO_Init+0x188>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d01d      	beq.n	80006f0 <GPIO_Init+0x178>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <GPIO_Init+0x18c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d016      	beq.n	80006ec <GPIO_Init+0x174>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <GPIO_Init+0x190>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d00f      	beq.n	80006e8 <GPIO_Init+0x170>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <GPIO_Init+0x194>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d008      	beq.n	80006e4 <GPIO_Init+0x16c>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <GPIO_Init+0x198>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d101      	bne.n	80006e0 <GPIO_Init+0x168>
 80006dc:	2307      	movs	r3, #7
 80006de:	e01a      	b.n	8000716 <GPIO_Init+0x19e>
 80006e0:	2300      	movs	r3, #0
 80006e2:	e018      	b.n	8000716 <GPIO_Init+0x19e>
 80006e4:	2304      	movs	r3, #4
 80006e6:	e016      	b.n	8000716 <GPIO_Init+0x19e>
 80006e8:	2303      	movs	r3, #3
 80006ea:	e014      	b.n	8000716 <GPIO_Init+0x19e>
 80006ec:	2302      	movs	r3, #2
 80006ee:	e012      	b.n	8000716 <GPIO_Init+0x19e>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e010      	b.n	8000716 <GPIO_Init+0x19e>
 80006f4:	40013c00 	.word	0x40013c00
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400
 8000704:	40020800 	.word	0x40020800
 8000708:	40020c00 	.word	0x40020c00
 800070c:	40021000 	.word	0x40021000
 8000710:	40021c00 	.word	0x40021c00
 8000714:	2300      	movs	r3, #0
 8000716:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 8000718:	4a66      	ldr	r2, [pc, #408]	; (80008b4 <GPIO_Init+0x33c>)
 800071a:	7cfb      	ldrb	r3, [r7, #19]
 800071c:	3302      	adds	r3, #2
 800071e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000722:	7cbb      	ldrb	r3, [r7, #18]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	210f      	movs	r1, #15
 8000728:	fa01 f303 	lsl.w	r3, r1, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	4960      	ldr	r1, [pc, #384]	; (80008b4 <GPIO_Init+0x33c>)
 8000732:	7cfb      	ldrb	r3, [r7, #19]
 8000734:	4002      	ands	r2, r0
 8000736:	3302      	adds	r3, #2
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 800073c:	4a5d      	ldr	r2, [pc, #372]	; (80008b4 <GPIO_Init+0x33c>)
 800073e:	7cfb      	ldrb	r3, [r7, #19]
 8000740:	3302      	adds	r3, #2
 8000742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000746:	7c79      	ldrb	r1, [r7, #17]
 8000748:	7cbb      	ldrb	r3, [r7, #18]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	4618      	mov	r0, r3
 8000752:	4958      	ldr	r1, [pc, #352]	; (80008b4 <GPIO_Init+0x33c>)
 8000754:	7cfb      	ldrb	r3, [r7, #19]
 8000756:	4302      	orrs	r2, r0
 8000758:	3302      	adds	r3, #2
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800075e:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <GPIO_Init+0x340>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a52      	ldr	r2, [pc, #328]	; (80008b8 <GPIO_Init+0x340>)
 8000770:	430b      	orrs	r3, r1
 8000772:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	799b      	ldrb	r3, [r3, #6]
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2103      	movs	r1, #3
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6899      	ldr	r1, [r3, #8]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	79db      	ldrb	r3, [r3, #7]
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	2103      	movs	r1, #3
 80007dc:	fa01 f303 	lsl.w	r3, r1, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	400a      	ands	r2, r1
 80007ea:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68d9      	ldr	r1, [r3, #12]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a1b      	ldrb	r3, [r3, #8]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	4619      	mov	r1, r3
 800081c:	2301      	movs	r3, #1
 800081e:	408b      	lsls	r3, r1
 8000820:	43db      	mvns	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	400a      	ands	r2, r1
 800082a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6859      	ldr	r1, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	430a      	orrs	r2, r1
 800083a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d131      	bne.n	80008ac <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	08db      	lsrs	r3, r3, #3
 800084e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	f003 0307 	and.w	r3, r3, #7
 8000858:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	7c3a      	ldrb	r2, [r7, #16]
 8000860:	3208      	adds	r2, #8
 8000862:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	220f      	movs	r2, #15
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	7c3a      	ldrb	r2, [r7, #16]
 800087a:	4001      	ands	r1, r0
 800087c:	3208      	adds	r2, #8
 800087e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	7c3a      	ldrb	r2, [r7, #16]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7a5b      	ldrb	r3, [r3, #9]
 8000892:	461a      	mov	r2, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	4618      	mov	r0, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	7c3a      	ldrb	r2, [r7, #16]
 80008a4:	4301      	orrs	r1, r0
 80008a6:	3208      	adds	r2, #8
 80008a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40013800 	.word	0x40013800
 80008b8:	40013c00 	.word	0x40013c00

080008bc <GPIO_ToggleOutputPin>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	405a      	eors	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	615a      	str	r2, [r3, #20]
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <RCC_GetPCLK1Value>:
uint32_t RCC_GetPLLOutputClock();

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_Prescaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <RCC_GetPCLK1Value+0x94>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80008fc:	7a7b      	ldrb	r3, [r7, #9]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <RCC_GetPCLK1Value+0x98>)
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	e004      	b.n	8000912 <RCC_GetPCLK1Value+0x2a>

	} else if(clksrc == 1){
 8000908:	7a7b      	ldrb	r3, [r7, #9]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <RCC_GetPCLK1Value+0x9c>)
 8000910:	60fb      	str	r3, [r7, #12]
	} else if(clksrc == 2){
		//SystemClk = RCC_GetPLLOutputClock();
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <RCC_GetPCLK1Value+0x94>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000920:	7a3b      	ldrb	r3, [r7, #8]
 8000922:	2b07      	cmp	r3, #7
 8000924:	d802      	bhi.n	800092c <RCC_GetPCLK1Value+0x44>
		ahbp = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	72fb      	strb	r3, [r7, #11]
 800092a:	e005      	b.n	8000938 <RCC_GetPCLK1Value+0x50>
	} else{
		ahbp = AHB_Prescaler[temp - 8];
 800092c:	7a3b      	ldrb	r3, [r7, #8]
 800092e:	3b08      	subs	r3, #8
 8000930:	4a15      	ldr	r2, [pc, #84]	; (8000988 <RCC_GetPCLK1Value+0xa0>)
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <RCC_GetPCLK1Value+0x94>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	0a9b      	lsrs	r3, r3, #10
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d802      	bhi.n	8000952 <RCC_GetPCLK1Value+0x6a>
		apb1 = 1;
 800094c:	2301      	movs	r3, #1
 800094e:	72bb      	strb	r3, [r7, #10]
 8000950:	e005      	b.n	800095e <RCC_GetPCLK1Value+0x76>
	} else{
		apb1 = APB1_Prescaler[temp - 4];
 8000952:	7a3b      	ldrb	r3, [r7, #8]
 8000954:	3b04      	subs	r3, #4
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <RCC_GetPCLK1Value+0xa4>)
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp)/apb1;
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	fbb2 f2f3 	udiv	r2, r2, r3
 8000966:	7abb      	ldrb	r3, [r7, #10]
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40023800 	.word	0x40023800
 8000980:	00f42400 	.word	0x00f42400
 8000984:	007a1200 	.word	0x007a1200
 8000988:	20000198 	.word	0x20000198
 800098c:	200001a8 	.word	0x200001a8

08000990 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE){
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d106      	bne.n	80009b0 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	601a      	str	r2, [r3, #0]
	} else{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80009ae:	e005      	b.n	80009bc <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <I2C_GenerateStopCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <teste>:

void teste(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOC;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <teste+0x38>)
 80009f0:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80009f2:	2305      	movs	r3, #5
 80009f4:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009f6:	2301      	movs	r3, #1
 80009f8:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009fa:	2302      	movs	r3, #2
 80009fc:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009fe:	2300      	movs	r3, #0
 8000a00:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a02:	2300      	movs	r3, #0
 8000a04:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioLed);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fdb5 	bl	8000578 <GPIO_Init>

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_5);
 8000a0e:	2105      	movs	r1, #5
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <teste+0x38>)
 8000a12:	f7ff ff53 	bl	80008bc <GPIO_ToggleOutputPin>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020800 	.word	0x40020800

08000a24 <I2C_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *********************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d120      	bne.n	8000a78 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <I2C_PeriClockControl+0xa0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000a4a:	e035      	b.n	8000ab8 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <I2C_PeriClockControl+0xa8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a60:	e02a      	b.n	8000ab8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <I2C_PeriClockControl+0xac>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d126      	bne.n	8000ab8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a76:	e01f      	b.n	8000ab8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <I2C_PeriClockControl+0xa0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d106      	bne.n	8000a8e <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a8c:	e014      	b.n	8000ab8 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <I2C_PeriClockControl+0xa8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d106      	bne.n	8000aa4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000a9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aa2:	e009      	b.n	8000ab8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <I2C_PeriClockControl+0xac>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d105      	bne.n	8000ab8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <I2C_PeriClockControl+0xa4>)
 8000ab2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40005800 	.word	0x40005800
 8000ad0:	40005c00 	.word	0x40005c00

08000ad4 <I2C_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f043 0201 	orr.w	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000af2:	e005      	b.n	8000b00 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 0201 	bic.w	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <I2C_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff80 	bl	8000a24 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7a5b      	ldrb	r3, [r3, #9]
 8000b28:	029b      	lsls	r3, r3, #10
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000b46:	f7ff fecf 	bl	80008e8 <RCC_GetPCLK1Value>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <I2C_Init+0x178>)
 8000b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000b52:	0c9b      	lsrs	r3, r3, #18
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6859      	ldr	r1, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7a1b      	ldrb	r3, [r3, #8]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);													/* Should always be kept at 1 by software */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b86:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6899      	ldr	r1, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <I2C_Init+0x17c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d80f      	bhi.n	8000bca <I2C_Init+0xbe>
		 * T_high + T_low = T_scl
		 * T_scl = 2 * CCR * T_pclk1
		 * CCR = T_scl / (2 * T_pclk1) [time domain]
		 * CCR = F_pclk1 / (2 * F_scl) [frequency domain] */

		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000baa:	f7ff fe9d 	bl	80008e8 <RCC_GetPCLK1Value>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);										/* Only 12 bits */
 8000bbc:	897b      	ldrh	r3, [r7, #10]
 8000bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e02d      	b.n	8000c26 <I2C_Init+0x11a>

	} else{
		//mode is fast mode

		tempreg |= (1 << 15);												/* F/S: I2C master mode selection (FM) */
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);			/* DUTY: Fm mode duty cycle */
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7a9b      	ldrb	r3, [r3, #10]
 8000bd6:	039b      	lsls	r3, r3, #14
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7a9b      	ldrb	r3, [r3, #10]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10b      	bne.n	8000c00 <I2C_Init+0xf4>
			 * T_high + T_low = T_scl
			 * T_scl = 3 * CCR * T_pclk1
			 * CCR = T_scl / (3 * T_pclk1) [time domain]
			 * CCR = F_pclk1 / (3 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000be8:	f7ff fe7e 	bl	80008e8 <RCC_GetPCLK1Value>
 8000bec:	4601      	mov	r1, r0
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bfc:	817b      	strh	r3, [r7, #10]
 8000bfe:	e00c      	b.n	8000c1a <I2C_Init+0x10e>
			* T_high + T_low = T_scl
			* T_scl = 25 * CCR * T_pclk1
			* CCR = T_scl / (25 * T_pclk1) [time domain]
			* CCR = F_pclk1 / (25 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c00:	f7ff fe72 	bl	80008e8 <RCC_GetPCLK1Value>
 8000c04:	4601      	mov	r1, r0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009a      	lsls	r2, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000c1a:	897b      	ldrh	r3, [r7, #10]
 8000c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69d9      	ldr	r1, [r3, #28]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <I2C_Init+0x17c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d809      	bhi.n	8000c54 <I2C_Init+0x148>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000c40:	f7ff fe52 	bl	80008e8 <RCC_GetPCLK1Value>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <I2C_Init+0x178>)
 8000c48:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e00d      	b.n	8000c70 <I2C_Init+0x164>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c54:	f7ff fe48 	bl	80008e8 <RCC_GetPCLK1Value>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c5e:	fb03 f302 	mul.w	r3, r3, r2
 8000c62:	0a5b      	lsrs	r3, r3, #9
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <I2C_Init+0x180>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	09db      	lsrs	r3, r3, #7
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c7a:	621a      	str	r2, [r3, #32]
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	431bde83 	.word	0x431bde83
 8000c88:	000186a0 	.word	0x000186a0
 8000c8c:	00044b83 	.word	0x00044b83

08000c90 <I2C_CloseReceiveData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca6:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cb6:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a5b      	ldrb	r3, [r3, #9]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d105      	bne.n	8000ce4 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fe56 	bl	8000990 <I2C_ManageAcking>
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <I2C_CloseSendData>:
 * @return		- None
 *
 * @Note		- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle){
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d02:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d12:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <I2C_SlaveSendData>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_SlaveSendData(I2C_RegDef_t *pI2C, uint8_t data){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <I2C_SlaveReceiveData>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *****************************************************************/
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    return (uint8_t) pI2C->DR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	b2db      	uxtb	r3, r3
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <I2C_SlaveEnableDisableCallbackEvents>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	460b      	mov	r3, r1
 8000d74:	70fb      	strb	r3, [r7, #3]

	 if(EnorDi == ENABLE){
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d112      	bne.n	8000da2 <I2C_SlaveEnableDisableCallbackEvents+0x38>
			pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	605a      	str	r2, [r3, #4]
	 } else{
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	 }
}
 8000da0:	e011      	b.n	8000dc6 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	605a      	str	r2, [r3, #4]
			pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <I2C_EV_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]

	//Interrupt handling for both master and slave mode of a device

	teste();
 8000dda:	f7ff fe05 	bl	80009e8 <teste>

	uint32_t temp1, temp2, temp3;
	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de8:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	613b      	str	r3, [r7, #16]

	// For setting it, see Table 71 on reference manual

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);		//Check the SB (start bit) flag
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
	//1. Handle for interrupt generated by SB event
	// 	 Note : SB flag is only applicable in Master mode

	if(temp1 && temp3){
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d01b      	beq.n	8000e40 <I2C_EV_IRQHandling+0x6e>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d018      	beq.n	8000e40 <I2C_EV_IRQHandling+0x6e>
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because for slave SB is always zero
		//In this block lets executed the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7f1b      	ldrb	r3, [r3, #28]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d108      	bne.n	8000e28 <I2C_EV_IRQHandling+0x56>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7f5b      	ldrb	r3, [r3, #29]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4610      	mov	r0, r2
 8000e22:	f000 f9c3 	bl	80011ac <I2C_ExecuteAddressPhaseWrite>
 8000e26:	e00b      	b.n	8000e40 <I2C_EV_IRQHandling+0x6e>
		} else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7f1b      	ldrb	r3, [r3, #28]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d107      	bne.n	8000e40 <I2C_EV_IRQHandling+0x6e>
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7f5b      	ldrb	r3, [r3, #29]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f000 f9cc 	bl	80011d8 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
	//2. Handle For interrupt generated by ADDR event
	//Note : When master mode : Address is sent
	//		 When Slave mode  : Address matched with own address
	if(temp1 && temp3){
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <I2C_EV_IRQHandling+0x8c>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <I2C_EV_IRQHandling+0x8c>
		// interrupt is generated because of ADDR event
		I2C_ClearADDRFlag(pI2CHandle);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f9d3 	bl	8001204 <I2C_ClearADDRFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	60fb      	str	r3, [r7, #12]
	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3){
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d022      	beq.n	8000eb6 <I2C_EV_IRQHandling+0xe4>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d01f      	beq.n	8000eb6 <I2C_EV_IRQHandling+0xe4>
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7f1b      	ldrb	r3, [r3, #28]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d11b      	bne.n	8000eb6 <I2C_EV_IRQHandling+0xe4>
			//make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d014      	beq.n	8000eb6 <I2C_EV_IRQHandling+0xe4>
				//BTF, TXE = 1
				if(pI2CHandle->TxLen == 0){		// Make sure that Tx Lenght is equal to zero
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d110      	bne.n	8000eb6 <I2C_EV_IRQHandling+0xe4>
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d104      	bne.n	8000ea8 <I2C_EV_IRQHandling+0xd6>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fd90 	bl	80009c8 <I2C_GenerateStopCondition>
					}

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff1f 	bl	8000cec <I2C_CloseSendData>

					//3. notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fa17 	bl	80002e4 <I2C_ApplicationEventCallback>
			; //nothing to do here
		}

	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	60fb      	str	r3, [r7, #12]
	//4. Handle For interrupt generated by STOPF event
	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	// The below code block will not be executed by the master since STOPF will not set in master mode
	if(temp1 && temp3){
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <I2C_EV_IRQHandling+0x110>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <I2C_EV_IRQHandling+0x110>
		//STOF flag is set
		//Clear the STOPF ( i.e 1) read SR1 (already done above) 2) Write to CR1

		pI2CHandle->pI2Cx->CR1 |= 0x0000;	// Do not modify the register in write operation
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected or generated by the master
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000eda:	2102      	movs	r1, #2
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fa01 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eec:	60fb      	str	r3, [r7, #12]
	//5. Handle For interrupt generated by TXE event
	if(temp1 && temp2 && temp3){
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01f      	beq.n	8000f34 <I2C_EV_IRQHandling+0x162>
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d01c      	beq.n	8000f34 <I2C_EV_IRQHandling+0x162>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d019      	beq.n	8000f34 <I2C_EV_IRQHandling+0x162>
		//TXE flag is set
		//Check for device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <I2C_EV_IRQHandling+0x14c>
			//We have to do the data transmission
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX){
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7f1b      	ldrb	r3, [r3, #28]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d10e      	bne.n	8000f34 <I2C_EV_IRQHandling+0x162>
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f9ab 	bl	8001272 <I2C_MasterHandleTXEInterrupt>
 8000f1c:	e00a      	b.n	8000f34 <I2C_EV_IRQHandling+0x162>
			}
		} else{
			//slave
			//make sure that the slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <I2C_EV_IRQHandling+0x162>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff f9d8 	bl	80002e4 <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3e:	60fb      	str	r3, [r7, #12]
	//6. Handle For interrupt generated by RXNE event
	if(temp1 && temp2 && temp3){
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d01f      	beq.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d01c      	beq.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d019      	beq.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
		//RXNE flag is set
		//check device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <I2C_EV_IRQHandling+0x19e>
			//The device is master
			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7f1b      	ldrb	r3, [r3, #28]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10e      	bne.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f9a0 	bl	80012ae <I2C_MasterHandleRXNEInterrupt>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000f6e:	e00a      	b.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <I2C_EV_IRQHandling+0x1b4>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000f7e:	2109      	movs	r1, #9
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff f9af 	bl	80002e4 <I2C_ApplicationEventCallback>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <I2C_ER_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle){
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]

	teste();
 8000f96:	f7ff fd27 	bl	80009e8 <teste>

	uint32_t temp1, temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & (1 << I2C_CR2_ITERREN);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_BERR);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2){
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00e      	beq.n	8000fd6 <I2C_ER_IRQHandling+0x48>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <I2C_ER_IRQHandling+0x48>
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fcc:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000fce:	2103      	movs	r1, #3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff f987 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_ARLO);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe0:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00e      	beq.n	8001006 <I2C_ER_IRQHandling+0x78>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <I2C_ER_IRQHandling+0x78>
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ffc:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8000ffe:	2104      	movs	r1, #4
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff f96f 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_AF);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001010:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00e      	beq.n	8001036 <I2C_ER_IRQHandling+0xa8>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <I2C_ER_IRQHandling+0xa8>
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102c:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 800102e:	2105      	movs	r1, #5
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff f957 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_OVR);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001040:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00e      	beq.n	8001066 <I2C_ER_IRQHandling+0xd8>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <I2C_ER_IRQHandling+0xd8>
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105c:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 800105e:	2106      	movs	r1, #6
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff f93f 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_TIMEOUT);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2){
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <I2C_ER_IRQHandling+0x108>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <I2C_ER_IRQHandling+0x108>
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800108c:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 800108e:	2107      	movs	r1, #7
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f927 	bl	80002e4 <I2C_ApplicationEventCallback>
	}
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <I2C_IRQInterruptConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d133      	bne.n	800111e <I2C_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b1f      	cmp	r3, #31
 80010ba:	d80a      	bhi.n	80010d2 <I2C_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <I2C_IRQInterruptConfig+0xf4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4a32      	ldr	r2, [pc, #200]	; (8001194 <I2C_IRQInterruptConfig+0xf4>)
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 80010d0:	e059      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b1f      	cmp	r3, #31
 80010d6:	d90f      	bls.n	80010f8 <I2C_IRQInterruptConfig+0x58>
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b3f      	cmp	r3, #63	; 0x3f
 80010dc:	d80c      	bhi.n	80010f8 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <I2C_IRQInterruptConfig+0xf8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4611      	mov	r1, r2
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <I2C_IRQInterruptConfig+0xf8>)
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e046      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b3f      	cmp	r3, #63	; 0x3f
 80010fc:	d943      	bls.n	8001186 <I2C_IRQInterruptConfig+0xe6>
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b5f      	cmp	r3, #95	; 0x5f
 8001102:	d840      	bhi.n	8001186 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <I2C_IRQInterruptConfig+0xfc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4611      	mov	r1, r2
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <I2C_IRQInterruptConfig+0xfc>)
 8001118:	430b      	orrs	r3, r1
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	e033      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b1f      	cmp	r3, #31
 8001122:	d80a      	bhi.n	800113a <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <I2C_IRQInterruptConfig+0x100>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	4611      	mov	r1, r2
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <I2C_IRQInterruptConfig+0x100>)
 8001134:	430b      	orrs	r3, r1
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	e025      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b1f      	cmp	r3, #31
 800113e:	d90f      	bls.n	8001160 <I2C_IRQInterruptConfig+0xc0>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b3f      	cmp	r3, #63	; 0x3f
 8001144:	d80c      	bhi.n	8001160 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <I2C_IRQInterruptConfig+0x104>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	f002 021f 	and.w	r2, r2, #31
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	4611      	mov	r1, r2
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <I2C_IRQInterruptConfig+0x104>)
 800115a:	430b      	orrs	r3, r1
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e012      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b3f      	cmp	r3, #63	; 0x3f
 8001164:	d90f      	bls.n	8001186 <I2C_IRQInterruptConfig+0xe6>
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b5f      	cmp	r3, #95	; 0x5f
 800116a:	d80c      	bhi.n	8001186 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <I2C_IRQInterruptConfig+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	4611      	mov	r1, r2
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <I2C_IRQInterruptConfig+0x108>)
 8001180:	430b      	orrs	r3, r1
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	e7ff      	b.n	8001186 <I2C_IRQInterruptConfig+0xe6>
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000e104 	.word	0xe000e104
 800119c:	e000e108 	.word	0xe000e108
 80011a0:	e000e180 	.word	0xe000e180
 80011a4:	e000e184 	.word	0xe000e184
 80011a8:	e000e188 	.word	0xe000e188

080011ac <I2C_ExecuteAddressPhaseWrite>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;		// Makes space for read/write bit
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 				// SlaveAddr is Slave address + r/nw bit=0 (write)
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	611a      	str	r2, [r3, #16]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <I2C_ExecuteAddressPhaseRead>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 						//SlaveAddr is Slave address + r/nw bit=1
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80011f2:	78fa      	ldrb	r2, [r7, #3]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	611a      	str	r2, [r3, #16]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <I2C_ClearADDRFlag>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01f      	beq.n	800125a <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7f1b      	ldrb	r3, [r3, #28]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d112      	bne.n	8001248 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize == 1){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d11f      	bne.n	800126a <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbad 	bl	8000990 <I2C_ManageAcking>

				//clear the ADDR flag (read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag (read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001246:	e010      	b.n	800126a <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	60fb      	str	r3, [r7, #12]
}
 8001258:	e007      	b.n	800126a <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	60fb      	str	r3, [r7, #12]
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <I2C_MasterHandleTXEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle){
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

	if(pI2CHandle->TxLen > 0){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00f      	beq.n	80012a2 <I2C_MasterHandleTXEInterrupt+0x30>
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60da      	str	r2, [r3, #12]

	}
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <I2C_MasterHandleRXNEInterrupt>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle){
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxSize == 1){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10b      	bne.n	80012d6 <I2C_MasterHandleRXNEInterrupt+0x28>
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1){
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d91a      	bls.n	8001314 <I2C_MasterHandleRXNEInterrupt+0x66>

		if(pI2CHandle->RxLen == 2){
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d105      	bne.n	80012f2 <I2C_MasterHandleRXNEInterrupt+0x44>
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb4f 	bl	8000990 <I2C_ManageAcking>
		}
		//read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	1e5a      	subs	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d110      	bne.n	800133e <I2C_MasterHandleRXNEInterrupt+0x90>
		//close the I2C data reception and notify the application

		//1. Generate the stop condition
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <I2C_MasterHandleRXNEInterrupt+0x82>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb4c 	bl	80009c8 <I2C_GenerateStopCondition>

		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fcad 	bl	8000c90 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7fe ffd3 	bl	80002e4 <I2C_ApplicationEventCallback>
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	4e0d      	ldr	r6, [pc, #52]	; (8001380 <__libc_init_array+0x38>)
 800134c:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 800134e:	1ba4      	subs	r4, r4, r6
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	2500      	movs	r5, #0
 8001354:	42a5      	cmp	r5, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	4e0b      	ldr	r6, [pc, #44]	; (8001388 <__libc_init_array+0x40>)
 800135a:	4c0c      	ldr	r4, [pc, #48]	; (800138c <__libc_init_array+0x44>)
 800135c:	f000 f818 	bl	8001390 <_init>
 8001360:	1ba4      	subs	r4, r4, r6
 8001362:	10a4      	asrs	r4, r4, #2
 8001364:	2500      	movs	r5, #0
 8001366:	42a5      	cmp	r5, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001370:	4798      	blx	r3
 8001372:	3501      	adds	r5, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800137a:	4798      	blx	r3
 800137c:	3501      	adds	r5, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080013a8 	.word	0x080013a8
 8001384:	080013a8 	.word	0x080013a8
 8001388:	080013a8 	.word	0x080013a8
 800138c:	080013ac 	.word	0x080013ac

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
