
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001030  08001030  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001030  08001030  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001030  08001030  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001030  08001030  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001038  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  0800103c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  0800103c  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c37  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000510  00000000  00000000  00021c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00022180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00022330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000239b  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013e1  00000000  00000000  00024843  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000912e  00000000  00000000  00025c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ed52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000065c  00000000  00000000  0002edd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001018 	.word	0x08001018

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001018 	.word	0x08001018

080001d4 <SPI2_IRQHandler>:
SPI_Handle_t SPI2Handle;

uint8_t dummyWrite = 0xFF;
uint8_t dummyRead;

void SPI2_IRQHandler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Handle);
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <SPI2_IRQHandler+0x10>)
 80001da:	f000 fda3 	bl	8000d24 <SPI_IRQHandling>
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000024 	.word	0x20000024

080001e8 <SPI_ApplicationEventCallback>:


void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	} else if(AppEv == SPI_EVENT_RX_CMPLT){
		//printf("Rx is complete!\n");
	} else if(AppEv == SPI_EVENT_OVR_ERR){
		//printf("OVR Error triggered!\n");
	}
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <SPI2_GPIOInits+0x60>)
 8000208:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800020e:	2305      	movs	r3, #5
 8000210:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000212:	2300      	movs	r3, #0
 8000214:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	480f      	ldr	r0, [pc, #60]	; (8000260 <SPI2_GPIOInits+0x60>)
 8000222:	f000 f981 	bl	8000528 <GPIO_PeriClockControl>

	/* SCLK Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000226:	230d      	movs	r3, #13
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fa1b 	bl	8000668 <GPIO_Init>

	/* MOSI Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000232:	230f      	movs	r3, #15
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa15 	bl	8000668 <GPIO_Init>

	/* MISO Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023e:	230e      	movs	r3, #14
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fa0f 	bl	8000668 <GPIO_Init>

	/* NSS Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800024a:	230c      	movs	r3, #12
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fa09 	bl	8000668 <GPIO_Init>

}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:


void SPI2_Inits(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	SPI2Handle.pSPIx = SPI2;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <SPI2_Inits+0x48>)
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <SPI2_Inits+0x4c>)
 800026c:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <SPI2_Inits+0x48>)
 8000270:	2201      	movs	r2, #1
 8000272:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000274:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SPI2_Inits+0x48>)
 8000276:	2201      	movs	r2, #1
 8000278:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //2MHz
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <SPI2_Inits+0x48>)
 800027c:	2202      	movs	r2, #2
 800027e:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <SPI2_Inits+0x48>)
 8000282:	2200      	movs	r2, #0
 8000284:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <SPI2_Inits+0x48>)
 8000288:	2200      	movs	r2, #0
 800028a:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SPI2_Inits+0x48>)
 800028e:	2200      	movs	r2, #0
 8000290:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //HW Slave management enabled for NSS pin
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <SPI2_Inits+0x48>)
 8000294:	2200      	movs	r2, #0
 8000296:	729a      	strb	r2, [r3, #10]

	SPI_PeriClockControl(SPI2, ENABLE);
 8000298:	2101      	movs	r1, #1
 800029a:	4805      	ldr	r0, [pc, #20]	; (80002b0 <SPI2_Inits+0x4c>)
 800029c:	f000 fb98 	bl	80009d0 <SPI_PeriClockControl>

	SPI_Init(&SPI2Handle);
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <SPI2_Inits+0x48>)
 80002a2:	f000 fc05 	bl	8000ab0 <SPI_Init>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000024 	.word	0x20000024
 80002b0:	40003800 	.word	0x40003800

080002b4 <GPIO_ButtonInit>:


void GPIO_ButtonInit(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOC;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <GPIO_ButtonInit+0x34>)
 80002bc:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002be:	230d      	movs	r3, #13
 80002c0:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002c2:	2300      	movs	r3, #0
 80002c4:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c6:	2302      	movs	r3, #2
 80002c8:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ca:	2300      	movs	r3, #0
 80002cc:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <GPIO_ButtonInit+0x34>)
 80002d2:	f000 f929 	bl	8000528 <GPIO_PeriClockControl>

	GPIO_Init(&GpioBtn);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f9c5 	bl	8000668 <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40020800 	.word	0x40020800

080002ec <delay>:


void delay(void){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	e002      	b.n	80002fe <delay+0x12>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <delay+0x28>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d9f8      	bls.n	80002f8 <delay+0xc>
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0003d08f 	.word	0x0003d08f

08000318 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackByte){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]

	if(ackByte == 0xF5){
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2bf5      	cmp	r3, #245	; 0xf5
 8000326:	d101      	bne.n	800032c <SPI_VerifyResponse+0x14>
		return 1;
 8000328:	2301      	movs	r3, #1
 800032a:	e000      	b.n	800032e <SPI_VerifyResponse+0x16>
	}

	return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
	...

0800033c <main>:


int main(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
	/* Initialize button */
	GPIO_ButtonInit();
 8000342:	f7ff ffb7 	bl	80002b4 <GPIO_ButtonInit>

	/* Initialize GPIO pins to behave as SPI2 pins */
	SPI2_GPIOInits();
 8000346:	f7ff ff5b 	bl	8000200 <SPI2_GPIOInits>

	/* Initialize SPI2 peripheral parameters */
	SPI2_Inits();
 800034a:	f7ff ff8b 	bl	8000264 <SPI2_Inits>

	/* SPI2 IRQ configurations */
	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800034e:	2101      	movs	r1, #1
 8000350:	2024      	movs	r0, #36	; 0x24
 8000352:	f000 fc61 	bl	8000c18 <SPI_IRQInterruptConfig>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000356:	2101      	movs	r1, #1
 8000358:	4859      	ldr	r0, [pc, #356]	; (80004c0 <main+0x184>)
 800035a:	f000 fd4c 	bl	8000df6 <SPI_SSOEConfig>

	while(1){
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 800035e:	bf00      	nop
 8000360:	210d      	movs	r1, #13
 8000362:	4858      	ldr	r0, [pc, #352]	; (80004c4 <main+0x188>)
 8000364:	f000 fb1e 	bl	80009a4 <GPIO_ReadFromInputPin>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f8      	bne.n	8000360 <main+0x24>

		//printf("SPI communication started!\n");

		/* 200ms delay */
		delay();
 800036e:	f7ff ffbd 	bl	80002ec <delay>

		/* Enable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, ENABLE);
 8000372:	2101      	movs	r1, #1
 8000374:	4852      	ldr	r0, [pc, #328]	; (80004c0 <main+0x184>)
 8000376:	f000 fd22 	bl	8000dbe <SPI_PeripheralControl>

		/* Send SPI data: CMD LED Control */
		uint8_t commandCode = COMMAND_LED_CTRL;
 800037a:	2350      	movs	r3, #80	; 0x50
 800037c:	71fb      	strb	r3, [r7, #7]

		/* Send command */
		while(SPI_SendDataIT(&SPI2Handle, &commandCode, 1) != SPI_READY);
 800037e:	bf00      	nop
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	4850      	ldr	r0, [pc, #320]	; (80004c8 <main+0x18c>)
 8000388:	f000 fbfd 	bl	8000b86 <SPI_SendDataIT>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d1f6      	bne.n	8000380 <main+0x44>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000392:	bf00      	nop
 8000394:	2201      	movs	r2, #1
 8000396:	494d      	ldr	r1, [pc, #308]	; (80004cc <main+0x190>)
 8000398:	484b      	ldr	r0, [pc, #300]	; (80004c8 <main+0x18c>)
 800039a:	f000 fc18 	bl	8000bce <SPI_ReceiveDataIT>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f7      	bne.n	8000394 <main+0x58>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 80003a4:	bf00      	nop
 80003a6:	2201      	movs	r2, #1
 80003a8:	4949      	ldr	r1, [pc, #292]	; (80004d0 <main+0x194>)
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <main+0x18c>)
 80003ac:	f000 fbeb 	bl	8000b86 <SPI_SendDataIT>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d1f7      	bne.n	80003a6 <main+0x6a>

		/* Receive Acknowledgment byte */
		uint8_t ackByte;
		while(SPI_ReceiveDataIT(&SPI2Handle, &ackByte, 1) != SPI_READY);
 80003b6:	bf00      	nop
 80003b8:	1dbb      	adds	r3, r7, #6
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	4842      	ldr	r0, [pc, #264]	; (80004c8 <main+0x18c>)
 80003c0:	f000 fc05 	bl	8000bce <SPI_ReceiveDataIT>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f6      	bne.n	80003b8 <main+0x7c>

		/* Verify response from SPI slave */
		uint8_t args[2];
		if(SPI_VerifyResponse(ackByte)){
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffa3 	bl	8000318 <SPI_VerifyResponse>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00d      	beq.n	80003f4 <main+0xb8>
			/* Send arguments */
			args[0] = LED_PIN;
 80003d8:	2309      	movs	r3, #9
 80003da:	713b      	strb	r3, [r7, #4]
			args[1] = LED_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	717b      	strb	r3, [r7, #5]
			while(SPI_SendDataIT(&SPI2Handle, args, 2) != SPI_READY);
 80003e0:	bf00      	nop
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2202      	movs	r2, #2
 80003e6:	4619      	mov	r1, r3
 80003e8:	4837      	ldr	r0, [pc, #220]	; (80004c8 <main+0x18c>)
 80003ea:	f000 fbcc 	bl	8000b86 <SPI_SendDataIT>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f6      	bne.n	80003e2 <main+0xa6>
			//printf("Command LED executed!\n");
		}
		/* End of CMD LED Control */

		/* Send SPI data: CMD Sensor Read */
		commandCode = COMMAND_SENSOR_READ;
 80003f4:	2351      	movs	r3, #81	; 0x51
 80003f6:	71fb      	strb	r3, [r7, #7]

		/* Send command */
		while(SPI_SendDataIT(&SPI2Handle, &commandCode, 1) != SPI_READY);
 80003f8:	bf00      	nop
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	4831      	ldr	r0, [pc, #196]	; (80004c8 <main+0x18c>)
 8000402:	f000 fbc0 	bl	8000b86 <SPI_SendDataIT>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1f6      	bne.n	80003fa <main+0xbe>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 800040c:	bf00      	nop
 800040e:	2201      	movs	r2, #1
 8000410:	492e      	ldr	r1, [pc, #184]	; (80004cc <main+0x190>)
 8000412:	482d      	ldr	r0, [pc, #180]	; (80004c8 <main+0x18c>)
 8000414:	f000 fbdb 	bl	8000bce <SPI_ReceiveDataIT>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f7      	bne.n	800040e <main+0xd2>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 800041e:	bf00      	nop
 8000420:	2201      	movs	r2, #1
 8000422:	492b      	ldr	r1, [pc, #172]	; (80004d0 <main+0x194>)
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <main+0x18c>)
 8000426:	f000 fbae 	bl	8000b86 <SPI_SendDataIT>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f7      	bne.n	8000420 <main+0xe4>

		/* Receive Acknowledgment byte */
		while(SPI_ReceiveDataIT(&SPI2Handle, &ackByte, 1) != SPI_READY);
 8000430:	bf00      	nop
 8000432:	1dbb      	adds	r3, r7, #6
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	4823      	ldr	r0, [pc, #140]	; (80004c8 <main+0x18c>)
 800043a:	f000 fbc8 	bl	8000bce <SPI_ReceiveDataIT>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d1f6      	bne.n	8000432 <main+0xf6>

		/* Verify response from SPI slave */
		if(SPI_VerifyResponse(ackByte)){
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff66 	bl	8000318 <SPI_VerifyResponse>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d029      	beq.n	80004a6 <main+0x16a>
			/* Send arguments */
			args[0] = ANALOG_PIN0;
 8000452:	2300      	movs	r3, #0
 8000454:	713b      	strb	r3, [r7, #4]
			while(SPI_SendDataIT(&SPI2Handle, args, 1) != SPI_READY);
 8000456:	bf00      	nop
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2201      	movs	r2, #1
 800045c:	4619      	mov	r1, r3
 800045e:	481a      	ldr	r0, [pc, #104]	; (80004c8 <main+0x18c>)
 8000460:	f000 fb91 	bl	8000b86 <SPI_SendDataIT>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f6      	bne.n	8000458 <main+0x11c>
			//printf("Command Sensor Read executed!\n");

			/* Dummy read to clear off the RXNE */
			while(SPI_ReceiveDataIT(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 800046a:	bf00      	nop
 800046c:	2201      	movs	r2, #1
 800046e:	4917      	ldr	r1, [pc, #92]	; (80004cc <main+0x190>)
 8000470:	4815      	ldr	r0, [pc, #84]	; (80004c8 <main+0x18c>)
 8000472:	f000 fbac 	bl	8000bce <SPI_ReceiveDataIT>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d1f7      	bne.n	800046c <main+0x130>

			/* Send dummy bits (byte) to fetch the response from slave */
			while(SPI_SendDataIT(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 800047c:	bf00      	nop
 800047e:	2201      	movs	r2, #1
 8000480:	4913      	ldr	r1, [pc, #76]	; (80004d0 <main+0x194>)
 8000482:	4811      	ldr	r0, [pc, #68]	; (80004c8 <main+0x18c>)
 8000484:	f000 fb7f 	bl	8000b86 <SPI_SendDataIT>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1f7      	bne.n	800047e <main+0x142>

			/* Wait for Slave to be ready with data */
			delay();
 800048e:	f7ff ff2d 	bl	80002ec <delay>

			/* Receive Sensor Data from Slave */
			uint8_t analogRead;
			while(SPI_ReceiveDataIT(&SPI2Handle, &analogRead, 1) != SPI_READY);
 8000492:	bf00      	nop
 8000494:	1cfb      	adds	r3, r7, #3
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <main+0x18c>)
 800049c:	f000 fb97 	bl	8000bce <SPI_ReceiveDataIT>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1f6      	bne.n	8000494 <main+0x158>
			//printf("Analog read value: %d\n",analogRead);
		}
		/* End of CMD Sensor Read */

		/* Confirm SPI2 not busy */
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 80004a6:	bf00      	nop
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <main+0x184>)
 80004ac:	f000 fb57 	bl	8000b5e <SPI_GetFlagStatus>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1f8      	bne.n	80004a8 <main+0x16c>

		/* Disable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, DISABLE);
 80004b6:	2100      	movs	r1, #0
 80004b8:	4801      	ldr	r0, [pc, #4]	; (80004c0 <main+0x184>)
 80004ba:	f000 fc80 	bl	8000dbe <SPI_PeripheralControl>
	while(1){
 80004be:	e74e      	b.n	800035e <main+0x22>
 80004c0:	40003800 	.word	0x40003800
 80004c4:	40020800 	.word	0x40020800
 80004c8:	20000024 	.word	0x20000024
 80004cc:	20000020 	.word	0x20000020
 80004d0:	20000000 	.word	0x20000000

080004d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490e      	ldr	r1, [pc, #56]	; (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0b      	ldr	r4, [pc, #44]	; (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004fe:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000502:	f000 fd65 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff ff19 	bl	800033c <main>

0800050a <LoopForever>:

LoopForever:
    b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
  ldr   r0, =_estack
 800050c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000518:	08001038 	.word	0x08001038
  ldr r2, =_sbss
 800051c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000520:	20000044 	.word	0x20000044

08000524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC_IRQHandler>
	...

08000528 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d141      	bne.n	80005be <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a43      	ldr	r2, [pc, #268]	; (800064c <GPIO_PeriClockControl+0x124>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000542:	4b43      	ldr	r3, [pc, #268]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a42      	ldr	r2, [pc, #264]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800054e:	e077      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a40      	ldr	r2, [pc, #256]	; (8000654 <GPIO_PeriClockControl+0x12c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000558:	4b3d      	ldr	r3, [pc, #244]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a3c      	ldr	r2, [pc, #240]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e06c      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a3b      	ldr	r2, [pc, #236]	; (8000658 <GPIO_PeriClockControl+0x130>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800056e:	4b38      	ldr	r3, [pc, #224]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a37      	ldr	r2, [pc, #220]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	e061      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a37      	ldr	r2, [pc, #220]	; (800065c <GPIO_PeriClockControl+0x134>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a31      	ldr	r2, [pc, #196]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	e056      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a32      	ldr	r2, [pc, #200]	; (8000660 <GPIO_PeriClockControl+0x138>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d106      	bne.n	80005a8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005a0:	f043 0310 	orr.w	r3, r3, #16
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a6:	e04b      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <GPIO_PeriClockControl+0x13c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d147      	bne.n	8000640 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005bc:	e040      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a22      	ldr	r2, [pc, #136]	; (800064c <GPIO_PeriClockControl+0x124>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a21      	ldr	r2, [pc, #132]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d2:	e035      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <GPIO_PeriClockControl+0x12c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d106      	bne.n	80005ea <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005e2:	f023 0302 	bic.w	r3, r3, #2
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e8:	e02a      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <GPIO_PeriClockControl+0x130>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <GPIO_PeriClockControl+0x128>)
 80005f8:	f023 0304 	bic.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fe:	e01f      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <GPIO_PeriClockControl+0x134>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d106      	bne.n	8000616 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800060e:	f023 0308 	bic.w	r3, r3, #8
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000614:	e014      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a11      	ldr	r2, [pc, #68]	; (8000660 <GPIO_PeriClockControl+0x138>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000624:	f023 0310 	bic.w	r3, r3, #16
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062a:	e009      	b.n	8000640 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <GPIO_PeriClockControl+0x13c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d105      	bne.n	8000640 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <GPIO_PeriClockControl+0x128>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a05      	ldr	r2, [pc, #20]	; (8000650 <GPIO_PeriClockControl+0x128>)
 800063a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	40020000 	.word	0x40020000
 8000650:	40023800 	.word	0x40023800
 8000654:	40020400 	.word	0x40020400
 8000658:	40020800 	.word	0x40020800
 800065c:	40020c00 	.word	0x40020c00
 8000660:	40021000 	.word	0x40021000
 8000664:	40021c00 	.word	0x40021c00

08000668 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000668:	b480      	push	{r7}
 800066a:	b087      	sub	sp, #28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d822      	bhi.n	80006c2 <GPIO_Init+0x5a>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	2103      	movs	r1, #3
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	43db      	mvns	r3, r3
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	400a      	ands	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
		temp = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e0ca      	b.n	8000858 <GPIO_Init+0x1f0>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	795b      	ldrb	r3, [r3, #5]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d117      	bne.n	80006fa <GPIO_Init+0x92>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ca:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <GPIO_Init+0x170>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7912      	ldrb	r2, [r2, #4]
 80006d2:	4611      	mov	r1, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	408a      	lsls	r2, r1
 80006d8:	4611      	mov	r1, r2
 80006da:	4a3f      	ldr	r2, [pc, #252]	; (80007d8 <GPIO_Init+0x170>)
 80006dc:	430b      	orrs	r3, r1
 80006de:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e0:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <GPIO_Init+0x170>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a39      	ldr	r2, [pc, #228]	; (80007d8 <GPIO_Init+0x170>)
 80006f4:	400b      	ands	r3, r1
 80006f6:	6093      	str	r3, [r2, #8]
 80006f8:	e035      	b.n	8000766 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	2b05      	cmp	r3, #5
 8000700:	d117      	bne.n	8000732 <GPIO_Init+0xca>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <GPIO_Init+0x170>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7912      	ldrb	r2, [r2, #4]
 800070a:	4611      	mov	r1, r2
 800070c:	2201      	movs	r2, #1
 800070e:	408a      	lsls	r2, r1
 8000710:	4611      	mov	r1, r2
 8000712:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <GPIO_Init+0x170>)
 8000714:	430b      	orrs	r3, r1
 8000716:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <GPIO_Init+0x170>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7912      	ldrb	r2, [r2, #4]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	43d2      	mvns	r2, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <GPIO_Init+0x170>)
 800072c:	400b      	ands	r3, r1
 800072e:	60d3      	str	r3, [r2, #12]
 8000730:	e019      	b.n	8000766 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	2b06      	cmp	r3, #6
 8000738:	d115      	bne.n	8000766 <GPIO_Init+0xfe>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <GPIO_Init+0x170>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	7912      	ldrb	r2, [r2, #4]
 8000742:	4611      	mov	r1, r2
 8000744:	2201      	movs	r2, #1
 8000746:	408a      	lsls	r2, r1
 8000748:	4611      	mov	r1, r2
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <GPIO_Init+0x170>)
 800074c:	430b      	orrs	r3, r1
 800074e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <GPIO_Init+0x170>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	7912      	ldrb	r2, [r2, #4]
 8000758:	4611      	mov	r1, r2
 800075a:	2201      	movs	r2, #1
 800075c:	408a      	lsls	r2, r1
 800075e:	4611      	mov	r1, r2
 8000760:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <GPIO_Init+0x170>)
 8000762:	430b      	orrs	r3, r1
 8000764:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <GPIO_Init+0x174>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <GPIO_Init+0x174>)
 800076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000770:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	f003 0303 	and.w	r3, r3, #3
 8000782:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <GPIO_Init+0x178>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d034      	beq.n	80007f8 <GPIO_Init+0x190>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <GPIO_Init+0x17c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d01d      	beq.n	80007d4 <GPIO_Init+0x16c>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <GPIO_Init+0x180>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d016      	beq.n	80007d0 <GPIO_Init+0x168>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <GPIO_Init+0x184>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d00f      	beq.n	80007cc <GPIO_Init+0x164>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <GPIO_Init+0x188>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d008      	beq.n	80007c8 <GPIO_Init+0x160>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <GPIO_Init+0x18c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d101      	bne.n	80007c4 <GPIO_Init+0x15c>
 80007c0:	2307      	movs	r3, #7
 80007c2:	e01a      	b.n	80007fa <GPIO_Init+0x192>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e018      	b.n	80007fa <GPIO_Init+0x192>
 80007c8:	2304      	movs	r3, #4
 80007ca:	e016      	b.n	80007fa <GPIO_Init+0x192>
 80007cc:	2303      	movs	r3, #3
 80007ce:	e014      	b.n	80007fa <GPIO_Init+0x192>
 80007d0:	2302      	movs	r3, #2
 80007d2:	e012      	b.n	80007fa <GPIO_Init+0x192>
 80007d4:	2301      	movs	r3, #1
 80007d6:	e010      	b.n	80007fa <GPIO_Init+0x192>
 80007d8:	40013c00 	.word	0x40013c00
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021c00 	.word	0x40021c00
 80007f8:	2300      	movs	r3, #0
 80007fa:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 80007fc:	4a67      	ldr	r2, [pc, #412]	; (800099c <GPIO_Init+0x334>)
 80007fe:	7cfb      	ldrb	r3, [r7, #19]
 8000800:	3302      	adds	r3, #2
 8000802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000806:	7cbb      	ldrb	r3, [r7, #18]
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	210f      	movs	r1, #15
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	4961      	ldr	r1, [pc, #388]	; (800099c <GPIO_Init+0x334>)
 8000816:	7cfb      	ldrb	r3, [r7, #19]
 8000818:	4002      	ands	r2, r0
 800081a:	3302      	adds	r3, #2
 800081c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 8000820:	4a5e      	ldr	r2, [pc, #376]	; (800099c <GPIO_Init+0x334>)
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	3302      	adds	r3, #2
 8000826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082a:	7c79      	ldrb	r1, [r7, #17]
 800082c:	7cbb      	ldrb	r3, [r7, #18]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	4618      	mov	r0, r3
 8000836:	4959      	ldr	r1, [pc, #356]	; (800099c <GPIO_Init+0x334>)
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	4302      	orrs	r2, r0
 800083c:	3302      	adds	r3, #2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <GPIO_Init+0x338>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	7912      	ldrb	r2, [r2, #4]
 800084a:	4611      	mov	r1, r2
 800084c:	2201      	movs	r2, #1
 800084e:	408a      	lsls	r2, r1
 8000850:	4611      	mov	r1, r2
 8000852:	4a53      	ldr	r2, [pc, #332]	; (80009a0 <GPIO_Init+0x338>)
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	799b      	ldrb	r3, [r3, #6]
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	2103      	movs	r1, #3
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	4619      	mov	r1, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	400a      	ands	r2, r1
 800088a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6899      	ldr	r1, [r3, #8]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	430a      	orrs	r2, r1
 800089a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	79db      	ldrb	r3, [r3, #7]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2103      	movs	r1, #3
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	400a      	ands	r2, r1
 80008ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68d9      	ldr	r1, [r3, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	430a      	orrs	r2, r1
 80008de:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	4619      	mov	r1, r3
 8000900:	2301      	movs	r3, #1
 8000902:	408b      	lsls	r3, r1
 8000904:	43db      	mvns	r3, r3
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	400a      	ands	r2, r1
 800090e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6859      	ldr	r1, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	430a      	orrs	r2, r1
 800091e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	795b      	ldrb	r3, [r3, #5]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d131      	bne.n	8000990 <GPIO_Init+0x328>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7c3a      	ldrb	r2, [r7, #16]
 8000944:	3208      	adds	r2, #8
 8000946:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	220f      	movs	r2, #15
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	7c3a      	ldrb	r2, [r7, #16]
 800095e:	4001      	ands	r1, r0
 8000960:	3208      	adds	r2, #8
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	7c3a      	ldrb	r2, [r7, #16]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7a5b      	ldrb	r3, [r3, #9]
 8000976:	461a      	mov	r2, r3
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	4618      	mov	r0, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	7c3a      	ldrb	r2, [r7, #16]
 8000988:	4301      	orrs	r1, r0
 800098a:	3208      	adds	r2, #8
 800098c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000990:	bf00      	nop
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40013800 	.word	0x40013800
 80009a0:	40013c00 	.word	0x40013c00

080009a4 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691a      	ldr	r2, [r3, #16]
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]

	return value;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]

}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SPI_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 **************************************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d12b      	bne.n	8000a3a <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <SPI_PeriClockControl+0xcc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a2c      	ldr	r2, [pc, #176]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 80009f6:	e04b      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI2){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a2a      	ldr	r2, [pc, #168]	; (8000aa4 <SPI_PeriClockControl+0xd4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d106      	bne.n	8000a0e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a0c:	e040      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI3){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <SPI_PeriClockControl+0xd8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a22:	e035      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI4){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SPI_PeriClockControl+0xdc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d131      	bne.n	8000a90 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a36:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a38:	e02a      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1){
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <SPI_PeriClockControl+0xcc>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a4e:	e01f      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI2){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SPI_PeriClockControl+0xd4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a64:	e014      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI3){
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <SPI_PeriClockControl+0xd8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7a:	e009      	b.n	8000a90 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI4){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <SPI_PeriClockControl+0xdc>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d105      	bne.n	8000a90 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a88:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SPI_PeriClockControl+0xd0>)
 8000a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a8e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40003800 	.word	0x40003800
 8000aa8:	40003c00 	.word	0x40003c00
 8000aac:	40013400 	.word	0x40013400

08000ab0 <SPI_Init>:
 * @return			- None
 *
 * @Note			- None
 *
 *****************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	795b      	ldrb	r3, [r3, #5]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d104      	bne.n	8000adc <SPI_Init+0x2c>
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e014      	b.n	8000b06 <SPI_Init+0x56>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	795b      	ldrb	r3, [r3, #5]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d104      	bne.n	8000aee <SPI_Init+0x3e>
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e00b      	b.n	8000b06 <SPI_Init+0x56>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d107      	bne.n	8000b06 <SPI_Init+0x56>
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000afc:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b04:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	799b      	ldrb	r3, [r3, #6]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	79db      	ldrb	r3, [r3, #7]
 8000b18:	02db      	lsls	r3, r3, #11
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7a1b      	ldrb	r3, [r3, #8]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7a5b      	ldrb	r3, [r3, #9]
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

	//7 . configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a9b      	ldrb	r3, [r3, #10]
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

	// Writing to register CR1
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]

}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SPI_GetFlagStatus>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *****************************************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName){
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SPI_SendDataIT>:
 * @return		- Tx State
 *
 * @Note		- None
 *
 *********************************************************************************/
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Length){
 8000b86:	b480      	push	{r7}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	7f1b      	ldrb	r3, [r3, #28]
 8000b96:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX){
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d010      	beq.n	8000bc0 <SPI_SendDataIT+0x3a>

		/*1. Save Tx buffer address and length information in global variables */
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Length;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	615a      	str	r2, [r3, #20]

		/*2. Mark SPI state as busy so that no other code can take over SPI peripheral until transmission is over */
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2202      	movs	r2, #2
 8000bae:	771a      	strb	r2, [r3, #28]

		/*3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR */

		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bbe:	605a      	str	r2, [r3, #4]

	}

	return state;
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <SPI_ReceiveDataIT>:
 * @return		- Rx State
 *
 * @Note		- None
 *
 *****************************************************************/
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Length){
 8000bce:	b480      	push	{r7}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RxState;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	7f5b      	ldrb	r3, [r3, #29]
 8000bde:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX){
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d010      	beq.n	8000c08 <SPI_ReceiveDataIT+0x3a>

		/*1. Save Rx buffer address and length information in global variables */
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Length;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	619a      	str	r2, [r3, #24]

		/*2. Mark SPI state as busy so that no other code can take over SPI peripheral until transmission is over */
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	775a      	strb	r2, [r3, #29]

		/*3. Enable RXNEIE control bit to get interrupt whenever RXE flag is set in SR */
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c06:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <SPI_IRQInterruptConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d133      	bne.n	8000c96 <SPI_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b1f      	cmp	r3, #31
 8000c32:	d80a      	bhi.n	8000c4a <SPI_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <SPI_IRQInterruptConfig+0xf4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <SPI_IRQInterruptConfig+0xf4>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000c48:	e059      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b1f      	cmp	r3, #31
 8000c4e:	d90f      	bls.n	8000c70 <SPI_IRQInterruptConfig+0x58>
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b3f      	cmp	r3, #63	; 0x3f
 8000c54:	d80c      	bhi.n	8000c70 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <SPI_IRQInterruptConfig+0xf8>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	f002 021f 	and.w	r2, r2, #31
 8000c60:	2101      	movs	r1, #1
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	4611      	mov	r1, r2
 8000c68:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <SPI_IRQInterruptConfig+0xf8>)
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e046      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b3f      	cmp	r3, #63	; 0x3f
 8000c74:	d943      	bls.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b5f      	cmp	r3, #95	; 0x5f
 8000c7a:	d840      	bhi.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <SPI_IRQInterruptConfig+0xfc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <SPI_IRQInterruptConfig+0xfc>)
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	e033      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b1f      	cmp	r3, #31
 8000c9a:	d80a      	bhi.n	8000cb2 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <SPI_IRQInterruptConfig+0x100>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <SPI_IRQInterruptConfig+0x100>)
 8000cac:	430b      	orrs	r3, r1
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	e025      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b1f      	cmp	r3, #31
 8000cb6:	d90f      	bls.n	8000cd8 <SPI_IRQInterruptConfig+0xc0>
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b3f      	cmp	r3, #63	; 0x3f
 8000cbc:	d80c      	bhi.n	8000cd8 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <SPI_IRQInterruptConfig+0x104>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	f002 021f 	and.w	r2, r2, #31
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <SPI_IRQInterruptConfig+0x104>)
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e012      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b3f      	cmp	r3, #63	; 0x3f
 8000cdc:	d90f      	bls.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ce2:	d80c      	bhi.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <SPI_IRQInterruptConfig+0x108>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	79fa      	ldrb	r2, [r7, #7]
 8000cea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SPI_IRQInterruptConfig+0x108>)
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	e7ff      	b.n	8000cfe <SPI_IRQInterruptConfig+0xe6>
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000e104 	.word	0xe000e104
 8000d14:	e000e108 	.word	0xe000e108
 8000d18:	e000e180 	.word	0xe000e180
 8000d1c:	e000e184 	.word	0xe000e184
 8000d20:	e000e188 	.word	0xe000e188

08000d24 <SPI_IRQHandling>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_IRQHandling(SPI_Handle_t *pHandle){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	uint8_t temp1, temp2;

	/* Check for TXE */

	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d46:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <SPI_IRQHandling+0x36>
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <SPI_IRQHandling+0x36>
		/* Handle TXE */
		spi_txe_interrupt_handle(pHandle);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f8a0 	bl	8000e9a <spi_txe_interrupt_handle>
	}

	/* Check for RXNE */
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d74:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <SPI_IRQHandling+0x64>
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <SPI_IRQHandling+0x64>
		/* Handle RXNE */
		spi_rxne_interrupt_handle(pHandle);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8c9 	bl	8000f1a <spi_rxne_interrupt_handle>
	}

	/* Check for OVR flag */
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d94:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <SPI_IRQHandling+0x92>
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <SPI_IRQHandling+0x92>
		/* Handle OVR Error */
		spi_ovr_err_interrupt_handle(pHandle);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f8f4 	bl	8000f9e <spi_ovr_err_interrupt_handle>
	}
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <SPI_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d106      	bne.n	8000dde <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]

	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);

	}
}
 8000ddc:	e005      	b.n	8000dea <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SPI_SSOEConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f043 0204 	orr.w	r2, r3, #4
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
	} else{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}
}
 8000e14:	e005      	b.n	8000e22 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f023 0204 	bic.w	r2, r3, #4
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SPI_CloseTransmission>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]

	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e44:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	771a      	strb	r2, [r3, #28]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SPI_CloseReception>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e7a:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	775a      	strb	r2, [r3, #29]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <spi_txe_interrupt_handle>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]

	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d015      	beq.n	8000edc <spi_txe_interrupt_handle+0x42>

		/* Load data into data register */
		/* 16 bit */
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	881a      	ldrh	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	e00f      	b.n	8000efc <spi_txe_interrupt_handle+0x62>
	} else{

		/* 8 bit */
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	1e5a      	subs	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60da      	str	r2, [r3, #12]
	}

	if(!pSPIHandle->TxLen){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d106      	bne.n	8000f12 <spi_txe_interrupt_handle+0x78>
		/* Tx is zero. Close SPI communication and inform application about it.
		 * Prevents interrupts from setting up of TXE flag. */
		SPI_CloseTransmission(pSPIHandle);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff92 	bl	8000e2e <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f96b 	bl	80001e8 <SPI_ApplicationEventCallback>
	}
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <spi_rxne_interrupt_handle>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]

	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <spi_rxne_interrupt_handle+0x44>
		/* Load data from data register into buffer */
		/* 16 bit */
		*((uint16_t*)pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxLen--;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIHandle->pRxBuffer++;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	e010      	b.n	8000f80 <spi_rxne_interrupt_handle+0x66>
	} else{
		/* 8 bit */
		*pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->DR;//DBG->Check brackets
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
	}

	if(!pSPIHandle->RxLen){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d106      	bne.n	8000f96 <spi_rxne_interrupt_handle+0x7c>
		/* Rx is zero. Close SPI communication and inform application about it.
		 * Prevents interrupts from setting up of RXNE flag. */
		SPI_CloseReception(pSPIHandle);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff6b 	bl	8000e64 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000f8e:	2102      	movs	r1, #2
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f929 	bl	80001e8 <SPI_ApplicationEventCallback>
	}
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <spi_ovr_err_interrupt_handle>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	/* Clear OVR flag */
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7f1b      	ldrb	r3, [r3, #28]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d007      	beq.n	8000fbe <spi_ovr_err_interrupt_handle+0x20>
		temp = pSPIHandle->pSPIx->DR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	73fb      	strb	r3, [r7, #15]
	}

	(void)temp;

	/* Inform application */
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff f911 	bl	80001e8 <SPI_ApplicationEventCallback>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	4e0d      	ldr	r6, [pc, #52]	; (8001008 <__libc_init_array+0x38>)
 8000fd4:	4c0d      	ldr	r4, [pc, #52]	; (800100c <__libc_init_array+0x3c>)
 8000fd6:	1ba4      	subs	r4, r4, r6
 8000fd8:	10a4      	asrs	r4, r4, #2
 8000fda:	2500      	movs	r5, #0
 8000fdc:	42a5      	cmp	r5, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	4e0b      	ldr	r6, [pc, #44]	; (8001010 <__libc_init_array+0x40>)
 8000fe2:	4c0c      	ldr	r4, [pc, #48]	; (8001014 <__libc_init_array+0x44>)
 8000fe4:	f000 f818 	bl	8001018 <_init>
 8000fe8:	1ba4      	subs	r4, r4, r6
 8000fea:	10a4      	asrs	r4, r4, #2
 8000fec:	2500      	movs	r5, #0
 8000fee:	42a5      	cmp	r5, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff8:	4798      	blx	r3
 8000ffa:	3501      	adds	r5, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001002:	4798      	blx	r3
 8001004:	3501      	adds	r5, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	08001030 	.word	0x08001030
 800100c:	08001030 	.word	0x08001030
 8001010:	08001030 	.word	0x08001030
 8001014:	08001034 	.word	0x08001034

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr
