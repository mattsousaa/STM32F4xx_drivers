
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000988  08000990  00010990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000988  08000988  00010990  2**0
                  CONTENTS
  4 .ARM          00000000  08000988  08000988  00010990  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000988  08000990  00010990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000988  08000988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800098c  0800098c  0001098c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000990  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000990  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010990  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000943  00000000  00000000  000109c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000024b  00000000  00000000  00011303  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  00011550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00011618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000014d6  00000000  00000000  000116b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ac5  00000000  00000000  00012b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000559c  00000000  00000000  00013653  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018bef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000268  00000000  00000000  00018c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000970 	.word	0x08000970

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000970 	.word	0x08000970

080001d4 <delay>:
 */

#include "stm32f401xx.h"
#include "stm32f401xx_gpio_driver.h"

void delay(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 50000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d9f7      	bls.n	80001e0 <delay+0xc>
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	delay();
 8000200:	f7ff ffe8 	bl	80001d4 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_12);
 8000204:	200c      	movs	r0, #12
 8000206:	f000 fb6f 	bl	80008e8 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_14);
 800020a:	210e      	movs	r1, #14
 800020c:	4802      	ldr	r0, [pc, #8]	; (8000218 <EXTI15_10_IRQHandler+0x1c>)
 800020e:	f000 faa5 	bl	800075c <GPIO_ToggleOutputPin>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020000 	.word	0x40020000

0800021c <main>:

int main(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

	// memset(&GpioLed,0,sizeof(GpioLed));
	// memset(&GpioBut,0,sizeof(GpioBut));

	/* LED config */
	GpioLed.pGPIOx = GPIOA;
 8000222:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0x68>)
 8000224:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000226:	230e      	movs	r3, #14
 8000228:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800022a:	2301      	movs	r3, #1
 800022c:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000232:	2300      	movs	r3, #0
 8000234:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000236:	2300      	movs	r3, #0
 8000238:	74fb      	strb	r3, [r7, #19]

	/* BUTTON config */
	GpioBut.pGPIOx = GPIOB;
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x6c>)
 800023c:	603b      	str	r3, [r7, #0]
	GpioBut.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023e:	230c      	movs	r3, #12
 8000240:	713b      	strb	r3, [r7, #4]
	GpioBut.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000242:	2304      	movs	r3, #4
 8000244:	717b      	strb	r3, [r7, #5]
	GpioBut.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	71bb      	strb	r3, [r7, #6]
	GpioBut.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0x68>)
 8000252:	f000 f845 	bl	80002e0 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	480b      	ldr	r0, [pc, #44]	; (8000288 <main+0x6c>)
 800025a:	f000 f841 	bl	80002e0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800025e:	f107 030c 	add.w	r3, r7, #12
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f8dc 	bl	8000420 <GPIO_Init>
	GPIO_Init(&GpioBut);
 8000268:	463b      	mov	r3, r7
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f8d8 	bl	8000420 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRIO15);
 8000270:	210f      	movs	r1, #15
 8000272:	2028      	movs	r0, #40	; 0x28
 8000274:	f000 fb0e 	bl	8000894 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	2028      	movs	r0, #40	; 0x28
 800027c:	f000 fa84 	bl	8000788 <GPIO_IRQInterruptConfig>

	while(1);
 8000280:	e7fe      	b.n	8000280 <main+0x64>
 8000282:	bf00      	nop
 8000284:	40020000 	.word	0x40020000
 8000288:	40020400 	.word	0x40020400

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 fb35 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffad 	bl	800021c <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000990 	.word	0x08000990
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	460b      	mov	r3, r1
 80002ea:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80002ec:	78fb      	ldrb	r3, [r7, #3]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d141      	bne.n	8000376 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a43      	ldr	r2, [pc, #268]	; (8000404 <GPIO_PeriClockControl+0x124>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002fa:	4b43      	ldr	r3, [pc, #268]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a42      	ldr	r2, [pc, #264]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000306:	e077      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a40      	ldr	r2, [pc, #256]	; (800040c <GPIO_PeriClockControl+0x12c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a3c      	ldr	r2, [pc, #240]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e06c      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a3b      	ldr	r2, [pc, #236]	; (8000410 <GPIO_PeriClockControl+0x130>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000326:	4b38      	ldr	r3, [pc, #224]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a37      	ldr	r2, [pc, #220]	; (8000408 <GPIO_PeriClockControl+0x128>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e061      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a37      	ldr	r2, [pc, #220]	; (8000414 <GPIO_PeriClockControl+0x134>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800033c:	4b32      	ldr	r3, [pc, #200]	; (8000408 <GPIO_PeriClockControl+0x128>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a31      	ldr	r2, [pc, #196]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e056      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a32      	ldr	r2, [pc, #200]	; (8000418 <GPIO_PeriClockControl+0x138>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000352:	4b2d      	ldr	r3, [pc, #180]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000358:	f043 0310 	orr.w	r3, r3, #16
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e04b      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a2e      	ldr	r2, [pc, #184]	; (800041c <GPIO_PeriClockControl+0x13c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d147      	bne.n	80003f8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000368:	4b27      	ldr	r3, [pc, #156]	; (8000408 <GPIO_PeriClockControl+0x128>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <GPIO_PeriClockControl+0x128>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e040      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a22      	ldr	r2, [pc, #136]	; (8000404 <GPIO_PeriClockControl+0x124>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a21      	ldr	r2, [pc, #132]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000384:	f023 0301 	bic.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e035      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a1f      	ldr	r2, [pc, #124]	; (800040c <GPIO_PeriClockControl+0x12c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <GPIO_PeriClockControl+0x128>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <GPIO_PeriClockControl+0x128>)
 800039a:	f023 0302 	bic.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e02a      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a1a      	ldr	r2, [pc, #104]	; (8000410 <GPIO_PeriClockControl+0x130>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a16      	ldr	r2, [pc, #88]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003b0:	f023 0304 	bic.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e01f      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <GPIO_PeriClockControl+0x134>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a10      	ldr	r2, [pc, #64]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003c6:	f023 0308 	bic.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e014      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a11      	ldr	r2, [pc, #68]	; (8000418 <GPIO_PeriClockControl+0x138>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003dc:	f023 0310 	bic.w	r3, r3, #16
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e009      	b.n	80003f8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <GPIO_PeriClockControl+0x13c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d105      	bne.n	80003f8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a05      	ldr	r2, [pc, #20]	; (8000408 <GPIO_PeriClockControl+0x128>)
 80003f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40020000 	.word	0x40020000
 8000408:	40023800 	.word	0x40023800
 800040c:	40020400 	.word	0x40020400
 8000410:	40020800 	.word	0x40020800
 8000414:	40020c00 	.word	0x40020c00
 8000418:	40021000 	.word	0x40021000
 800041c:	40021c00 	.word	0x40021c00

08000420 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000420:	b480      	push	{r7}
 8000422:	b087      	sub	sp, #28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	795b      	ldrb	r3, [r3, #5]
 8000430:	2b03      	cmp	r3, #3
 8000432:	d822      	bhi.n	800047a <GPIO_Init+0x5a>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	791b      	ldrb	r3, [r3, #4]
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	2103      	movs	r1, #3
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	4619      	mov	r1, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	400a      	ands	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6819      	ldr	r1, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	430a      	orrs	r2, r1
 8000472:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	e0ca      	b.n	8000610 <GPIO_Init+0x1f0>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	795b      	ldrb	r3, [r3, #5]
 800047e:	2b04      	cmp	r3, #4
 8000480:	d117      	bne.n	80004b2 <GPIO_Init+0x92>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b43      	ldr	r3, [pc, #268]	; (8000590 <GPIO_Init+0x170>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <GPIO_Init+0x170>)
 8000494:	430b      	orrs	r3, r1
 8000496:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <GPIO_Init+0x170>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a39      	ldr	r2, [pc, #228]	; (8000590 <GPIO_Init+0x170>)
 80004ac:	400b      	ands	r3, r1
 80004ae:	6093      	str	r3, [r2, #8]
 80004b0:	e035      	b.n	800051e <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	d117      	bne.n	80004ea <GPIO_Init+0xca>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b35      	ldr	r3, [pc, #212]	; (8000590 <GPIO_Init+0x170>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a31      	ldr	r2, [pc, #196]	; (8000590 <GPIO_Init+0x170>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <GPIO_Init+0x170>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <GPIO_Init+0x170>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	60d3      	str	r3, [r2, #12]
 80004e8:	e019      	b.n	800051e <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d115      	bne.n	800051e <GPIO_Init+0xfe>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <GPIO_Init+0x170>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a23      	ldr	r2, [pc, #140]	; (8000590 <GPIO_Init+0x170>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <GPIO_Init+0x170>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	4611      	mov	r1, r2
 8000518:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <GPIO_Init+0x170>)
 800051a:	430b      	orrs	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <GPIO_Init+0x174>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <GPIO_Init+0x174>)
 8000524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000528:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	089b      	lsrs	r3, r3, #2
 8000530:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a15      	ldr	r2, [pc, #84]	; (8000598 <GPIO_Init+0x178>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d034      	beq.n	80005b0 <GPIO_Init+0x190>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <GPIO_Init+0x17c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d01d      	beq.n	800058c <GPIO_Init+0x16c>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <GPIO_Init+0x180>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d016      	beq.n	8000588 <GPIO_Init+0x168>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <GPIO_Init+0x184>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d00f      	beq.n	8000584 <GPIO_Init+0x164>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <GPIO_Init+0x188>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d008      	beq.n	8000580 <GPIO_Init+0x160>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <GPIO_Init+0x18c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d101      	bne.n	800057c <GPIO_Init+0x15c>
 8000578:	2307      	movs	r3, #7
 800057a:	e01a      	b.n	80005b2 <GPIO_Init+0x192>
 800057c:	2300      	movs	r3, #0
 800057e:	e018      	b.n	80005b2 <GPIO_Init+0x192>
 8000580:	2304      	movs	r3, #4
 8000582:	e016      	b.n	80005b2 <GPIO_Init+0x192>
 8000584:	2303      	movs	r3, #3
 8000586:	e014      	b.n	80005b2 <GPIO_Init+0x192>
 8000588:	2302      	movs	r3, #2
 800058a:	e012      	b.n	80005b2 <GPIO_Init+0x192>
 800058c:	2301      	movs	r3, #1
 800058e:	e010      	b.n	80005b2 <GPIO_Init+0x192>
 8000590:	40013c00 	.word	0x40013c00
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40021c00 	.word	0x40021c00
 80005b0:	2300      	movs	r3, #0
 80005b2:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 80005b4:	4a67      	ldr	r2, [pc, #412]	; (8000754 <GPIO_Init+0x334>)
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	3302      	adds	r3, #2
 80005ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005be:	7cbb      	ldrb	r3, [r7, #18]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	210f      	movs	r1, #15
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	4961      	ldr	r1, [pc, #388]	; (8000754 <GPIO_Init+0x334>)
 80005ce:	7cfb      	ldrb	r3, [r7, #19]
 80005d0:	4002      	ands	r2, r0
 80005d2:	3302      	adds	r3, #2
 80005d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 80005d8:	4a5e      	ldr	r2, [pc, #376]	; (8000754 <GPIO_Init+0x334>)
 80005da:	7cfb      	ldrb	r3, [r7, #19]
 80005dc:	3302      	adds	r3, #2
 80005de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e2:	7c79      	ldrb	r1, [r7, #17]
 80005e4:	7cbb      	ldrb	r3, [r7, #18]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	4959      	ldr	r1, [pc, #356]	; (8000754 <GPIO_Init+0x334>)
 80005f0:	7cfb      	ldrb	r3, [r7, #19]
 80005f2:	4302      	orrs	r2, r0
 80005f4:	3302      	adds	r3, #2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005fa:	4b57      	ldr	r3, [pc, #348]	; (8000758 <GPIO_Init+0x338>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	4611      	mov	r1, r2
 800060a:	4a53      	ldr	r2, [pc, #332]	; (8000758 <GPIO_Init+0x338>)
 800060c:	430b      	orrs	r3, r1
 800060e:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	2103      	movs	r1, #3
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6899      	ldr	r1, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	430a      	orrs	r2, r1
 8000652:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	79db      	ldrb	r3, [r3, #7]
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	2103      	movs	r1, #3
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	43db      	mvns	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	400a      	ands	r2, r1
 8000686:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68d9      	ldr	r1, [r3, #12]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	430a      	orrs	r2, r1
 8000696:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a1b      	ldrb	r3, [r3, #8]
 80006a0:	461a      	mov	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2301      	movs	r3, #1
 80006ba:	408b      	lsls	r3, r1
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6859      	ldr	r1, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d131      	bne.n	8000748 <GPIO_Init+0x328>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	08db      	lsrs	r3, r3, #3
 80006ea:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	f003 0307 	and.w	r3, r3, #7
 80006f4:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	7c3a      	ldrb	r2, [r7, #16]
 80006fc:	3208      	adds	r2, #8
 80006fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	7c3a      	ldrb	r2, [r7, #16]
 8000716:	4001      	ands	r1, r0
 8000718:	3208      	adds	r2, #8
 800071a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	7c3a      	ldrb	r2, [r7, #16]
 8000724:	3208      	adds	r2, #8
 8000726:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7a5b      	ldrb	r3, [r3, #9]
 800072e:	461a      	mov	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	7c3a      	ldrb	r2, [r7, #16]
 8000740:	4301      	orrs	r1, r0
 8000742:	3208      	adds	r2, #8
 8000744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40013800 	.word	0x40013800
 8000758:	40013c00 	.word	0x40013c00

0800075c <GPIO_ToggleOutputPin>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f202 	lsl.w	r2, r1, r2
 8000774:	405a      	eors	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	615a      	str	r2, [r3, #20]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <GPIO_IRQInterruptConfig>:
 * @return            - none
 *
 * @Note              - Only 81 IRQ numbers are actually implemented on the microcontroller.
 * 						There are a total of 240 interruptions.
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d133      	bne.n	8000806 <GPIO_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b1f      	cmp	r3, #31
 80007a2:	d80a      	bhi.n	80007ba <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007a4:	4b35      	ldr	r3, [pc, #212]	; (800087c <GPIO_IRQInterruptConfig+0xf4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a32      	ldr	r2, [pc, #200]	; (800087c <GPIO_IRQInterruptConfig+0xf4>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 80007b8:	e059      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b1f      	cmp	r3, #31
 80007be:	d90f      	bls.n	80007e0 <GPIO_IRQInterruptConfig+0x58>
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b3f      	cmp	r3, #63	; 0x3f
 80007c4:	d80c      	bhi.n	80007e0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <GPIO_IRQInterruptConfig+0xf8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	f002 021f 	and.w	r2, r2, #31
 80007d0:	2101      	movs	r1, #1
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a29      	ldr	r2, [pc, #164]	; (8000880 <GPIO_IRQInterruptConfig+0xf8>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e046      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b3f      	cmp	r3, #63	; 0x3f
 80007e4:	d943      	bls.n	800086e <GPIO_IRQInterruptConfig+0xe6>
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b5f      	cmp	r3, #95	; 0x5f
 80007ea:	d840      	bhi.n	800086e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <GPIO_IRQInterruptConfig+0xfc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a21      	ldr	r2, [pc, #132]	; (8000884 <GPIO_IRQInterruptConfig+0xfc>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	e033      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	d80a      	bhi.n	8000822 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <GPIO_IRQInterruptConfig+0x100>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <GPIO_IRQInterruptConfig+0x100>)
 800081c:	430b      	orrs	r3, r1
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	e025      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d90f      	bls.n	8000848 <GPIO_IRQInterruptConfig+0xc0>
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b3f      	cmp	r3, #63	; 0x3f
 800082c:	d80c      	bhi.n	8000848 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <GPIO_IRQInterruptConfig+0x104>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	f002 021f 	and.w	r2, r2, #31
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <GPIO_IRQInterruptConfig+0x104>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	e012      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b3f      	cmp	r3, #63	; 0x3f
 800084c:	d90f      	bls.n	800086e <GPIO_IRQInterruptConfig+0xe6>
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b5f      	cmp	r3, #95	; 0x5f
 8000852:	d80c      	bhi.n	800086e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <GPIO_IRQInterruptConfig+0x108>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <GPIO_IRQInterruptConfig+0x108>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	e7ff      	b.n	800086e <GPIO_IRQInterruptConfig+0xe6>
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000e104 	.word	0xe000e104
 8000884:	e000e108 	.word	0xe000e108
 8000888:	e000e180 	.word	0xe000e180
 800088c:	e000e184 	.word	0xe000e184
 8000890:	e000e188 	.word	0xe000e188

08000894 <GPIO_IRQPriorityConfig>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority){
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]

	//1. first lets find out the IPR register
	uint8_t iprx = IRQNumber / 4;				//the corresponding IPR number
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber % 4;		//the byte offset of the required Priority field
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED); //only 4 bits are available
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	3304      	adds	r3, #4
 80008b6:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + (iprx * 4)) |= (IRQPriority << shift_amount);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008c0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	7b7b      	ldrb	r3, [r7, #13]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	409a      	lsls	r2, r3
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008d4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]

}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <GPIO_IRQHandling>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_IRQHandling(uint8_t PinNumber){
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <GPIO_IRQHandling+0x3c>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4013      	ands	r3, r2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d009      	beq.n	8000918 <GPIO_IRQHandling+0x30>
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <GPIO_IRQHandling+0x3c>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <GPIO_IRQHandling+0x3c>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6153      	str	r3, [r2, #20]
	}
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013c00 	.word	0x40013c00

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4e0d      	ldr	r6, [pc, #52]	; (8000960 <__libc_init_array+0x38>)
 800092c:	4c0d      	ldr	r4, [pc, #52]	; (8000964 <__libc_init_array+0x3c>)
 800092e:	1ba4      	subs	r4, r4, r6
 8000930:	10a4      	asrs	r4, r4, #2
 8000932:	2500      	movs	r5, #0
 8000934:	42a5      	cmp	r5, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	4e0b      	ldr	r6, [pc, #44]	; (8000968 <__libc_init_array+0x40>)
 800093a:	4c0c      	ldr	r4, [pc, #48]	; (800096c <__libc_init_array+0x44>)
 800093c:	f000 f818 	bl	8000970 <_init>
 8000940:	1ba4      	subs	r4, r4, r6
 8000942:	10a4      	asrs	r4, r4, #2
 8000944:	2500      	movs	r5, #0
 8000946:	42a5      	cmp	r5, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000950:	4798      	blx	r3
 8000952:	3501      	adds	r5, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095a:	4798      	blx	r3
 800095c:	3501      	adds	r5, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	08000988 	.word	0x08000988
 8000964:	08000988 	.word	0x08000988
 8000968:	08000988 	.word	0x08000988
 800096c:	0800098c 	.word	0x0800098c

08000970 <_init>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr

0800097c <_fini>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr
