
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e88  08000e88  00020814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e88  08000e88  00020814  2**0
                  CONTENTS
  4 .ARM          00000000  08000e88  08000e88  00020814  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e88  08000e88  00020814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000814  20000000  08000e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000814  080016a4  00020814  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  080016a4  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020814  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dfd  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000605  00000000  00000000  00022641  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  00022c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002e06  00000000  00000000  00022f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017f2  00000000  00000000  00025d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ae56  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003235e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000534  00000000  00000000  000323dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000814 	.word	0x20000814
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e70 	.word	0x08000e70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000818 	.word	0x20000818
 80001d0:	08000e70 	.word	0x08000e70

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART2_Init>:
char rcv_buf[32];
char rcv_print[32];

USART_Handle_t usart2_handle;

void USART2_Init(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	usart2_handle.pUSARTx = USART1;
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <USART2_Init+0x3c>)
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <USART2_Init+0x40>)
 80001ec:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <USART2_Init+0x3c>)
 80001f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80001f4:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <USART2_Init+0x3c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <USART2_Init+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <USART2_Init+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <USART2_Init+0x3c>)
 800020a:	2200      	movs	r2, #0
 800020c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <USART2_Init+0x3c>)
 8000210:	2200      	movs	r2, #0
 8000212:	739a      	strb	r2, [r3, #14]

	USART_Init(&usart2_handle);
 8000214:	4802      	ldr	r0, [pc, #8]	; (8000220 <USART2_Init+0x3c>)
 8000216:	f000 fcdf 	bl	8000bd8 <USART_Init>
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000850 	.word	0x20000850
 8000224:	40011000 	.word	0x40011000

08000228 <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <USART2_GPIOInit+0x40>)
 8000230:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000232:	2302      	movs	r3, #2
 8000234:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000236:	2300      	movs	r3, #0
 8000238:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000242:	2307      	movs	r3, #7
 8000244:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_9;
 8000246:	2309      	movs	r3, #9
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f95f 	bl	8000510 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000252:	230a      	movs	r3, #10
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f959 	bl	8000510 <GPIO_Init>

}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40020000 	.word	0x40020000

0800026c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <GPIO_ButtonInit+0x2c>)
 8000274:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000276:	2304      	movs	r3, #4
 8000278:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027a:	2300      	movs	r3, #0
 800027c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f941 	bl	8000510 <GPIO_Init>

}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020800 	.word	0x40020800

0800029c <delay>:

void delay(void){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e002      	b.n	80002ae <delay+0x12>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <delay+0x28>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d9f8      	bls.n	80002a8 <delay+0xc>
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	0003d08f 	.word	0x0003d08f

080002c8 <main>:

int main(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002ce:	f7ff ffcd 	bl	800026c <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002d2:	f7ff ffa9 	bl	8000228 <USART2_GPIOInit>

    USART2_Init();
 80002d6:	f7ff ff85 	bl	80001e4 <USART2_Init>

    USART_PeripheralControl(USART1, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <main+0x98>)
 80002de:	f000 fb7f 	bl	80009e0 <USART_PeripheralControl>

    while(1){

    	//wait till button is pressed
    	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4)){};
 80002e2:	bf00      	nop
 80002e4:	2104      	movs	r1, #4
 80002e6:	481f      	ldr	r0, [pc, #124]	; (8000364 <main+0x9c>)
 80002e8:	f000 fab4 	bl	8000854 <GPIO_ReadFromInputPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1f8      	bne.n	80002e4 <main+0x1c>

   		//to avoid button de-bouncing related issues 200ms of delay
   		delay();
 80002f2:	f7ff ffd3 	bl	800029c <delay>

   		USART_SendData(&usart2_handle,(uint8_t*)msg1, strlen(msg1));
 80002f6:	481c      	ldr	r0, [pc, #112]	; (8000368 <main+0xa0>)
 80002f8:	f7ff ff6c 	bl	80001d4 <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	4919      	ldr	r1, [pc, #100]	; (8000368 <main+0xa0>)
 8000302:	481a      	ldr	r0, [pc, #104]	; (800036c <main+0xa4>)
 8000304:	f000 fceb 	bl	8000cde <USART_SendData>

   		uint8_t i = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	71fb      	strb	r3, [r7, #7]

   		do{
   			USART_ReceiveData(&usart2_handle, (uint8_t*)rcv_buf, 1);
 800030c:	2201      	movs	r2, #1
 800030e:	4918      	ldr	r1, [pc, #96]	; (8000370 <main+0xa8>)
 8000310:	4816      	ldr	r0, [pc, #88]	; (800036c <main+0xa4>)
 8000312:	f000 fd31 	bl	8000d78 <USART_ReceiveData>
   			rcv_print[i] = *rcv_buf;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <main+0xa8>)
 800031a:	7811      	ldrb	r1, [r2, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <main+0xac>)
 800031e:	54d1      	strb	r1, [r2, r3]
   			i++;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	3301      	adds	r3, #1
 8000324:	71fb      	strb	r3, [r7, #7]
   		} while(*rcv_buf != '\r');
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <main+0xa8>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b0d      	cmp	r3, #13
 800032c:	d1ee      	bne.n	800030c <main+0x44>

   		rcv_print[i+1] = '\0';
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	3301      	adds	r3, #1
 8000332:	4a10      	ldr	r2, [pc, #64]	; (8000374 <main+0xac>)
 8000334:	2100      	movs	r1, #0
 8000336:	54d1      	strb	r1, [r2, r3]

   		USART_SendData(&usart2_handle, (uint8_t*)msg2, strlen(msg2));
 8000338:	480f      	ldr	r0, [pc, #60]	; (8000378 <main+0xb0>)
 800033a:	f7ff ff4b 	bl	80001d4 <strlen>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <main+0xb0>)
 8000344:	4809      	ldr	r0, [pc, #36]	; (800036c <main+0xa4>)
 8000346:	f000 fcca 	bl	8000cde <USART_SendData>
   		USART_SendData(&usart2_handle, (uint8_t*)rcv_print, strlen(rcv_print));
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <main+0xac>)
 800034c:	f7ff ff42 	bl	80001d4 <strlen>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	4907      	ldr	r1, [pc, #28]	; (8000374 <main+0xac>)
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <main+0xa4>)
 8000358:	f000 fcc1 	bl	8000cde <USART_SendData>
    while(1){
 800035c:	e7c1      	b.n	80002e2 <main+0x1a>
 800035e:	bf00      	nop
 8000360:	40011000 	.word	0x40011000
 8000364:	40020800 	.word	0x40020800
 8000368:	20000000 	.word	0x20000000
 800036c:	20000850 	.word	0x20000850
 8000370:	20000830 	.word	0x20000830
 8000374:	20000874 	.word	0x20000874
 8000378:	20000400 	.word	0x20000400

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490e      	ldr	r1, [pc, #56]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0b      	ldr	r4, [pc, #44]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 fd3d 	bl	8000e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff8b 	bl	80002c8 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000814 	.word	0x20000814
  ldr r2, =_sidata
 80003c0:	08000e90 	.word	0x08000e90
  ldr r2, =_sbss
 80003c4:	20000814 	.word	0x20000814
  ldr r4, =_ebss
 80003c8:	20000894 	.word	0x20000894

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d141      	bne.n	8000466 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a43      	ldr	r2, [pc, #268]	; (80004f4 <GPIO_PeriClockControl+0x124>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003ea:	4b43      	ldr	r3, [pc, #268]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a42      	ldr	r2, [pc, #264]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003f6:	e077      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a40      	ldr	r2, [pc, #256]	; (80004fc <GPIO_PeriClockControl+0x12c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000400:	4b3d      	ldr	r3, [pc, #244]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a3c      	ldr	r2, [pc, #240]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e06c      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <GPIO_PeriClockControl+0x130>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000416:	4b38      	ldr	r3, [pc, #224]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a37      	ldr	r2, [pc, #220]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e061      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a37      	ldr	r2, [pc, #220]	; (8000504 <GPIO_PeriClockControl+0x134>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e056      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a32      	ldr	r2, [pc, #200]	; (8000508 <GPIO_PeriClockControl+0x138>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e04b      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a2e      	ldr	r2, [pc, #184]	; (800050c <GPIO_PeriClockControl+0x13c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d147      	bne.n	80004e8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a26      	ldr	r2, [pc, #152]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800045e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e040      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <GPIO_PeriClockControl+0x124>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000474:	f023 0301 	bic.w	r3, r3, #1
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e035      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <GPIO_PeriClockControl+0x12c>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800048a:	f023 0302 	bic.w	r3, r3, #2
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e02a      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a1a      	ldr	r2, [pc, #104]	; (8000500 <GPIO_PeriClockControl+0x130>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004a0:	f023 0304 	bic.w	r3, r3, #4
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e01f      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a16      	ldr	r2, [pc, #88]	; (8000504 <GPIO_PeriClockControl+0x134>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004b6:	f023 0308 	bic.w	r3, r3, #8
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e014      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a11      	ldr	r2, [pc, #68]	; (8000508 <GPIO_PeriClockControl+0x138>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004cc:	f023 0310 	bic.w	r3, r3, #16
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e009      	b.n	80004e8 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <GPIO_PeriClockControl+0x13c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d105      	bne.n	80004e8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <GPIO_PeriClockControl+0x128>)
 80004e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020400 	.word	0x40020400
 8000500:	40020800 	.word	0x40020800
 8000504:	40020c00 	.word	0x40020c00
 8000508:	40021000 	.word	0x40021000
 800050c:	40021c00 	.word	0x40021c00

08000510 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2101      	movs	r1, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff54 	bl	80003d0 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d822      	bhi.n	8000576 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	400a      	ands	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6819      	ldr	r1, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	430a      	orrs	r2, r1
 800056e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e0ca      	b.n	800070c <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b04      	cmp	r3, #4
 800057c:	d117      	bne.n	80005ae <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057e:	4b43      	ldr	r3, [pc, #268]	; (800068c <GPIO_Init+0x17c>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a3f      	ldr	r2, [pc, #252]	; (800068c <GPIO_Init+0x17c>)
 8000590:	430b      	orrs	r3, r1
 8000592:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b3d      	ldr	r3, [pc, #244]	; (800068c <GPIO_Init+0x17c>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a39      	ldr	r2, [pc, #228]	; (800068c <GPIO_Init+0x17c>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	6093      	str	r3, [r2, #8]
 80005ac:	e035      	b.n	800061a <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b05      	cmp	r3, #5
 80005b4:	d117      	bne.n	80005e6 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <GPIO_Init+0x17c>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a31      	ldr	r2, [pc, #196]	; (800068c <GPIO_Init+0x17c>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b2f      	ldr	r3, [pc, #188]	; (800068c <GPIO_Init+0x17c>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	43d2      	mvns	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a2b      	ldr	r2, [pc, #172]	; (800068c <GPIO_Init+0x17c>)
 80005e0:	400b      	ands	r3, r1
 80005e2:	60d3      	str	r3, [r2, #12]
 80005e4:	e019      	b.n	800061a <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	d115      	bne.n	800061a <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <GPIO_Init+0x17c>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7912      	ldrb	r2, [r2, #4]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <GPIO_Init+0x17c>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <GPIO_Init+0x17c>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	4a1d      	ldr	r2, [pc, #116]	; (800068c <GPIO_Init+0x17c>)
 8000616:	430b      	orrs	r3, r1
 8000618:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <GPIO_Init+0x180>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <GPIO_Init+0x180>)
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	089b      	lsrs	r3, r3, #2
 800062c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	f003 0303 	and.w	r3, r3, #3
 8000636:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <GPIO_Init+0x184>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d034      	beq.n	80006ac <GPIO_Init+0x19c>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <GPIO_Init+0x188>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d01d      	beq.n	8000688 <GPIO_Init+0x178>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <GPIO_Init+0x18c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d016      	beq.n	8000684 <GPIO_Init+0x174>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <GPIO_Init+0x190>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d00f      	beq.n	8000680 <GPIO_Init+0x170>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <GPIO_Init+0x194>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d008      	beq.n	800067c <GPIO_Init+0x16c>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <GPIO_Init+0x198>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d101      	bne.n	8000678 <GPIO_Init+0x168>
 8000674:	2307      	movs	r3, #7
 8000676:	e01a      	b.n	80006ae <GPIO_Init+0x19e>
 8000678:	2300      	movs	r3, #0
 800067a:	e018      	b.n	80006ae <GPIO_Init+0x19e>
 800067c:	2304      	movs	r3, #4
 800067e:	e016      	b.n	80006ae <GPIO_Init+0x19e>
 8000680:	2303      	movs	r3, #3
 8000682:	e014      	b.n	80006ae <GPIO_Init+0x19e>
 8000684:	2302      	movs	r3, #2
 8000686:	e012      	b.n	80006ae <GPIO_Init+0x19e>
 8000688:	2301      	movs	r3, #1
 800068a:	e010      	b.n	80006ae <GPIO_Init+0x19e>
 800068c:	40013c00 	.word	0x40013c00
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021c00 	.word	0x40021c00
 80006ac:	2300      	movs	r3, #0
 80006ae:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 80006b0:	4a66      	ldr	r2, [pc, #408]	; (800084c <GPIO_Init+0x33c>)
 80006b2:	7cfb      	ldrb	r3, [r7, #19]
 80006b4:	3302      	adds	r3, #2
 80006b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ba:	7cbb      	ldrb	r3, [r7, #18]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	210f      	movs	r1, #15
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	4960      	ldr	r1, [pc, #384]	; (800084c <GPIO_Init+0x33c>)
 80006ca:	7cfb      	ldrb	r3, [r7, #19]
 80006cc:	4002      	ands	r2, r0
 80006ce:	3302      	adds	r3, #2
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 80006d4:	4a5d      	ldr	r2, [pc, #372]	; (800084c <GPIO_Init+0x33c>)
 80006d6:	7cfb      	ldrb	r3, [r7, #19]
 80006d8:	3302      	adds	r3, #2
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	7c79      	ldrb	r1, [r7, #17]
 80006e0:	7cbb      	ldrb	r3, [r7, #18]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	4958      	ldr	r1, [pc, #352]	; (800084c <GPIO_Init+0x33c>)
 80006ec:	7cfb      	ldrb	r3, [r7, #19]
 80006ee:	4302      	orrs	r2, r0
 80006f0:	3302      	adds	r3, #2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006f6:	4b56      	ldr	r3, [pc, #344]	; (8000850 <GPIO_Init+0x340>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a52      	ldr	r2, [pc, #328]	; (8000850 <GPIO_Init+0x340>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	799b      	ldrb	r3, [r3, #6]
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	2103      	movs	r1, #3
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	400a      	ands	r2, r1
 800073e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6899      	ldr	r1, [r3, #8]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	430a      	orrs	r2, r1
 800074e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	79db      	ldrb	r3, [r3, #7]
 8000758:	461a      	mov	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68da      	ldr	r2, [r3, #12]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	2103      	movs	r1, #3
 8000774:	fa01 f303 	lsl.w	r3, r1, r3
 8000778:	43db      	mvns	r3, r3
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	400a      	ands	r2, r1
 8000782:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68d9      	ldr	r1, [r3, #12]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	430a      	orrs	r2, r1
 8000792:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	7a1b      	ldrb	r3, [r3, #8]
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2301      	movs	r3, #1
 80007b6:	408b      	lsls	r3, r1
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6859      	ldr	r1, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d131      	bne.n	8000844 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	7c3a      	ldrb	r2, [r7, #16]
 80007f8:	3208      	adds	r2, #8
 80007fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	220f      	movs	r2, #15
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	7c3a      	ldrb	r2, [r7, #16]
 8000812:	4001      	ands	r1, r0
 8000814:	3208      	adds	r2, #8
 8000816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	7c3a      	ldrb	r2, [r7, #16]
 8000820:	3208      	adds	r2, #8
 8000822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7a5b      	ldrb	r3, [r3, #9]
 800082a:	461a      	mov	r2, r3
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	4618      	mov	r0, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	7c3a      	ldrb	r2, [r7, #16]
 800083c:	4301      	orrs	r1, r0
 800083e:	3208      	adds	r2, #8
 8000840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	40013c00 	.word	0x40013c00

08000854 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	fa22 f303 	lsr.w	r3, r2, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]

	return value;
 8000872:	7bfb      	ldrb	r3, [r7, #15]

}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <RCC_GetPCLK1Value>:
#include "stm32f401xx_rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <RCC_GetPCLK1Value+0x9c>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000894:	7a7b      	ldrb	r3, [r7, #9]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d102      	bne.n	80008a0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <RCC_GetPCLK1Value+0xa0>)
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e00b      	b.n	80008b8 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 80008a0:	7a7b      	ldrb	r3, [r7, #9]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d102      	bne.n	80008ac <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <RCC_GetPCLK1Value+0xa4>)
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e005      	b.n	80008b8 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2){
 80008ac:	7a7b      	ldrb	r3, [r7, #9]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d102      	bne.n	80008b8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80008b2:	f000 f88d 	bl	80009d0 <RCC_GetPLLOutputClock>
 80008b6:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <RCC_GetPCLK1Value+0x9c>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	f003 030f 	and.w	r3, r3, #15
 80008c4:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80008c6:	7a3b      	ldrb	r3, [r7, #8]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d802      	bhi.n	80008d2 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	72fb      	strb	r3, [r7, #11]
 80008d0:	e005      	b.n	80008de <RCC_GetPCLK1Value+0x5e>
	} else{
		ahbp = AHB_PreScaler[temp-8];
 80008d2:	7a3b      	ldrb	r3, [r7, #8]
 80008d4:	3b08      	subs	r3, #8
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <RCC_GetPCLK1Value+0xa8>)
 80008d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008dc:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <RCC_GetPCLK1Value+0x9c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	0a9b      	lsrs	r3, r3, #10
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 80008ec:	7a3b      	ldrb	r3, [r7, #8]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d802      	bhi.n	80008f8 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	72bb      	strb	r3, [r7, #10]
 80008f6:	e004      	b.n	8000902 <RCC_GetPCLK1Value+0x82>
	} else{
		apb1p = APB1_PreScaler[temp-4];
 80008f8:	7a3b      	ldrb	r3, [r7, #8]
 80008fa:	3b04      	subs	r3, #4
 80008fc:	4a0b      	ldr	r2, [pc, #44]	; (800092c <RCC_GetPCLK1Value+0xac>)
 80008fe:	5cd3      	ldrb	r3, [r2, r3]
 8000900:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp)/apb1p;
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	fbb2 f2f3 	udiv	r2, r2, r3
 800090a:	7abb      	ldrb	r3, [r7, #10]
 800090c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000910:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	00f42400 	.word	0x00f42400
 8000924:	007a1200 	.word	0x007a1200
 8000928:	20000800 	.word	0x20000800
 800092c:	20000810 	.word	0x20000810

08000930 <RCC_GetPCLK2Value>:
 *
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void){
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0

	uint32_t SystemClock = 0, tmp, pclk2;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = (RCC->CFGR >> 2) & 0X3;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <RCC_GetPCLK2Value+0x8c>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp, apb2p;

	if(clk_src == 0){
 8000948:	7a7b      	ldrb	r3, [r7, #9]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <RCC_GetPCLK2Value+0x24>
		SystemClock = 16000000;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <RCC_GetPCLK2Value+0x90>)
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e001      	b.n	8000958 <RCC_GetPCLK2Value+0x28>
	} else{
		SystemClock = 8000000;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <RCC_GetPCLK2Value+0x94>)
 8000956:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4) & 0xF;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <RCC_GetPCLK2Value+0x8c>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	091b      	lsrs	r3, r3, #4
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d802      	bhi.n	8000970 <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	72fb      	strb	r3, [r7, #11]
 800096e:	e005      	b.n	800097c <RCC_GetPCLK2Value+0x4c>
	} else{
       ahbp = AHB_PreScaler[tmp-8];
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b08      	subs	r3, #8
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <RCC_GetPCLK2Value+0x98>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13) & 0x7;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <RCC_GetPCLK2Value+0x8c>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	0b5b      	lsrs	r3, r3, #13
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d802      	bhi.n	8000994 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	72bb      	strb	r3, [r7, #10]
 8000992:	e004      	b.n	800099e <RCC_GetPCLK2Value+0x6e>
	} else{
		apb2p = APB1_PreScaler[tmp-4];
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b04      	subs	r3, #4
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <RCC_GetPCLK2Value+0x9c>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp)/apb2p;
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80009a6:	7abb      	ldrb	r3, [r7, #10]
 80009a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ac:	603b      	str	r3, [r7, #0]

	return pclk2;
 80009ae:	683b      	ldr	r3, [r7, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40023800 	.word	0x40023800
 80009c0:	00f42400 	.word	0x00f42400
 80009c4:	007a1200 	.word	0x007a1200
 80009c8:	20000800 	.word	0x20000800
 80009cc:	20000810 	.word	0x20000810

080009d0 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock(){
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <USART_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d106      	bne.n	8000a00 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << 13);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	60da      	str	r2, [r3, #12]
	} else{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 80009fe:	e005      	b.n	8000a0c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60da      	str	r2, [r3, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <USART_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 ***********************************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d120      	bne.n	8000a6c <USART_PeriClockControl+0x54>
		if(pUSARTx == USART1){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <USART_PeriClockControl+0xa0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
			USART2_PCCK_DI();
		} else if(pUSARTx == USART6){
			USART6_PCCK_DI();
		}
	}
}
 8000a3e:	e035      	b.n	8000aac <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <USART_PeriClockControl+0xa8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d106      	bne.n	8000a56 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a54:	e02a      	b.n	8000aac <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <USART_PeriClockControl+0xac>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d126      	bne.n	8000aac <USART_PeriClockControl+0x94>
			USART6_PCCK_EN();
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a6a:	e01f      	b.n	8000aac <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <USART_PeriClockControl+0xa0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d106      	bne.n	8000a82 <USART_PeriClockControl+0x6a>
			USART1_PCCK_DI();
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a7a:	f023 0310 	bic.w	r3, r3, #16
 8000a7e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a80:	e014      	b.n	8000aac <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <USART_PeriClockControl+0xa8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d106      	bne.n	8000a98 <USART_PeriClockControl+0x80>
			USART2_PCCK_DI();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000a90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a96:	e009      	b.n	8000aac <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <USART_PeriClockControl+0xac>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d105      	bne.n	8000aac <USART_PeriClockControl+0x94>
			USART6_PCCK_DI();
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <USART_PeriClockControl+0xa4>)
 8000aa6:	f023 0320 	bic.w	r3, r3, #32
 8000aaa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40011400 	.word	0x40011400

08000ac8 <USART_GetFlagStatus>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 ************************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]

    if(pUSARTx->SR & StatusFlagName){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <USART_GetFlagStatus+0x1c>
    	return SET;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e000      	b.n	8000ae6 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <USART_SetBaudRate>:
 * @return            - None
 *
 * @Note              - None
 *
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a31      	ldr	r2, [pc, #196]	; (8000bcc <USART_SetBaudRate+0xd8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d003      	beq.n	8000b12 <USART_SetBaudRate+0x1e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <USART_SetBaudRate+0xdc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d103      	bne.n	8000b1a <USART_SetBaudRate+0x26>
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000b12:	f7ff ff0d 	bl	8000930 <RCC_GetPCLK2Value>
 8000b16:	61f8      	str	r0, [r7, #28]
 8000b18:	e002      	b.n	8000b20 <USART_SetBaudRate+0x2c>
	} else{
	   PCLKx = RCC_GetPCLK1Value();
 8000b1a:	f7ff feb1 	bl	8000880 <RCC_GetPCLK1Value>
 8000b1e:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <USART_SetBaudRate+0x50>
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009a      	lsls	r2, r3, #2
 8000b36:	441a      	add	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	e00a      	b.n	8000b5a <USART_SetBaudRate+0x66>
	} else{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009a      	lsls	r2, r3, #2
 8000b4e:	441a      	add	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <USART_SetBaudRate+0xe0>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position. refer USART_BRR
	tempreg |= M_part << 4;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00a      	beq.n	8000ba0 <USART_SetBaudRate+0xac>
	  //OVER8 = 1, over sampling by 8
	  F_part = ((( F_part * 8) + 50) / 100) & ((uint8_t)0x07); // 50 is a round factor
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	3332      	adds	r3, #50	; 0x32
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <USART_SetBaudRate+0xe0>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e009      	b.n	8000bb4 <USART_SetBaudRate+0xc0>

	} else{
	   //over sampling by 16
	   F_part = ((( F_part * 16) + 50) / 100) & ((uint8_t)0x0F); // 50 is a round factor
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	3332      	adds	r3, #50	; 0x32
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <USART_SetBaudRate+0xe0>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	095b      	lsrs	r3, r3, #5
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position. refer USART_BRR
	tempreg |= F_part;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	609a      	str	r2, [r3, #8]

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	40011400 	.word	0x40011400
 8000bd4:	51eb851f 	.word	0x51eb851f

08000bd8 <USART_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff14 	bl	8000a18 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d104      	bne.n	8000c02 <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e010      	b.n	8000c24 <USART_Init+0x4c>
	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e007      	b.n	8000c24 <USART_Init+0x4c>

	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d103      	bne.n	8000c24 <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f043 030c 	orr.w	r3, r3, #12
 8000c22:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7b5b      	ldrb	r3, [r3, #13]
 8000c28:	031b      	lsls	r3, r3, #12
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7b9b      	ldrb	r3, [r3, #14]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d104      	bne.n	8000c44 <USART_Init+0x6c>
		//Implement the code to enale the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	e00b      	b.n	8000c5c <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	} else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7b9b      	ldrb	r3, [r3, #14]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d107      	bne.n	8000c5c <USART_Init+0x84>
		//Implement the code to enable the parity control
	    tempreg |= (1 << USART_CR1_PCE);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= (1 << USART_CR1_PS);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b1b      	ldrb	r3, [r3, #12]
 8000c6c:	031b      	lsls	r3, r3, #12
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7bdb      	ldrb	r3, [r3, #15]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d104      	bne.n	8000c94 <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e014      	b.n	8000cbe <USART_Init+0xe6>


	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7bdb      	ldrb	r3, [r3, #15]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d104      	bne.n	8000ca6 <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e00b      	b.n	8000cbe <USART_Init+0xe6>

	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7bdb      	ldrb	r3, [r3, #15]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d107      	bne.n	8000cbe <USART_Init+0xe6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb4:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f7ff ff0f 	bl	8000af4 <USART_SetBaudRate>

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <USART_SendData>:
 *
 * @return            -
 *
 * @Note              - Resolve all the TODOs
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0; i < Len; i++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e031      	b.n	8000d54 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000cf0:	bf00      	nop
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fee5 	bl	8000ac8 <USART_GetFlagStatus>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f6      	beq.n	8000cf2 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	7b5b      	ldrb	r3, [r3, #13]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d118      	bne.n	8000d3e <USART_SendData+0x60>
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d1e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	7b9b      	ldrb	r3, [r3, #14]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d106      	bne.n	8000d36 <USART_SendData+0x58>
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	e00b      	b.n	8000d4e <USART_SendData+0x70>
			} else{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	e007      	b.n	8000d4e <USART_SendData+0x70>
			}
		} else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++){
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3c9      	bcc.n	8000cf0 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000d5c:	bf00      	nop
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff feaf 	bl	8000ac8 <USART_GetFlagStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f6      	beq.n	8000d5e <USART_SendData+0x80>

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <USART_ReceiveData>:
 * @return            - None
 *
 * @Note 	      	  - None
 *
 *****************************************************************/
void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0; i < Len; i++){
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e045      	b.n	8000e16 <USART_ReceiveData+0x9e>
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_RXNE));
 8000d8a:	bf00      	nop
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2120      	movs	r1, #32
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fe98 	bl	8000ac8 <USART_GetFlagStatus>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f6      	beq.n	8000d8c <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	7b5b      	ldrb	r3, [r3, #13]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d11d      	bne.n	8000de2 <USART_ReceiveData+0x6a>
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	7b9b      	ldrb	r3, [r3, #14]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <USART_ReceiveData+0x56>
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	e020      	b.n	8000e10 <USART_ReceiveData+0x98>
			} else{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	e016      	b.n	8000e10 <USART_ReceiveData+0x98>
			}
		} else{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	7b9b      	ldrb	r3, [r3, #14]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d106      	bne.n	8000df8 <USART_ReceiveData+0x80>
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e008      	b.n	8000e0a <USART_ReceiveData+0x92>
			} else{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++){
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3b5      	bcc.n	8000d8a <USART_ReceiveData+0x12>
		}
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <__libc_init_array>:
 8000e28:	b570      	push	{r4, r5, r6, lr}
 8000e2a:	4e0d      	ldr	r6, [pc, #52]	; (8000e60 <__libc_init_array+0x38>)
 8000e2c:	4c0d      	ldr	r4, [pc, #52]	; (8000e64 <__libc_init_array+0x3c>)
 8000e2e:	1ba4      	subs	r4, r4, r6
 8000e30:	10a4      	asrs	r4, r4, #2
 8000e32:	2500      	movs	r5, #0
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	d109      	bne.n	8000e4c <__libc_init_array+0x24>
 8000e38:	4e0b      	ldr	r6, [pc, #44]	; (8000e68 <__libc_init_array+0x40>)
 8000e3a:	4c0c      	ldr	r4, [pc, #48]	; (8000e6c <__libc_init_array+0x44>)
 8000e3c:	f000 f818 	bl	8000e70 <_init>
 8000e40:	1ba4      	subs	r4, r4, r6
 8000e42:	10a4      	asrs	r4, r4, #2
 8000e44:	2500      	movs	r5, #0
 8000e46:	42a5      	cmp	r5, r4
 8000e48:	d105      	bne.n	8000e56 <__libc_init_array+0x2e>
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e50:	4798      	blx	r3
 8000e52:	3501      	adds	r5, #1
 8000e54:	e7ee      	b.n	8000e34 <__libc_init_array+0xc>
 8000e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5a:	4798      	blx	r3
 8000e5c:	3501      	adds	r5, #1
 8000e5e:	e7f2      	b.n	8000e46 <__libc_init_array+0x1e>
 8000e60:	08000e88 	.word	0x08000e88
 8000e64:	08000e88 	.word	0x08000e88
 8000e68:	08000e88 	.word	0x08000e88
 8000e6c:	08000e8c 	.word	0x08000e8c

08000e70 <_init>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr

08000e7c <_fini>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr
