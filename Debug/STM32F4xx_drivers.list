
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000038  08000cf0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000cf0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ace  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000513  00000000  00000000  00021b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00022050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  000221a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022de  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001223  00000000  00000000  00024596  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009069  00000000  00000000  000257b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002e822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000490  00000000  00000000  0002e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c98 	.word	0x08000c98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000003c 	.word	0x2000003c
 80001d0:	08000c98 	.word	0x08000c98

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

#define MY_ADDR 	0x61

#define SLAVE_ADDR  0x68

void delay(void){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	0003d08f 	.word	0x0003d08f

08000210 <I2C1_GPIOInits>:
/*
 * PA8-> SCL // 28
 * PB4-> SDA // 27
 */

void I2C1_GPIOInits(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	GPIO_Handle_t SCLPin, SDAPin;

	//SCL
	SCLPin.pGPIOx = GPIOA;
 8000216:	4b14      	ldr	r3, [pc, #80]	; (8000268 <I2C1_GPIOInits+0x58>)
 8000218:	60fb      	str	r3, [r7, #12]
	SCLPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021a:	2302      	movs	r3, #2
 800021c:	747b      	strb	r3, [r7, #17]
	SCLPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800021e:	2301      	movs	r3, #1
 8000220:	753b      	strb	r3, [r7, #20]
	SCLPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000222:	2301      	movs	r3, #1
 8000224:	74fb      	strb	r3, [r7, #19]
	SCLPin.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000226:	2304      	movs	r3, #4
 8000228:	757b      	strb	r3, [r7, #21]
	SCLPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	74bb      	strb	r3, [r7, #18]

	SCLPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800022e:	2308      	movs	r3, #8
 8000230:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&SCLPin);
 8000232:	f107 030c 	add.w	r3, r7, #12
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f940 	bl	80004bc <GPIO_Init>

	//SDA
	SDAPin.pGPIOx = GPIOB;
 800023c:	4b0b      	ldr	r3, [pc, #44]	; (800026c <I2C1_GPIOInits+0x5c>)
 800023e:	603b      	str	r3, [r7, #0]
	SDAPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000240:	2302      	movs	r3, #2
 8000242:	717b      	strb	r3, [r7, #5]
	SDAPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000244:	2301      	movs	r3, #1
 8000246:	723b      	strb	r3, [r7, #8]
	SDAPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000248:	2301      	movs	r3, #1
 800024a:	71fb      	strb	r3, [r7, #7]
	SDAPin.GPIO_PinConfig.GPIO_PinAltFunMode = 9;
 800024c:	2309      	movs	r3, #9
 800024e:	727b      	strb	r3, [r7, #9]
	SDAPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000250:	2302      	movs	r3, #2
 8000252:	71bb      	strb	r3, [r7, #6]

	//sda
	SDAPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000254:	2304      	movs	r3, #4
 8000256:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SDAPin);
 8000258:	463b      	mov	r3, r7
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f92e 	bl	80004bc <GPIO_Init>

}
 8000260:	bf00      	nop
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40020000 	.word	0x40020000
 800026c:	40020400 	.word	0x40020400

08000270 <I2C1_Inits>:

void I2C1_Inits(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	I2C3Handle.pI2Cx = I2C3;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <I2C1_Inits+0x2c>)
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <I2C1_Inits+0x30>)
 8000278:	601a      	str	r2, [r3, #0]
	I2C3Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <I2C1_Inits+0x2c>)
 800027c:	2201      	movs	r2, #1
 800027e:	725a      	strb	r2, [r3, #9]
	I2C3Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <I2C1_Inits+0x2c>)
 8000282:	2261      	movs	r2, #97	; 0x61
 8000284:	721a      	strb	r2, [r3, #8]
	I2C3Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <I2C1_Inits+0x2c>)
 8000288:	2200      	movs	r2, #0
 800028a:	729a      	strb	r2, [r3, #10]
	I2C3Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <I2C1_Inits+0x2c>)
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <I2C1_Inits+0x34>)
 8000290:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C3Handle);
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <I2C1_Inits+0x2c>)
 8000294:	f000 fbda 	bl	8000a4c <I2C_Init>

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000054 	.word	0x20000054
 80002a0:	40005c00 	.word	0x40005c00
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <GPIO_ButtonInit+0x2c>)
 80002b0:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002b6:	2300      	movs	r3, #0
 80002b8:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f8f9 	bl	80004bc <GPIO_Init>

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020800 	.word	0x40020800

080002d8 <main>:

int main(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002dc:	f7ff ffe4 	bl	80002a8 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002e0:	f7ff ff96 	bl	8000210 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002e4:	f7ff ffc4 	bl	8000270 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C3, ENABLE);
 80002e8:	2101      	movs	r1, #1
 80002ea:	480b      	ldr	r0, [pc, #44]	; (8000318 <main+0x40>)
 80002ec:	f000 fb92 	bl	8000a14 <I2C_PeripheralControl>

	while(1){
		//wait till button is pressed
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 80002f0:	bf00      	nop
 80002f2:	2104      	movs	r1, #4
 80002f4:	4809      	ldr	r0, [pc, #36]	; (800031c <main+0x44>)
 80002f6:	f000 fa83 	bl	8000800 <GPIO_ReadFromInputPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f8      	bne.n	80002f2 <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000300:	f7ff ff70 	bl	80001e4 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C3Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 8000304:	4806      	ldr	r0, [pc, #24]	; (8000320 <main+0x48>)
 8000306:	f7ff ff65 	bl	80001d4 <strlen>
 800030a:	4602      	mov	r2, r0
 800030c:	2368      	movs	r3, #104	; 0x68
 800030e:	4904      	ldr	r1, [pc, #16]	; (8000320 <main+0x48>)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <main+0x4c>)
 8000312:	f000 fc3d 	bl	8000b90 <I2C_MasterSendData>
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 8000316:	e7eb      	b.n	80002f0 <main+0x18>
 8000318:	40005c00 	.word	0x40005c00
 800031c:	40020800 	.word	0x40020800
 8000320:	20000000 	.word	0x20000000
 8000324:	20000054 	.word	0x20000054

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490e      	ldr	r1, [pc, #56]	; (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0b      	ldr	r4, [pc, #44]	; (8000374 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000352:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 fc7b 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ffbd 	bl	80002d8 <main>

0800035e <LoopForever>:

LoopForever:
    b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800036c:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000370:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000374:	2000007c 	.word	0x2000007c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d141      	bne.n	8000412 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a43      	ldr	r2, [pc, #268]	; (80004a0 <GPIO_PeriClockControl+0x124>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000396:	4b43      	ldr	r3, [pc, #268]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a42      	ldr	r2, [pc, #264]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003a2:	e077      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a40      	ldr	r2, [pc, #256]	; (80004a8 <GPIO_PeriClockControl+0x12c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003ac:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a3c      	ldr	r2, [pc, #240]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e06c      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a3b      	ldr	r2, [pc, #236]	; (80004ac <GPIO_PeriClockControl+0x130>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003c2:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a37      	ldr	r2, [pc, #220]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e061      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <GPIO_PeriClockControl+0x134>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d8:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a31      	ldr	r2, [pc, #196]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e056      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a32      	ldr	r2, [pc, #200]	; (80004b4 <GPIO_PeriClockControl+0x138>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a2c      	ldr	r2, [pc, #176]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e04b      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a2e      	ldr	r2, [pc, #184]	; (80004b8 <GPIO_PeriClockControl+0x13c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d147      	bne.n	8000494 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a26      	ldr	r2, [pc, #152]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800040a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e040      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <GPIO_PeriClockControl+0x124>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a21      	ldr	r2, [pc, #132]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e035      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <GPIO_PeriClockControl+0x12c>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000430:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000436:	f023 0302 	bic.w	r3, r3, #2
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e02a      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <GPIO_PeriClockControl+0x130>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a16      	ldr	r2, [pc, #88]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800044c:	f023 0304 	bic.w	r3, r3, #4
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e01f      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <GPIO_PeriClockControl+0x134>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000462:	f023 0308 	bic.w	r3, r3, #8
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e014      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <GPIO_PeriClockControl+0x138>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 8000478:	f023 0310 	bic.w	r3, r3, #16
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e009      	b.n	8000494 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <GPIO_PeriClockControl+0x13c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <GPIO_PeriClockControl+0x128>)
 800048e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40020000 	.word	0x40020000
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021c00 	.word	0x40021c00

080004bc <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2101      	movs	r1, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff54 	bl	800037c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d822      	bhi.n	8000522 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	795b      	ldrb	r3, [r3, #5]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6819      	ldr	r1, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e0ca      	b.n	80006b8 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b04      	cmp	r3, #4
 8000528:	d117      	bne.n	800055a <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <GPIO_Init+0x17c>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a3f      	ldr	r2, [pc, #252]	; (8000638 <GPIO_Init+0x17c>)
 800053c:	430b      	orrs	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <GPIO_Init+0x17c>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a39      	ldr	r2, [pc, #228]	; (8000638 <GPIO_Init+0x17c>)
 8000554:	400b      	ands	r3, r1
 8000556:	6093      	str	r3, [r2, #8]
 8000558:	e035      	b.n	80005c6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b05      	cmp	r3, #5
 8000560:	d117      	bne.n	8000592 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b35      	ldr	r3, [pc, #212]	; (8000638 <GPIO_Init+0x17c>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a31      	ldr	r2, [pc, #196]	; (8000638 <GPIO_Init+0x17c>)
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <GPIO_Init+0x17c>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	43d2      	mvns	r2, r2
 8000588:	4611      	mov	r1, r2
 800058a:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <GPIO_Init+0x17c>)
 800058c:	400b      	ands	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	e019      	b.n	80005c6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b06      	cmp	r3, #6
 8000598:	d115      	bne.n	80005c6 <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <GPIO_Init+0x17c>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a23      	ldr	r2, [pc, #140]	; (8000638 <GPIO_Init+0x17c>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <GPIO_Init+0x17c>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <GPIO_Init+0x17c>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <GPIO_Init+0x180>)
 80005c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <GPIO_Init+0x180>)
 80005cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d0:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	089b      	lsrs	r3, r3, #2
 80005d8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	f003 0303 	and.w	r3, r3, #3
 80005e2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a15      	ldr	r2, [pc, #84]	; (8000640 <GPIO_Init+0x184>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d034      	beq.n	8000658 <GPIO_Init+0x19c>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <GPIO_Init+0x188>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d01d      	beq.n	8000634 <GPIO_Init+0x178>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <GPIO_Init+0x18c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d016      	beq.n	8000630 <GPIO_Init+0x174>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <GPIO_Init+0x190>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d00f      	beq.n	800062c <GPIO_Init+0x170>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <GPIO_Init+0x194>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d008      	beq.n	8000628 <GPIO_Init+0x16c>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <GPIO_Init+0x198>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d101      	bne.n	8000624 <GPIO_Init+0x168>
 8000620:	2307      	movs	r3, #7
 8000622:	e01a      	b.n	800065a <GPIO_Init+0x19e>
 8000624:	2300      	movs	r3, #0
 8000626:	e018      	b.n	800065a <GPIO_Init+0x19e>
 8000628:	2304      	movs	r3, #4
 800062a:	e016      	b.n	800065a <GPIO_Init+0x19e>
 800062c:	2303      	movs	r3, #3
 800062e:	e014      	b.n	800065a <GPIO_Init+0x19e>
 8000630:	2302      	movs	r3, #2
 8000632:	e012      	b.n	800065a <GPIO_Init+0x19e>
 8000634:	2301      	movs	r3, #1
 8000636:	e010      	b.n	800065a <GPIO_Init+0x19e>
 8000638:	40013c00 	.word	0x40013c00
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400
 8000648:	40020800 	.word	0x40020800
 800064c:	40020c00 	.word	0x40020c00
 8000650:	40021000 	.word	0x40021000
 8000654:	40021c00 	.word	0x40021c00
 8000658:	2300      	movs	r3, #0
 800065a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 800065c:	4a66      	ldr	r2, [pc, #408]	; (80007f8 <GPIO_Init+0x33c>)
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	3302      	adds	r3, #2
 8000662:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000666:	7cbb      	ldrb	r3, [r7, #18]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	210f      	movs	r1, #15
 800066c:	fa01 f303 	lsl.w	r3, r1, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	4960      	ldr	r1, [pc, #384]	; (80007f8 <GPIO_Init+0x33c>)
 8000676:	7cfb      	ldrb	r3, [r7, #19]
 8000678:	4002      	ands	r2, r0
 800067a:	3302      	adds	r3, #2
 800067c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 8000680:	4a5d      	ldr	r2, [pc, #372]	; (80007f8 <GPIO_Init+0x33c>)
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	3302      	adds	r3, #2
 8000686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800068a:	7c79      	ldrb	r1, [r7, #17]
 800068c:	7cbb      	ldrb	r3, [r7, #18]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	4618      	mov	r0, r3
 8000696:	4958      	ldr	r1, [pc, #352]	; (80007f8 <GPIO_Init+0x33c>)
 8000698:	7cfb      	ldrb	r3, [r7, #19]
 800069a:	4302      	orrs	r2, r0
 800069c:	3302      	adds	r3, #2
 800069e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a2:	4b56      	ldr	r3, [pc, #344]	; (80007fc <GPIO_Init+0x340>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	4611      	mov	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a52      	ldr	r2, [pc, #328]	; (80007fc <GPIO_Init+0x340>)
 80006b4:	430b      	orrs	r3, r1
 80006b6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2103      	movs	r1, #3
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6899      	ldr	r1, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	430a      	orrs	r2, r1
 80006fa:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	79db      	ldrb	r3, [r3, #7]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	2103      	movs	r1, #3
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68d9      	ldr	r1, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	430a      	orrs	r2, r1
 800073e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7a1b      	ldrb	r3, [r3, #8]
 8000748:	461a      	mov	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	4619      	mov	r1, r3
 8000760:	2301      	movs	r3, #1
 8000762:	408b      	lsls	r3, r1
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6859      	ldr	r1, [r3, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	430a      	orrs	r2, r1
 800077e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d131      	bne.n	80007f0 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	7c3a      	ldrb	r2, [r7, #16]
 80007a4:	3208      	adds	r2, #8
 80007a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	220f      	movs	r2, #15
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	43db      	mvns	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7c3a      	ldrb	r2, [r7, #16]
 80007be:	4001      	ands	r1, r0
 80007c0:	3208      	adds	r2, #8
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	7c3a      	ldrb	r2, [r7, #16]
 80007cc:	3208      	adds	r2, #8
 80007ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a5b      	ldrb	r3, [r3, #9]
 80007d6:	461a      	mov	r2, r3
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	7c3a      	ldrb	r2, [r7, #16]
 80007e8:	4301      	orrs	r1, r0
 80007ea:	3208      	adds	r2, #8
 80007ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	40013c00 	.word	0x40013c00

08000800 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	fa22 f303 	lsr.w	r3, r2, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]

	return value;
 800081e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <I2C_GenerateStartCondition>:
uint32_t RCC_GetPLLOutputClock();

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_Prescaler[4] = {2, 4, 8, 16};

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;		// Makes space for read/write bit
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 				// SlaveAddr is Slave address + r/nw bit=0 (write)
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000866:	78fa      	ldrb	r2, [r7, #3]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	611a      	str	r2, [r3, #16]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2CHandle->pI2Cx->SR1;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2CHandle->pI2Cx->SR2;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <RCC_GetPCLK1Value+0x94>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <RCC_GetPCLK1Value+0x98>)
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e004      	b.n	80008e6 <RCC_GetPCLK1Value+0x2a>

	} else if(clksrc == 1){
 80008dc:	7a7b      	ldrb	r3, [r7, #9]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <RCC_GetPCLK1Value+0x9c>)
 80008e4:	60fb      	str	r3, [r7, #12]
	} else if(clksrc == 2){
		//SystemClk = RCC_GetPLLOutputClock();
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <RCC_GetPCLK1Value+0x94>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	091b      	lsrs	r3, r3, #4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80008f4:	7a3b      	ldrb	r3, [r7, #8]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d802      	bhi.n	8000900 <RCC_GetPCLK1Value+0x44>
		ahbp = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	72fb      	strb	r3, [r7, #11]
 80008fe:	e005      	b.n	800090c <RCC_GetPCLK1Value+0x50>
	} else{
		ahbp = AHB_Prescaler[temp - 8];
 8000900:	7a3b      	ldrb	r3, [r7, #8]
 8000902:	3b08      	subs	r3, #8
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <RCC_GetPCLK1Value+0xa0>)
 8000906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090a:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <RCC_GetPCLK1Value+0x94>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	0a9b      	lsrs	r3, r3, #10
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d802      	bhi.n	8000926 <RCC_GetPCLK1Value+0x6a>
		apb1 = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	72bb      	strb	r3, [r7, #10]
 8000924:	e005      	b.n	8000932 <RCC_GetPCLK1Value+0x76>
	} else{
		apb1 = APB1_Prescaler[temp - 4];
 8000926:	7a3b      	ldrb	r3, [r7, #8]
 8000928:	3b04      	subs	r3, #4
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <RCC_GetPCLK1Value+0xa4>)
 800092c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000930:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp)/apb1;
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	fbb2 f2f3 	udiv	r2, r2, r3
 800093a:	7abb      	ldrb	r3, [r7, #10]
 800093c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000940:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40023800 	.word	0x40023800
 8000954:	00f42400 	.word	0x00f42400
 8000958:	007a1200 	.word	0x007a1200
 800095c:	20000020 	.word	0x20000020
 8000960:	20000030 	.word	0x20000030

08000964 <I2C_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *********************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d120      	bne.n	80009b8 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <I2C_PeriClockControl+0xa0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 800098a:	e035      	b.n	80009f8 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <I2C_PeriClockControl+0xa8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d106      	bne.n	80009a2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 800099a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a0:	e02a      	b.n	80009f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	; (8000a10 <I2C_PeriClockControl+0xac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d126      	bne.n	80009f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b6:	e01f      	b.n	80009f8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <I2C_PeriClockControl+0xa0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d106      	bne.n	80009ce <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009cc:	e014      	b.n	80009f8 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <I2C_PeriClockControl+0xa8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d106      	bne.n	80009e4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e2:	e009      	b.n	80009f8 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <I2C_PeriClockControl+0xac>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d105      	bne.n	80009f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <I2C_PeriClockControl+0xa4>)
 80009f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40005800 	.word	0x40005800
 8000a10:	40005c00 	.word	0x40005c00

08000a14 <I2C_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d106      	bne.n	8000a34 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f043 0201 	orr.w	r2, r3, #1
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000a32:	e005      	b.n	8000a40 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 0201 	bic.w	r2, r3, #1
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <I2C_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff80 	bl	8000964 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7a5b      	ldrb	r3, [r3, #9]
 8000a68:	029b      	lsls	r3, r3, #10
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60bb      	str	r3, [r7, #8]

	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000a7e:	f7ff ff1d 	bl	80008bc <RCC_GetPCLK1Value>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <I2C_Init+0x114>)
 8000a86:	fba3 2302 	umull	r2, r3, r3, r2
 8000a8a:	0c9b      	lsrs	r3, r3, #18
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a9c:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a1b      	ldrb	r3, [r3, #8]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
	tempreg |= (1 << 14);													/* Should always be kept at 1 by software */
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	60bb      	str	r3, [r7, #8]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <I2C_Init+0x118>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d813      	bhi.n	8000afa <I2C_Init+0xae>
		//mode is standard mode

		tempreg &= ~(1 << 15);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ad8:	60bb      	str	r3, [r7, #8]
		 * T_high + T_low = T_scl
		 * T_scl = 2 * CCR * T_pclk1
		 * CCR = T_scl / (2 * T_pclk1) [time domain]
		 * CCR = F_pclk1 / (2 * F_scl) [frequency domain] */

		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ada:	f7ff feef 	bl	80008bc <RCC_GetPCLK1Value>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	81fb      	strh	r3, [r7, #14]
		tempreg |= (ccr_value & 0xFFF);										/* Only 12 bits */
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
		}

		tempreg |= (ccr_value & 0xFFF);
	}

}
 8000af8:	e02d      	b.n	8000b56 <I2C_Init+0x10a>
		tempreg |= (1 << 15);												/* F/S: I2C master mode selection (FM) */
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b00:	60bb      	str	r3, [r7, #8]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);			/* DUTY: Fm mode duty cycle */
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7a9b      	ldrb	r3, [r3, #10]
 8000b06:	039b      	lsls	r3, r3, #14
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7a9b      	ldrb	r3, [r3, #10]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10b      	bne.n	8000b30 <I2C_Init+0xe4>
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b18:	f7ff fed0 	bl	80008bc <RCC_GetPCLK1Value>
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b2c:	81fb      	strh	r3, [r7, #14]
 8000b2e:	e00c      	b.n	8000b4a <I2C_Init+0xfe>
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b30:	f7ff fec4 	bl	80008bc <RCC_GetPCLK1Value>
 8000b34:	4601      	mov	r1, r0
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009a      	lsls	r2, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b48:	81fb      	strh	r3, [r7, #14]
		tempreg |= (ccr_value & 0xFFF);
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60bb      	str	r3, [r7, #8]
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	000186a0 	.word	0x000186a0

08000b68 <I2C_GetFlagStatus>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <I2C_MasterSendData>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	70fb      	strb	r3, [r7, #3]

	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe42 	bl	800082c <I2C_GenerateStartCondition>
	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000ba8:	bf00      	nop
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ffd9 	bl	8000b68 <I2C_GetFlagStatus>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f6      	beq.n	8000baa <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe41 	bl	800084c <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000bca:	bf00      	nop
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ffc8 	bl	8000b68 <I2C_GetFlagStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f6      	beq.n	8000bcc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)

	I2C_ClearADDRFlag(pI2CHandle);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff fe4a 	bl	8000878 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0){
 8000be4:	e014      	b.n	8000c10 <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 8000be6:	bf00      	nop
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffba 	bl	8000b68 <I2C_GetFlagStatus>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f6      	beq.n	8000be8 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	781a      	ldrb	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1e7      	bne.n	8000be6 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	// 	 Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	// 	 when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000c16:	bf00      	nop
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffa2 	bl	8000b68 <I2C_GetFlagStatus>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f6      	beq.n	8000c18 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000c2a:	bf00      	nop
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2104      	movs	r1, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff98 	bl	8000b68 <I2C_GetFlagStatus>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f6      	beq.n	8000c2c <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF

	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fe2a 	bl	800089c <I2C_GenerateStopCondition>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	4e0d      	ldr	r6, [pc, #52]	; (8000c88 <__libc_init_array+0x38>)
 8000c54:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c56:	1ba4      	subs	r4, r4, r6
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	2500      	movs	r5, #0
 8000c5c:	42a5      	cmp	r5, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	4e0b      	ldr	r6, [pc, #44]	; (8000c90 <__libc_init_array+0x40>)
 8000c62:	4c0c      	ldr	r4, [pc, #48]	; (8000c94 <__libc_init_array+0x44>)
 8000c64:	f000 f818 	bl	8000c98 <_init>
 8000c68:	1ba4      	subs	r4, r4, r6
 8000c6a:	10a4      	asrs	r4, r4, #2
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c78:	4798      	blx	r3
 8000c7a:	3501      	adds	r5, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c82:	4798      	blx	r3
 8000c84:	3501      	adds	r5, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
