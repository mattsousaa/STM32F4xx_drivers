
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e8c  08000e8c  00020814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e8c  08000e8c  00020814  2**0
                  CONTENTS
  4 .ARM          00000000  08000e8c  08000e8c  00020814  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e8c  08000e8c  00020814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000814  20000000  08000e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000814  080016a8  00020814  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  080016a8  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020814  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ed3  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000614  00000000  00000000  00022717  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00022d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00022ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002e1b  00000000  00000000  00023038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018bb  00000000  00000000  00025e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aee3  00000000  00000000  0002770e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000325f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005cc  00000000  00000000  0003266c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000814 	.word	0x20000814
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e74 	.word	0x08000e74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000818 	.word	0x20000818
 80001d0:	08000e74 	.word	0x08000e74

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART2_Init>:
char rcv_buf[32];
char rcv_print[32];

USART_Handle_t usart2_handle;

void USART2_Init(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	usart2_handle.pUSARTx = USART1;
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <USART2_Init+0x3c>)
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <USART2_Init+0x40>)
 80001ec:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <USART2_Init+0x3c>)
 80001f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80001f4:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <USART2_Init+0x3c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <USART2_Init+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <USART2_Init+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <USART2_Init+0x3c>)
 800020a:	2200      	movs	r2, #0
 800020c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <USART2_Init+0x3c>)
 8000210:	2200      	movs	r2, #0
 8000212:	739a      	strb	r2, [r3, #14]

	USART_Init(&usart2_handle);
 8000214:	4802      	ldr	r0, [pc, #8]	; (8000220 <USART2_Init+0x3c>)
 8000216:	f000 fca9 	bl	8000b6c <USART_Init>
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000850 	.word	0x20000850
 8000224:	40011000 	.word	0x40011000

08000228 <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <USART2_GPIOInit+0x40>)
 8000230:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000232:	2302      	movs	r3, #2
 8000234:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000236:	2300      	movs	r3, #0
 8000238:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000242:	2307      	movs	r3, #7
 8000244:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_9;
 8000246:	2309      	movs	r3, #9
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f955 	bl	80004fc <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000252:	230a      	movs	r3, #10
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f94f 	bl	80004fc <GPIO_Init>

}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40020000 	.word	0x40020000

0800026c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <GPIO_ButtonInit+0x2c>)
 8000274:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000276:	2304      	movs	r3, #4
 8000278:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027a:	2300      	movs	r3, #0
 800027c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f937 	bl	80004fc <GPIO_Init>

}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020800 	.word	0x40020800

0800029c <main>:
   } else if (ApEv == USART_EVENT_TX_CMPLT){
	   ;
   }
}

int main(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002a2:	f7ff ffe3 	bl	800026c <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002a6:	f7ff ffbf 	bl	8000228 <USART2_GPIOInit>

    USART2_Init();
 80002aa:	f7ff ff9b 	bl	80001e4 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART1, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2025      	movs	r0, #37	; 0x25
 80002b2:	f000 fd35 	bl	8000d20 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART1, ENABLE);
 80002b6:	2101      	movs	r1, #1
 80002b8:	4825      	ldr	r0, [pc, #148]	; (8000350 <main+0xb4>)
 80002ba:	f000 fb71 	bl	80009a0 <USART_PeripheralControl>

   		//to avoid button de-bouncing related issues 200ms of delay
   		//delay();

   		//USART_SendData(&usart2_handle,(uint8_t*)msg1, strlen(msg1));
   		while(USART_SendDataIT(&usart2_handle, (uint8_t*)msg1, strlen(msg1)) != USART_READY);
 80002be:	bf00      	nop
 80002c0:	4824      	ldr	r0, [pc, #144]	; (8000354 <main+0xb8>)
 80002c2:	f7ff ff87 	bl	80001d4 <strlen>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4922      	ldr	r1, [pc, #136]	; (8000354 <main+0xb8>)
 80002cc:	4822      	ldr	r0, [pc, #136]	; (8000358 <main+0xbc>)
 80002ce:	f000 fcd0 	bl	8000c72 <USART_SendDataIT>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1f3      	bne.n	80002c0 <main+0x24>

   		uint8_t i = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	71fb      	strb	r3, [r7, #7]

   		do{
   			//USART_ReceiveData(&usart2_handle, (uint8_t*)rcv_buf, 1);
   			while(USART_ReceiveDataIT(&usart2_handle, (uint8_t*)rcv_buf, 1) != USART_READY);
 80002dc:	bf00      	nop
 80002de:	2201      	movs	r2, #1
 80002e0:	491e      	ldr	r1, [pc, #120]	; (800035c <main+0xc0>)
 80002e2:	481d      	ldr	r0, [pc, #116]	; (8000358 <main+0xbc>)
 80002e4:	f000 fcf3 	bl	8000cce <USART_ReceiveDataIT>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f7      	bne.n	80002de <main+0x42>
   			rcv_print[i] = *rcv_buf;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a1a      	ldr	r2, [pc, #104]	; (800035c <main+0xc0>)
 80002f2:	7811      	ldrb	r1, [r2, #0]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <main+0xc4>)
 80002f6:	54d1      	strb	r1, [r2, r3]
   			i++;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	3301      	adds	r3, #1
 80002fc:	71fb      	strb	r3, [r7, #7]
   		} while(*rcv_buf != '\r');
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <main+0xc0>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b0d      	cmp	r3, #13
 8000304:	d1ea      	bne.n	80002dc <main+0x40>

   		rcv_print[i+1] = '\0';
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	3301      	adds	r3, #1
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <main+0xc4>)
 800030c:	2100      	movs	r1, #0
 800030e:	54d1      	strb	r1, [r2, r3]

   		//USART_SendData(&usart2_handle, (uint8_t*)msg2, strlen(msg2));
   		//USART_SendData(&usart2_handle, (uint8_t*)rcv_print, strlen(rcv_print));
   		while(USART_SendDataIT(&usart2_handle, (uint8_t*)msg2, strlen(msg2)) != USART_READY);
 8000310:	bf00      	nop
 8000312:	4814      	ldr	r0, [pc, #80]	; (8000364 <main+0xc8>)
 8000314:	f7ff ff5e 	bl	80001d4 <strlen>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	4911      	ldr	r1, [pc, #68]	; (8000364 <main+0xc8>)
 800031e:	480e      	ldr	r0, [pc, #56]	; (8000358 <main+0xbc>)
 8000320:	f000 fca7 	bl	8000c72 <USART_SendDataIT>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1f3      	bne.n	8000312 <main+0x76>
   		while(USART_SendDataIT(&usart2_handle, (uint8_t*)rcv_print, strlen(rcv_print)) != USART_READY);
 800032a:	bf00      	nop
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0xc4>)
 800032e:	f7ff ff51 	bl	80001d4 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	490a      	ldr	r1, [pc, #40]	; (8000360 <main+0xc4>)
 8000338:	4807      	ldr	r0, [pc, #28]	; (8000358 <main+0xbc>)
 800033a:	f000 fc9a 	bl	8000c72 <USART_SendDataIT>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1f3      	bne.n	800032c <main+0x90>
 8000344:	2300      	movs	r3, #0

  //  }
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40011000 	.word	0x40011000
 8000354:	20000000 	.word	0x20000000
 8000358:	20000850 	.word	0x20000850
 800035c:	20000830 	.word	0x20000830
 8000360:	20000874 	.word	0x20000874
 8000364:	20000400 	.word	0x20000400

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490e      	ldr	r1, [pc, #56]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0b      	ldr	r4, [pc, #44]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000392:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 fd49 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff7f 	bl	800029c <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000814 	.word	0x20000814
  ldr r2, =_sidata
 80003ac:	08000e94 	.word	0x08000e94
  ldr r2, =_sbss
 80003b0:	20000814 	.word	0x20000814
  ldr r4, =_ebss
 80003b4:	20000894 	.word	0x20000894

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d141      	bne.n	8000452 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a43      	ldr	r2, [pc, #268]	; (80004e0 <GPIO_PeriClockControl+0x124>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003d6:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a42      	ldr	r2, [pc, #264]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003e2:	e077      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a40      	ldr	r2, [pc, #256]	; (80004e8 <GPIO_PeriClockControl+0x12c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003ec:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a3c      	ldr	r2, [pc, #240]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e06c      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a3b      	ldr	r2, [pc, #236]	; (80004ec <GPIO_PeriClockControl+0x130>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000402:	4b38      	ldr	r3, [pc, #224]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a37      	ldr	r2, [pc, #220]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e061      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a37      	ldr	r2, [pc, #220]	; (80004f0 <GPIO_PeriClockControl+0x134>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000418:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a31      	ldr	r2, [pc, #196]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e056      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a32      	ldr	r2, [pc, #200]	; (80004f4 <GPIO_PeriClockControl+0x138>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e04b      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a2e      	ldr	r2, [pc, #184]	; (80004f8 <GPIO_PeriClockControl+0x13c>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d147      	bne.n	80004d4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800044a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e040      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <GPIO_PeriClockControl+0x124>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800045a:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a21      	ldr	r2, [pc, #132]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000460:	f023 0301 	bic.w	r3, r3, #1
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e035      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <GPIO_PeriClockControl+0x12c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000476:	f023 0302 	bic.w	r3, r3, #2
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e02a      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <GPIO_PeriClockControl+0x130>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800048c:	f023 0304 	bic.w	r3, r3, #4
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e01f      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <GPIO_PeriClockControl+0x134>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80004a2:	f023 0308 	bic.w	r3, r3, #8
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e014      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <GPIO_PeriClockControl+0x138>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80004b8:	f023 0310 	bic.w	r3, r3, #16
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e009      	b.n	80004d4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <GPIO_PeriClockControl+0x13c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d105      	bne.n	80004d4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <GPIO_PeriClockControl+0x128>)
 80004ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020400 	.word	0x40020400
 80004ec:	40020800 	.word	0x40020800
 80004f0:	40020c00 	.word	0x40020c00
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40021c00 	.word	0x40021c00

080004fc <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2101      	movs	r1, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff54 	bl	80003bc <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d822      	bhi.n	8000562 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2103      	movs	r1, #3
 800053c:	fa01 f303 	lsl.w	r3, r1, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	430a      	orrs	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e0ca      	b.n	80006f8 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b04      	cmp	r3, #4
 8000568:	d117      	bne.n	800059a <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b43      	ldr	r3, [pc, #268]	; (8000678 <GPIO_Init+0x17c>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a3f      	ldr	r2, [pc, #252]	; (8000678 <GPIO_Init+0x17c>)
 800057c:	430b      	orrs	r3, r1
 800057e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000580:	4b3d      	ldr	r3, [pc, #244]	; (8000678 <GPIO_Init+0x17c>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	43d2      	mvns	r2, r2
 8000590:	4611      	mov	r1, r2
 8000592:	4a39      	ldr	r2, [pc, #228]	; (8000678 <GPIO_Init+0x17c>)
 8000594:	400b      	ands	r3, r1
 8000596:	6093      	str	r3, [r2, #8]
 8000598:	e035      	b.n	8000606 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	2b05      	cmp	r3, #5
 80005a0:	d117      	bne.n	80005d2 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b35      	ldr	r3, [pc, #212]	; (8000678 <GPIO_Init+0x17c>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a31      	ldr	r2, [pc, #196]	; (8000678 <GPIO_Init+0x17c>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <GPIO_Init+0x17c>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	7912      	ldrb	r2, [r2, #4]
 80005c0:	4611      	mov	r1, r2
 80005c2:	2201      	movs	r2, #1
 80005c4:	408a      	lsls	r2, r1
 80005c6:	43d2      	mvns	r2, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <GPIO_Init+0x17c>)
 80005cc:	400b      	ands	r3, r1
 80005ce:	60d3      	str	r3, [r2, #12]
 80005d0:	e019      	b.n	8000606 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b06      	cmp	r3, #6
 80005d8:	d115      	bne.n	8000606 <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <GPIO_Init+0x17c>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	4611      	mov	r1, r2
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <GPIO_Init+0x17c>)
 80005ec:	430b      	orrs	r3, r1
 80005ee:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <GPIO_Init+0x17c>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7912      	ldrb	r2, [r2, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	2201      	movs	r2, #1
 80005fc:	408a      	lsls	r2, r1
 80005fe:	4611      	mov	r1, r2
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <GPIO_Init+0x17c>)
 8000602:	430b      	orrs	r3, r1
 8000604:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <GPIO_Init+0x180>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <GPIO_Init+0x180>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000610:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a15      	ldr	r2, [pc, #84]	; (8000680 <GPIO_Init+0x184>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d034      	beq.n	8000698 <GPIO_Init+0x19c>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a14      	ldr	r2, [pc, #80]	; (8000684 <GPIO_Init+0x188>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d01d      	beq.n	8000674 <GPIO_Init+0x178>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <GPIO_Init+0x18c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d016      	beq.n	8000670 <GPIO_Init+0x174>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <GPIO_Init+0x190>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d00f      	beq.n	800066c <GPIO_Init+0x170>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <GPIO_Init+0x194>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d008      	beq.n	8000668 <GPIO_Init+0x16c>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <GPIO_Init+0x198>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d101      	bne.n	8000664 <GPIO_Init+0x168>
 8000660:	2307      	movs	r3, #7
 8000662:	e01a      	b.n	800069a <GPIO_Init+0x19e>
 8000664:	2300      	movs	r3, #0
 8000666:	e018      	b.n	800069a <GPIO_Init+0x19e>
 8000668:	2304      	movs	r3, #4
 800066a:	e016      	b.n	800069a <GPIO_Init+0x19e>
 800066c:	2303      	movs	r3, #3
 800066e:	e014      	b.n	800069a <GPIO_Init+0x19e>
 8000670:	2302      	movs	r3, #2
 8000672:	e012      	b.n	800069a <GPIO_Init+0x19e>
 8000674:	2301      	movs	r3, #1
 8000676:	e010      	b.n	800069a <GPIO_Init+0x19e>
 8000678:	40013c00 	.word	0x40013c00
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021000 	.word	0x40021000
 8000694:	40021c00 	.word	0x40021c00
 8000698:	2300      	movs	r3, #0
 800069a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 800069c:	4a66      	ldr	r2, [pc, #408]	; (8000838 <GPIO_Init+0x33c>)
 800069e:	7cfb      	ldrb	r3, [r7, #19]
 80006a0:	3302      	adds	r3, #2
 80006a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a6:	7cbb      	ldrb	r3, [r7, #18]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	210f      	movs	r1, #15
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	4960      	ldr	r1, [pc, #384]	; (8000838 <GPIO_Init+0x33c>)
 80006b6:	7cfb      	ldrb	r3, [r7, #19]
 80006b8:	4002      	ands	r2, r0
 80006ba:	3302      	adds	r3, #2
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 80006c0:	4a5d      	ldr	r2, [pc, #372]	; (8000838 <GPIO_Init+0x33c>)
 80006c2:	7cfb      	ldrb	r3, [r7, #19]
 80006c4:	3302      	adds	r3, #2
 80006c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ca:	7c79      	ldrb	r1, [r7, #17]
 80006cc:	7cbb      	ldrb	r3, [r7, #18]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	4958      	ldr	r1, [pc, #352]	; (8000838 <GPIO_Init+0x33c>)
 80006d8:	7cfb      	ldrb	r3, [r7, #19]
 80006da:	4302      	orrs	r2, r0
 80006dc:	3302      	adds	r3, #2
 80006de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006e2:	4b56      	ldr	r3, [pc, #344]	; (800083c <GPIO_Init+0x340>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7912      	ldrb	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a52      	ldr	r2, [pc, #328]	; (800083c <GPIO_Init+0x340>)
 80006f4:	430b      	orrs	r3, r1
 80006f6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	2103      	movs	r1, #3
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	43db      	mvns	r3, r3
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	400a      	ands	r2, r1
 800072a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6899      	ldr	r1, [r3, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	430a      	orrs	r2, r1
 800073a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2103      	movs	r1, #3
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68d9      	ldr	r1, [r3, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	430a      	orrs	r2, r1
 800077e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a1b      	ldrb	r3, [r3, #8]
 8000788:	461a      	mov	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	2301      	movs	r3, #1
 80007a2:	408b      	lsls	r3, r1
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6859      	ldr	r1, [r3, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	430a      	orrs	r2, r1
 80007be:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d131      	bne.n	8000830 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	f003 0307 	and.w	r3, r3, #7
 80007dc:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7c3a      	ldrb	r2, [r7, #16]
 80007e4:	3208      	adds	r2, #8
 80007e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	220f      	movs	r2, #15
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7c3a      	ldrb	r2, [r7, #16]
 80007fe:	4001      	ands	r1, r0
 8000800:	3208      	adds	r2, #8
 8000802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	7c3a      	ldrb	r2, [r7, #16]
 800080c:	3208      	adds	r2, #8
 800080e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7a5b      	ldrb	r3, [r3, #9]
 8000816:	461a      	mov	r2, r3
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	4618      	mov	r0, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7c3a      	ldrb	r2, [r7, #16]
 8000828:	4301      	orrs	r1, r0
 800082a:	3208      	adds	r2, #8
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40013800 	.word	0x40013800
 800083c:	40013c00 	.word	0x40013c00

08000840 <RCC_GetPCLK1Value>:
#include "stm32f401xx_rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <RCC_GetPCLK1Value+0x9c>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0303 	and.w	r3, r3, #3
 8000852:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000854:	7a7b      	ldrb	r3, [r7, #9]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <RCC_GetPCLK1Value+0xa0>)
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e00b      	b.n	8000878 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d102      	bne.n	800086c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <RCC_GetPCLK1Value+0xa4>)
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	e005      	b.n	8000878 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2){
 800086c:	7a7b      	ldrb	r3, [r7, #9]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d102      	bne.n	8000878 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000872:	f000 f88d 	bl	8000990 <RCC_GetPLLOutputClock>
 8000876:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <RCC_GetPCLK1Value+0x9c>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000886:	7a3b      	ldrb	r3, [r7, #8]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d802      	bhi.n	8000892 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	72fb      	strb	r3, [r7, #11]
 8000890:	e005      	b.n	800089e <RCC_GetPCLK1Value+0x5e>
	} else{
		ahbp = AHB_PreScaler[temp-8];
 8000892:	7a3b      	ldrb	r3, [r7, #8]
 8000894:	3b08      	subs	r3, #8
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <RCC_GetPCLK1Value+0xa8>)
 8000898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <RCC_GetPCLK1Value+0x9c>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0a9b      	lsrs	r3, r3, #10
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 80008ac:	7a3b      	ldrb	r3, [r7, #8]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d802      	bhi.n	80008b8 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	72bb      	strb	r3, [r7, #10]
 80008b6:	e004      	b.n	80008c2 <RCC_GetPCLK1Value+0x82>
	} else{
		apb1p = APB1_PreScaler[temp-4];
 80008b8:	7a3b      	ldrb	r3, [r7, #8]
 80008ba:	3b04      	subs	r3, #4
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <RCC_GetPCLK1Value+0xac>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp)/apb1p;
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ca:	7abb      	ldrb	r3, [r7, #10]
 80008cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	00f42400 	.word	0x00f42400
 80008e4:	007a1200 	.word	0x007a1200
 80008e8:	20000800 	.word	0x20000800
 80008ec:	20000810 	.word	0x20000810

080008f0 <RCC_GetPCLK2Value>:
 *
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void){
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0

	uint32_t SystemClock = 0, tmp, pclk2;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = (RCC->CFGR >> 2) & 0X3;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <RCC_GetPCLK2Value+0x8c>)
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	089b      	lsrs	r3, r3, #2
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp, apb2p;

	if(clk_src == 0){
 8000908:	7a7b      	ldrb	r3, [r7, #9]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <RCC_GetPCLK2Value+0x24>
		SystemClock = 16000000;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <RCC_GetPCLK2Value+0x90>)
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e001      	b.n	8000918 <RCC_GetPCLK2Value+0x28>
	} else{
		SystemClock = 8000000;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <RCC_GetPCLK2Value+0x94>)
 8000916:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4) & 0xF;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <RCC_GetPCLK2Value+0x8c>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	091b      	lsrs	r3, r3, #4
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b07      	cmp	r3, #7
 8000928:	d802      	bhi.n	8000930 <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	72fb      	strb	r3, [r7, #11]
 800092e:	e005      	b.n	800093c <RCC_GetPCLK2Value+0x4c>
	} else{
       ahbp = AHB_PreScaler[tmp-8];
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b08      	subs	r3, #8
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <RCC_GetPCLK2Value+0x98>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093a:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13) & 0x7;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <RCC_GetPCLK2Value+0x8c>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	0b5b      	lsrs	r3, r3, #13
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d802      	bhi.n	8000954 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	72bb      	strb	r3, [r7, #10]
 8000952:	e004      	b.n	800095e <RCC_GetPCLK2Value+0x6e>
	} else{
		apb2p = APB1_PreScaler[tmp-4];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b04      	subs	r3, #4
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <RCC_GetPCLK2Value+0x9c>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp)/apb2p;
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	fbb2 f2f3 	udiv	r2, r2, r3
 8000966:	7abb      	ldrb	r3, [r7, #10]
 8000968:	fbb2 f3f3 	udiv	r3, r2, r3
 800096c:	603b      	str	r3, [r7, #0]

	return pclk2;
 800096e:	683b      	ldr	r3, [r7, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40023800 	.word	0x40023800
 8000980:	00f42400 	.word	0x00f42400
 8000984:	007a1200 	.word	0x007a1200
 8000988:	20000800 	.word	0x20000800
 800098c:	20000810 	.word	0x20000810

08000990 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

	return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <USART_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d106      	bne.n	80009c0 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << 13);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60da      	str	r2, [r3, #12]
	} else{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 80009be:	e005      	b.n	80009cc <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <USART_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 ***********************************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d120      	bne.n	8000a2c <USART_PeriClockControl+0x54>
		if(pUSARTx == USART1){
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <USART_PeriClockControl+0xa0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 80009f2:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <USART_PeriClockControl+0xa4>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <USART_PeriClockControl+0xa4>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
			USART2_PCCK_DI();
		} else if(pUSARTx == USART6){
			USART6_PCCK_DI();
		}
	}
}
 80009fe:	e035      	b.n	8000a6c <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <USART_PeriClockControl+0xa8>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d106      	bne.n	8000a16 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a14:	e02a      	b.n	8000a6c <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <USART_PeriClockControl+0xac>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d126      	bne.n	8000a6c <USART_PeriClockControl+0x94>
			USART6_PCCK_EN();
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a16      	ldr	r2, [pc, #88]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a2a:	e01f      	b.n	8000a6c <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <USART_PeriClockControl+0xa0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d106      	bne.n	8000a42 <USART_PeriClockControl+0x6a>
			USART1_PCCK_DI();
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a38:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a3a:	f023 0310 	bic.w	r3, r3, #16
 8000a3e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a40:	e014      	b.n	8000a6c <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <USART_PeriClockControl+0xa8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <USART_PeriClockControl+0x80>
			USART2_PCCK_DI();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a56:	e009      	b.n	8000a6c <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <USART_PeriClockControl+0xac>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d105      	bne.n	8000a6c <USART_PeriClockControl+0x94>
			USART6_PCCK_DI();
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <USART_PeriClockControl+0xa4>)
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40011400 	.word	0x40011400

08000a88 <USART_SetBaudRate>:
 * @return            - None
 *
 * @Note              - None
 *
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a31      	ldr	r2, [pc, #196]	; (8000b60 <USART_SetBaudRate+0xd8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d003      	beq.n	8000aa6 <USART_SetBaudRate+0x1e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <USART_SetBaudRate+0xdc>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d103      	bne.n	8000aae <USART_SetBaudRate+0x26>
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000aa6:	f7ff ff23 	bl	80008f0 <RCC_GetPCLK2Value>
 8000aaa:	61f8      	str	r0, [r7, #28]
 8000aac:	e002      	b.n	8000ab4 <USART_SetBaudRate+0x2c>
	} else{
	   PCLKx = RCC_GetPCLK1Value();
 8000aae:	f7ff fec7 	bl	8000840 <RCC_GetPCLK1Value>
 8000ab2:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <USART_SetBaudRate+0x50>
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000ac0:	69fa      	ldr	r2, [r7, #28]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009a      	lsls	r2, r3, #2
 8000aca:	441a      	add	r2, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	e00a      	b.n	8000aee <USART_SetBaudRate+0x66>
	} else{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	009a      	lsls	r2, r3, #2
 8000ae2:	441a      	add	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aec:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <USART_SetBaudRate+0xe0>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position. refer USART_BRR
	tempreg |= M_part << 4;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2264      	movs	r2, #100	; 0x64
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00a      	beq.n	8000b34 <USART_SetBaudRate+0xac>
	  //OVER8 = 1, over sampling by 8
	  F_part = ((( F_part * 8) + 50) / 100) & ((uint8_t)0x07); // 50 is a round factor
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	3332      	adds	r3, #50	; 0x32
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <USART_SetBaudRate+0xe0>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	f003 0307 	and.w	r3, r3, #7
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e009      	b.n	8000b48 <USART_SetBaudRate+0xc0>

	} else{
	   //over sampling by 16
	   F_part = ((( F_part * 16) + 50) / 100) & ((uint8_t)0x0F); // 50 is a round factor
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	3332      	adds	r3, #50	; 0x32
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <USART_SetBaudRate+0xe0>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	095b      	lsrs	r3, r3, #5
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position. refer USART_BRR
	tempreg |= F_part;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	609a      	str	r2, [r3, #8]

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40011400 	.word	0x40011400
 8000b68:	51eb851f 	.word	0x51eb851f

08000b6c <USART_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff2a 	bl	80009d8 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d104      	bne.n	8000b96 <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e010      	b.n	8000bb8 <USART_Init+0x4c>
	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	791b      	ldrb	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e007      	b.n	8000bb8 <USART_Init+0x4c>

	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d103      	bne.n	8000bb8 <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 030c 	orr.w	r3, r3, #12
 8000bb6:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7b5b      	ldrb	r3, [r3, #13]
 8000bbc:	031b      	lsls	r3, r3, #12
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7b9b      	ldrb	r3, [r3, #14]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d104      	bne.n	8000bd8 <USART_Init+0x6c>
		//Implement the code to enale the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e00b      	b.n	8000bf0 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	} else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7b9b      	ldrb	r3, [r3, #14]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d107      	bne.n	8000bf0 <USART_Init+0x84>
		//Implement the code to enable the parity control
	    tempreg |= (1 << USART_CR1_PCE);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= (1 << USART_CR1_PS);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7b1b      	ldrb	r3, [r3, #12]
 8000c00:	031b      	lsls	r3, r3, #12
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7bdb      	ldrb	r3, [r3, #15]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d104      	bne.n	8000c28 <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e014      	b.n	8000c52 <USART_Init+0xe6>


	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7bdb      	ldrb	r3, [r3, #15]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d104      	bne.n	8000c3a <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00b      	b.n	8000c52 <USART_Init+0xe6>

	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7bdb      	ldrb	r3, [r3, #15]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d107      	bne.n	8000c52 <USART_Init+0xe6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c48:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c50:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f7ff ff0f 	bl	8000a88 <USART_SetBaudRate>

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <USART_SendDataIT>:
 * @return            - Tx state
 *
 * @Note 	          - None
 *
 *******************************************************************************/
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000c72:	b480      	push	{r7}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]

	uint8_t txstate = pUSARTHandle->TxBusyState;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	75fb      	strb	r3, [r7, #23]

	if(txstate != USART_BUSY_IN_TX){
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d019      	beq.n	8000cc0 <USART_SendDataIT+0x4e>
		pUSARTHandle->TxLen = Len;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	619a      	str	r2, [r3, #24]
		pUSARTHandle->pTxBuffer = pTxBuffer;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	611a      	str	r2, [r3, #16]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

		//Implement the code to enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cae:	60da      	str	r2, [r3, #12]


		//Implement the code to enable interrupt for TC
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cbe:	60da      	str	r2, [r3, #12]

	}

	return txstate;
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <USART_ReceiveDataIT>:
 * @return            - Rx state
 *
 * @Note 	      	  - None
 *
 **********************************************************************************/
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len){
 8000cce:	b480      	push	{r7}
 8000cd0:	b087      	sub	sp, #28
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]

	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce0:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX){
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d014      	beq.n	8000d12 <USART_ReceiveDataIT+0x44>
		pUSARTHandle->RxLen = Len;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0220 	orr.w	r2, r2, #32
 8000d10:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <USART_IRQInterruptConfig>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d133      	bne.n	8000d9e <USART_IRQInterruptConfig+0x7e>

		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b1f      	cmp	r3, #31
 8000d3a:	d80a      	bhi.n	8000d52 <USART_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <USART_IRQInterruptConfig+0xf4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <USART_IRQInterruptConfig+0xf4>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000d50:	e059      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d90f      	bls.n	8000d78 <USART_IRQInterruptConfig+0x58>
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d5c:	d80c      	bhi.n	8000d78 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <USART_IRQInterruptConfig+0xf8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	f002 021f 	and.w	r2, r2, #31
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a29      	ldr	r2, [pc, #164]	; (8000e18 <USART_IRQInterruptConfig+0xf8>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e046      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7c:	d943      	bls.n	8000e06 <USART_IRQInterruptConfig+0xe6>
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b5f      	cmp	r3, #95	; 0x5f
 8000d82:	d840      	bhi.n	8000e06 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <USART_IRQInterruptConfig+0xfc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <USART_IRQInterruptConfig+0xfc>)
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	e033      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){							/* IRQ numbers(range): 0, ... , 31 */
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b1f      	cmp	r3, #31
 8000da2:	d80a      	bhi.n	8000dba <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <USART_IRQInterruptConfig+0x100>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <USART_IRQInterruptConfig+0x100>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	e025      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64){	/* IRQ numbers(range): 32, ... , 63 */
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b1f      	cmp	r3, #31
 8000dbe:	d90f      	bls.n	8000de0 <USART_IRQInterruptConfig+0xc0>
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc4:	d80c      	bhi.n	8000de0 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <USART_IRQInterruptConfig+0x104>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	f002 021f 	and.w	r2, r2, #31
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <USART_IRQInterruptConfig+0x104>)
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e012      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
		} else if(IRQNumber >= 64 && IRQNumber < 96){	/* IRQ numbers(range): 64, ... , 95 */
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	d90f      	bls.n	8000e06 <USART_IRQInterruptConfig+0xe6>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b5f      	cmp	r3, #95	; 0x5f
 8000dea:	d80c      	bhi.n	8000e06 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <USART_IRQInterruptConfig+0x108>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <USART_IRQInterruptConfig+0x108>)
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	e7ff      	b.n	8000e06 <USART_IRQInterruptConfig+0xe6>
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000e104 	.word	0xe000e104
 8000e1c:	e000e108 	.word	0xe000e108
 8000e20:	e000e180 	.word	0xe000e180
 8000e24:	e000e184 	.word	0xe000e184
 8000e28:	e000e188 	.word	0xe000e188

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	4e0d      	ldr	r6, [pc, #52]	; (8000e64 <__libc_init_array+0x38>)
 8000e30:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e32:	1ba4      	subs	r4, r4, r6
 8000e34:	10a4      	asrs	r4, r4, #2
 8000e36:	2500      	movs	r5, #0
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	4e0b      	ldr	r6, [pc, #44]	; (8000e6c <__libc_init_array+0x40>)
 8000e3e:	4c0c      	ldr	r4, [pc, #48]	; (8000e70 <__libc_init_array+0x44>)
 8000e40:	f000 f818 	bl	8000e74 <_init>
 8000e44:	1ba4      	subs	r4, r4, r6
 8000e46:	10a4      	asrs	r4, r4, #2
 8000e48:	2500      	movs	r5, #0
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000e8c 	.word	0x08000e8c
 8000e68:	08000e8c 	.word	0x08000e8c
 8000e6c:	08000e8c 	.word	0x08000e8c
 8000e70:	08000e90 	.word	0x08000e90

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
