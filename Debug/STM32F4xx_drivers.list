
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d74  08000d74  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d74  08000d74  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000d74  08000d74  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d74  08000d74  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000414  08001190  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08001190  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d9f  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000614  00000000  00000000  000221e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002e06  00000000  00000000  00022ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017d8  00000000  00000000  000258c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ae3a  00000000  00000000  0002709e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000530  00000000  00000000  00031f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000414 	.word	0x20000414
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d5c 	.word	0x08000d5c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000418 	.word	0x20000418
 80001d0:	08000d5c 	.word	0x08000d5c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART2_Init>:

char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	usart2_handle.pUSARTx = USART1;
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <USART2_Init+0x3c>)
 80001ea:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <USART2_Init+0x40>)
 80001ec:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <USART2_Init+0x3c>)
 80001f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80001f4:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <USART2_Init+0x3c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <USART2_Init+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <USART2_Init+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <USART2_Init+0x3c>)
 800020a:	2200      	movs	r2, #0
 800020c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <USART2_Init+0x3c>)
 8000210:	2200      	movs	r2, #0
 8000212:	739a      	strb	r2, [r3, #14]

	USART_Init(&usart2_handle);
 8000214:	4802      	ldr	r0, [pc, #8]	; (8000220 <USART2_Init+0x3c>)
 8000216:	f000 fcad 	bl	8000b74 <USART_Init>
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000430 	.word	0x20000430
 8000224:	40011000 	.word	0x40011000

08000228 <USART2_GPIOInit>:

void USART2_GPIOInit(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <USART2_GPIOInit+0x40>)
 8000230:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000232:	2302      	movs	r3, #2
 8000234:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000236:	2300      	movs	r3, #0
 8000238:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800023a:	2300      	movs	r3, #0
 800023c:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000242:	2307      	movs	r3, #7
 8000244:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_9;
 8000246:	2309      	movs	r3, #9
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f92d 	bl	80004ac <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000252:	230a      	movs	r3, #10
 8000254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f927 	bl	80004ac <GPIO_Init>

}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40020000 	.word	0x40020000

0800026c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <GPIO_ButtonInit+0x2c>)
 8000274:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000276:	2304      	movs	r3, #4
 8000278:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027a:	2300      	movs	r3, #0
 800027c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000282:	2300      	movs	r3, #0
 8000284:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f90f 	bl	80004ac <GPIO_Init>

}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020800 	.word	0x40020800

0800029c <delay>:

void delay(void){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	e002      	b.n	80002ae <delay+0x12>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <delay+0x28>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d9f8      	bls.n	80002a8 <delay+0xc>
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	0003d08f 	.word	0x0003d08f

080002c8 <main>:

int main(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002cc:	f7ff ffce 	bl	800026c <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002d0:	f7ff ffaa 	bl	8000228 <USART2_GPIOInit>

    USART2_Init();
 80002d4:	f7ff ff86 	bl	80001e4 <USART2_Init>

    USART_PeripheralControl(USART1, ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	480b      	ldr	r0, [pc, #44]	; (8000308 <main+0x40>)
 80002dc:	f000 fb4e 	bl	800097c <USART_PeripheralControl>

    while(1){

    	//wait till button is pressed
    	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4)){};
 80002e0:	bf00      	nop
 80002e2:	2104      	movs	r1, #4
 80002e4:	4809      	ldr	r0, [pc, #36]	; (800030c <main+0x44>)
 80002e6:	f000 fa83 	bl	80007f0 <GPIO_ReadFromInputPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f8      	bne.n	80002e2 <main+0x1a>

   		//to avoid button de-bouncing related issues 200ms of delay
   		delay();
 80002f0:	f7ff ffd4 	bl	800029c <delay>

   		USART_SendData(&usart2_handle,(uint8_t*)msg, strlen(msg));
 80002f4:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x48>)
 80002f6:	f7ff ff6d 	bl	80001d4 <strlen>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4904      	ldr	r1, [pc, #16]	; (8000310 <main+0x48>)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <main+0x4c>)
 8000302:	f000 fcba 	bl	8000c7a <USART_SendData>
    	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4)){};
 8000306:	e7eb      	b.n	80002e0 <main+0x18>
 8000308:	40011000 	.word	0x40011000
 800030c:	40020800 	.word	0x40020800
 8000310:	20000000 	.word	0x20000000
 8000314:	20000430 	.word	0x20000430

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490e      	ldr	r1, [pc, #56]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0b      	ldr	r4, [pc, #44]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000342:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 fce5 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffbd 	bl	80002c8 <main>

0800034e <LoopForever>:

LoopForever:
    b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 800035c:	08000d7c 	.word	0x08000d7c
  ldr r2, =_sbss
 8000360:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000364:	20000454 	.word	0x20000454

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d141      	bne.n	8000402 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a43      	ldr	r2, [pc, #268]	; (8000490 <GPIO_PeriClockControl+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000386:	4b43      	ldr	r3, [pc, #268]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a42      	ldr	r2, [pc, #264]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000392:	e077      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a40      	ldr	r2, [pc, #256]	; (8000498 <GPIO_PeriClockControl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a3c      	ldr	r2, [pc, #240]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e06c      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a3b      	ldr	r2, [pc, #236]	; (800049c <GPIO_PeriClockControl+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003b2:	4b38      	ldr	r3, [pc, #224]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e061      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a37      	ldr	r2, [pc, #220]	; (80004a0 <GPIO_PeriClockControl+0x134>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003c8:	4b32      	ldr	r3, [pc, #200]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a31      	ldr	r2, [pc, #196]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e056      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a32      	ldr	r2, [pc, #200]	; (80004a4 <GPIO_PeriClockControl+0x138>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a2c      	ldr	r2, [pc, #176]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e04b      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a2e      	ldr	r2, [pc, #184]	; (80004a8 <GPIO_PeriClockControl+0x13c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d147      	bne.n	8000484 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a26      	ldr	r2, [pc, #152]	; (8000494 <GPIO_PeriClockControl+0x128>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e040      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a22      	ldr	r2, [pc, #136]	; (8000490 <GPIO_PeriClockControl+0x124>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800040a:	4b22      	ldr	r3, [pc, #136]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a21      	ldr	r2, [pc, #132]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e035      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <GPIO_PeriClockControl+0x12c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000420:	4b1c      	ldr	r3, [pc, #112]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a1b      	ldr	r2, [pc, #108]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000426:	f023 0302 	bic.w	r3, r3, #2
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e02a      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a1a      	ldr	r2, [pc, #104]	; (800049c <GPIO_PeriClockControl+0x130>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800043c:	f023 0304 	bic.w	r3, r3, #4
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e01f      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a16      	ldr	r2, [pc, #88]	; (80004a0 <GPIO_PeriClockControl+0x134>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000452:	f023 0308 	bic.w	r3, r3, #8
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e014      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <GPIO_PeriClockControl+0x138>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <GPIO_PeriClockControl+0x128>)
 8000468:	f023 0310 	bic.w	r3, r3, #16
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e009      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <GPIO_PeriClockControl+0x13c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d105      	bne.n	8000484 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <GPIO_PeriClockControl+0x128>)
 800047e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40020000 	.word	0x40020000
 8000494:	40023800 	.word	0x40023800
 8000498:	40020400 	.word	0x40020400
 800049c:	40020800 	.word	0x40020800
 80004a0:	40020c00 	.word	0x40020c00
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40021c00 	.word	0x40021c00

080004ac <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff54 	bl	800036c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d822      	bhi.n	8000512 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	2103      	movs	r1, #3
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6819      	ldr	r1, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	697a      	ldr	r2, [r7, #20]
 8000508:	430a      	orrs	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	e0ca      	b.n	80006a8 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	795b      	ldrb	r3, [r3, #5]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d117      	bne.n	800054a <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051a:	4b43      	ldr	r3, [pc, #268]	; (8000628 <GPIO_Init+0x17c>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	7912      	ldrb	r2, [r2, #4]
 8000522:	4611      	mov	r1, r2
 8000524:	2201      	movs	r2, #1
 8000526:	408a      	lsls	r2, r1
 8000528:	4611      	mov	r1, r2
 800052a:	4a3f      	ldr	r2, [pc, #252]	; (8000628 <GPIO_Init+0x17c>)
 800052c:	430b      	orrs	r3, r1
 800052e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <GPIO_Init+0x17c>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7912      	ldrb	r2, [r2, #4]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a39      	ldr	r2, [pc, #228]	; (8000628 <GPIO_Init+0x17c>)
 8000544:	400b      	ands	r3, r1
 8000546:	6093      	str	r3, [r2, #8]
 8000548:	e035      	b.n	80005b6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b05      	cmp	r3, #5
 8000550:	d117      	bne.n	8000582 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <GPIO_Init+0x17c>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7912      	ldrb	r2, [r2, #4]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	4611      	mov	r1, r2
 8000562:	4a31      	ldr	r2, [pc, #196]	; (8000628 <GPIO_Init+0x17c>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <GPIO_Init+0x17c>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	7912      	ldrb	r2, [r2, #4]
 8000570:	4611      	mov	r1, r2
 8000572:	2201      	movs	r2, #1
 8000574:	408a      	lsls	r2, r1
 8000576:	43d2      	mvns	r2, r2
 8000578:	4611      	mov	r1, r2
 800057a:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <GPIO_Init+0x17c>)
 800057c:	400b      	ands	r3, r1
 800057e:	60d3      	str	r3, [r2, #12]
 8000580:	e019      	b.n	80005b6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	2b06      	cmp	r3, #6
 8000588:	d115      	bne.n	80005b6 <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b27      	ldr	r3, [pc, #156]	; (8000628 <GPIO_Init+0x17c>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	4611      	mov	r1, r2
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <GPIO_Init+0x17c>)
 800059c:	430b      	orrs	r3, r1
 800059e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <GPIO_Init+0x17c>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7912      	ldrb	r2, [r2, #4]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <GPIO_Init+0x17c>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <GPIO_Init+0x180>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <GPIO_Init+0x180>)
 80005bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c0:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	f003 0303 	and.w	r3, r3, #3
 80005d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <GPIO_Init+0x184>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d034      	beq.n	8000648 <GPIO_Init+0x19c>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <GPIO_Init+0x188>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d01d      	beq.n	8000624 <GPIO_Init+0x178>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <GPIO_Init+0x18c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d016      	beq.n	8000620 <GPIO_Init+0x174>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <GPIO_Init+0x190>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00f      	beq.n	800061c <GPIO_Init+0x170>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <GPIO_Init+0x194>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d008      	beq.n	8000618 <GPIO_Init+0x16c>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <GPIO_Init+0x198>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d101      	bne.n	8000614 <GPIO_Init+0x168>
 8000610:	2307      	movs	r3, #7
 8000612:	e01a      	b.n	800064a <GPIO_Init+0x19e>
 8000614:	2300      	movs	r3, #0
 8000616:	e018      	b.n	800064a <GPIO_Init+0x19e>
 8000618:	2304      	movs	r3, #4
 800061a:	e016      	b.n	800064a <GPIO_Init+0x19e>
 800061c:	2303      	movs	r3, #3
 800061e:	e014      	b.n	800064a <GPIO_Init+0x19e>
 8000620:	2302      	movs	r3, #2
 8000622:	e012      	b.n	800064a <GPIO_Init+0x19e>
 8000624:	2301      	movs	r3, #1
 8000626:	e010      	b.n	800064a <GPIO_Init+0x19e>
 8000628:	40013c00 	.word	0x40013c00
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	40020800 	.word	0x40020800
 800063c:	40020c00 	.word	0x40020c00
 8000640:	40021000 	.word	0x40021000
 8000644:	40021c00 	.word	0x40021c00
 8000648:	2300      	movs	r3, #0
 800064a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 800064c:	4a66      	ldr	r2, [pc, #408]	; (80007e8 <GPIO_Init+0x33c>)
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	3302      	adds	r3, #2
 8000652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000656:	7cbb      	ldrb	r3, [r7, #18]
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	210f      	movs	r1, #15
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	4960      	ldr	r1, [pc, #384]	; (80007e8 <GPIO_Init+0x33c>)
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	4002      	ands	r2, r0
 800066a:	3302      	adds	r3, #2
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 8000670:	4a5d      	ldr	r2, [pc, #372]	; (80007e8 <GPIO_Init+0x33c>)
 8000672:	7cfb      	ldrb	r3, [r7, #19]
 8000674:	3302      	adds	r3, #2
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	7c79      	ldrb	r1, [r7, #17]
 800067c:	7cbb      	ldrb	r3, [r7, #18]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	4618      	mov	r0, r3
 8000686:	4958      	ldr	r1, [pc, #352]	; (80007e8 <GPIO_Init+0x33c>)
 8000688:	7cfb      	ldrb	r3, [r7, #19]
 800068a:	4302      	orrs	r2, r0
 800068c:	3302      	adds	r3, #2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000692:	4b56      	ldr	r3, [pc, #344]	; (80007ec <GPIO_Init+0x340>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	7912      	ldrb	r2, [r2, #4]
 800069a:	4611      	mov	r1, r2
 800069c:	2201      	movs	r2, #1
 800069e:	408a      	lsls	r2, r1
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a52      	ldr	r2, [pc, #328]	; (80007ec <GPIO_Init+0x340>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	2103      	movs	r1, #3
 80006cc:	fa01 f303 	lsl.w	r3, r1, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6899      	ldr	r1, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	2103      	movs	r1, #3
 8000710:	fa01 f303 	lsl.w	r3, r1, r3
 8000714:	43db      	mvns	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	400a      	ands	r2, r1
 800071e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68d9      	ldr	r1, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	697a      	ldr	r2, [r7, #20]
 800072c:	430a      	orrs	r2, r1
 800072e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7a1b      	ldrb	r3, [r3, #8]
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	2301      	movs	r3, #1
 8000752:	408b      	lsls	r3, r1
 8000754:	43db      	mvns	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	400a      	ands	r2, r1
 800075e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6859      	ldr	r1, [r3, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	430a      	orrs	r2, r1
 800076e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d131      	bne.n	80007e0 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	7c3a      	ldrb	r2, [r7, #16]
 8000794:	3208      	adds	r2, #8
 8000796:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	220f      	movs	r2, #15
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	7c3a      	ldrb	r2, [r7, #16]
 80007ae:	4001      	ands	r1, r0
 80007b0:	3208      	adds	r2, #8
 80007b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	7c3a      	ldrb	r2, [r7, #16]
 80007bc:	3208      	adds	r2, #8
 80007be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7a5b      	ldrb	r3, [r3, #9]
 80007c6:	461a      	mov	r2, r3
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7c3a      	ldrb	r2, [r7, #16]
 80007d8:	4301      	orrs	r1, r0
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40013c00 	.word	0x40013c00

080007f0 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691a      	ldr	r2, [r3, #16]
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	fa22 f303 	lsr.w	r3, r2, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]

	return value;
 800080e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <RCC_GetPCLK1Value>:
#include "stm32f401xx_rcc_driver.h"

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <RCC_GetPCLK1Value+0x9c>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000830:	7a7b      	ldrb	r3, [r7, #9]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <RCC_GetPCLK1Value+0xa0>)
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00b      	b.n	8000854 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 800083c:	7a7b      	ldrb	r3, [r7, #9]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d102      	bne.n	8000848 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <RCC_GetPCLK1Value+0xa4>)
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e005      	b.n	8000854 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2){
 8000848:	7a7b      	ldrb	r3, [r7, #9]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d102      	bne.n	8000854 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800084e:	f000 f88d 	bl	800096c <RCC_GetPLLOutputClock>
 8000852:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <RCC_GetPCLK1Value+0x9c>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	b2db      	uxtb	r3, r3
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	2b07      	cmp	r3, #7
 8000866:	d802      	bhi.n	800086e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	72fb      	strb	r3, [r7, #11]
 800086c:	e005      	b.n	800087a <RCC_GetPCLK1Value+0x5e>
	} else{
		ahbp = AHB_PreScaler[temp-8];
 800086e:	7a3b      	ldrb	r3, [r7, #8]
 8000870:	3b08      	subs	r3, #8
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <RCC_GetPCLK1Value+0xa8>)
 8000874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000878:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <RCC_GetPCLK1Value+0x9c>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	0a9b      	lsrs	r3, r3, #10
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000888:	7a3b      	ldrb	r3, [r7, #8]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d802      	bhi.n	8000894 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	72bb      	strb	r3, [r7, #10]
 8000892:	e004      	b.n	800089e <RCC_GetPCLK1Value+0x82>
	} else{
		apb1p = APB1_PreScaler[temp-4];
 8000894:	7a3b      	ldrb	r3, [r7, #8]
 8000896:	3b04      	subs	r3, #4
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <RCC_GetPCLK1Value+0xac>)
 800089a:	5cd3      	ldrb	r3, [r2, r3]
 800089c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp)/apb1p;
 800089e:	7afb      	ldrb	r3, [r7, #11]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a6:	7abb      	ldrb	r3, [r7, #10]
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	00f42400 	.word	0x00f42400
 80008c0:	007a1200 	.word	0x007a1200
 80008c4:	20000400 	.word	0x20000400
 80008c8:	20000410 	.word	0x20000410

080008cc <RCC_GetPCLK2Value>:
 *
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0

	uint32_t SystemClock = 0, tmp, pclk2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = (RCC->CFGR >> 2) & 0X3;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <RCC_GetPCLK2Value+0x8c>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp, apb2p;

	if(clk_src == 0){
 80008e4:	7a7b      	ldrb	r3, [r7, #9]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <RCC_GetPCLK2Value+0x24>
		SystemClock = 16000000;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <RCC_GetPCLK2Value+0x90>)
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e001      	b.n	80008f4 <RCC_GetPCLK2Value+0x28>
	} else{
		SystemClock = 8000000;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <RCC_GetPCLK2Value+0x94>)
 80008f2:	60fb      	str	r3, [r7, #12]
	}

	tmp = (RCC->CFGR >> 4) & 0xF;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <RCC_GetPCLK2Value+0x8c>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d802      	bhi.n	800090c <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	72fb      	strb	r3, [r7, #11]
 800090a:	e005      	b.n	8000918 <RCC_GetPCLK2Value+0x4c>
	} else{
       ahbp = AHB_PreScaler[tmp-8];
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b08      	subs	r3, #8
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <RCC_GetPCLK2Value+0x98>)
 8000912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000916:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13) & 0x7;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <RCC_GetPCLK2Value+0x8c>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	0b5b      	lsrs	r3, r3, #13
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d802      	bhi.n	8000930 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	72bb      	strb	r3, [r7, #10]
 800092e:	e004      	b.n	800093a <RCC_GetPCLK2Value+0x6e>
	} else{
		apb2p = APB1_PreScaler[tmp-4];
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b04      	subs	r3, #4
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <RCC_GetPCLK2Value+0x9c>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp)/apb2p;
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000942:	7abb      	ldrb	r3, [r7, #10]
 8000944:	fbb2 f3f3 	udiv	r3, r2, r3
 8000948:	603b      	str	r3, [r7, #0]

	return pclk2;
 800094a:	683b      	ldr	r3, [r7, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40023800 	.word	0x40023800
 800095c:	00f42400 	.word	0x00f42400
 8000960:	007a1200 	.word	0x007a1200
 8000964:	20000400 	.word	0x20000400
 8000968:	20000410 	.word	0x20000410

0800096c <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock(){
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <USART_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d106      	bne.n	800099c <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << 13);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60da      	str	r2, [r3, #12]
	} else{
		pUSARTx->CR1 &= ~(1 << 13);
	}
}
 800099a:	e005      	b.n	80009a8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60da      	str	r2, [r3, #12]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <USART_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 ***********************************************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d120      	bne.n	8000a08 <USART_PeriClockControl+0x54>
		if(pUSARTx == USART1){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <USART_PeriClockControl+0xa0>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d106      	bne.n	80009dc <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <USART_PeriClockControl+0xa4>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <USART_PeriClockControl+0xa4>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
			USART2_PCCK_DI();
		} else if(pUSARTx == USART6){
			USART6_PCCK_DI();
		}
	}
}
 80009da:	e035      	b.n	8000a48 <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <USART_PeriClockControl+0xa8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d106      	bne.n	80009f2 <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <USART_PeriClockControl+0xa4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <USART_PeriClockControl+0xa4>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f0:	e02a      	b.n	8000a48 <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <USART_PeriClockControl+0xac>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d126      	bne.n	8000a48 <USART_PeriClockControl+0x94>
			USART6_PCCK_EN();
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <USART_PeriClockControl+0xa4>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a06:	e01f      	b.n	8000a48 <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <USART_PeriClockControl+0xa0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d106      	bne.n	8000a1e <USART_PeriClockControl+0x6a>
			USART1_PCCK_DI();
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a16:	f023 0310 	bic.w	r3, r3, #16
 8000a1a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a1c:	e014      	b.n	8000a48 <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART2){
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <USART_PeriClockControl+0xa8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d106      	bne.n	8000a34 <USART_PeriClockControl+0x80>
			USART2_PCCK_DI();
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a32:	e009      	b.n	8000a48 <USART_PeriClockControl+0x94>
		} else if(pUSARTx == USART6){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <USART_PeriClockControl+0xac>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d105      	bne.n	8000a48 <USART_PeriClockControl+0x94>
			USART6_PCCK_DI();
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <USART_PeriClockControl+0xa4>)
 8000a42:	f023 0320 	bic.w	r3, r3, #32
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40011400 	.word	0x40011400

08000a64 <USART_GetFlagStatus>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 ************************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName){
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	70fb      	strb	r3, [r7, #3]

    if(pUSARTx->SR & StatusFlagName){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <USART_GetFlagStatus+0x1c>
    	return SET;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <USART_SetBaudRate>:
 * @return            - None
 *
 * @Note              - None
 *
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <USART_SetBaudRate+0xd8>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d003      	beq.n	8000aae <USART_SetBaudRate+0x1e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <USART_SetBaudRate+0xdc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d103      	bne.n	8000ab6 <USART_SetBaudRate+0x26>
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000aae:	f7ff ff0d 	bl	80008cc <RCC_GetPCLK2Value>
 8000ab2:	61f8      	str	r0, [r7, #28]
 8000ab4:	e002      	b.n	8000abc <USART_SetBaudRate+0x2c>
	} else{
	   PCLKx = RCC_GetPCLK1Value();
 8000ab6:	f7ff feb1 	bl	800081c <RCC_GetPCLK1Value>
 8000aba:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00b      	beq.n	8000ae0 <USART_SetBaudRate+0x50>
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000ac8:	69fa      	ldr	r2, [r7, #28]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009a      	lsls	r2, r3, #2
 8000ad2:	441a      	add	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	e00a      	b.n	8000af6 <USART_SetBaudRate+0x66>
	} else{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009a      	lsls	r2, r3, #2
 8000aea:	441a      	add	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af4:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <USART_SetBaudRate+0xe0>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position. refer USART_BRR
	tempreg |= M_part << 4;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2264      	movs	r2, #100	; 0x64
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00a      	beq.n	8000b3c <USART_SetBaudRate+0xac>
	  //OVER8 = 1, over sampling by 8
	  F_part = ((( F_part * 8) + 50) / 100) & ((uint8_t)0x07); // 50 is a round factor
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	3332      	adds	r3, #50	; 0x32
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <USART_SetBaudRate+0xe0>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <USART_SetBaudRate+0xc0>

	} else{
	   //over sampling by 16
	   F_part = ((( F_part * 16) + 50) / 100) & ((uint8_t)0x0F); // 50 is a round factor
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	3332      	adds	r3, #50	; 0x32
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <USART_SetBaudRate+0xe0>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	095b      	lsrs	r3, r3, #5
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position. refer USART_BRR
	tempreg |= F_part;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40011400 	.word	0x40011400
 8000b70:	51eb851f 	.word	0x51eb851f

08000b74 <USART_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff14 	bl	80009b4 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d104      	bne.n	8000b9e <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e010      	b.n	8000bc0 <USART_Init+0x4c>
	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	791b      	ldrb	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d104      	bne.n	8000bb0 <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e007      	b.n	8000bc0 <USART_Init+0x4c>

	} else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX){
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d103      	bne.n	8000bc0 <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f043 030c 	orr.w	r3, r3, #12
 8000bbe:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7b5b      	ldrb	r3, [r3, #13]
 8000bc4:	031b      	lsls	r3, r3, #12
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7b9b      	ldrb	r3, [r3, #14]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <USART_Init+0x6c>
		//Implement the code to enale the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	e00b      	b.n	8000bf8 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	} else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7b9b      	ldrb	r3, [r3, #14]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d107      	bne.n	8000bf8 <USART_Init+0x84>
		//Implement the code to enable the parity control
	    tempreg |= (1 << USART_CR1_PCE);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bee:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= (1 << USART_CR1_PS);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b1b      	ldrb	r3, [r3, #12]
 8000c08:	031b      	lsls	r3, r3, #12
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7bdb      	ldrb	r3, [r3, #15]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d104      	bne.n	8000c30 <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e014      	b.n	8000c5a <USART_Init+0xe6>


	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7bdb      	ldrb	r3, [r3, #15]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d104      	bne.n	8000c42 <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	e00b      	b.n	8000c5a <USART_Init+0xe6>

	} else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7bdb      	ldrb	r3, [r3, #15]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d107      	bne.n	8000c5a <USART_Init+0xe6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c50:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	f7ff ff0f 	bl	8000a90 <USART_SetBaudRate>

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <USART_SendData>:
 *
 * @return            -
 *
 * @Note              - Resolve all the TODOs
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0; i < Len; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e031      	b.n	8000cf0 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000c8c:	bf00      	nop
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fee5 	bl	8000a64 <USART_GetFlagStatus>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f6      	beq.n	8000c8e <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	7b5b      	ldrb	r3, [r3, #13]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d118      	bne.n	8000cda <USART_SendData+0x60>
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cba:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	7b9b      	ldrb	r3, [r3, #14]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d106      	bne.n	8000cd2 <USART_SendData+0x58>
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	e00b      	b.n	8000cea <USART_SendData+0x70>
			} else{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	e007      	b.n	8000cea <USART_SendData+0x70>
			}
		} else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++){
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d3c9      	bcc.n	8000c8c <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000cf8:	bf00      	nop
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff feaf 	bl	8000a64 <USART_GetFlagStatus>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f6      	beq.n	8000cfa <USART_SendData+0x80>

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4e0d      	ldr	r6, [pc, #52]	; (8000d4c <__libc_init_array+0x38>)
 8000d18:	4c0d      	ldr	r4, [pc, #52]	; (8000d50 <__libc_init_array+0x3c>)
 8000d1a:	1ba4      	subs	r4, r4, r6
 8000d1c:	10a4      	asrs	r4, r4, #2
 8000d1e:	2500      	movs	r5, #0
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	4e0b      	ldr	r6, [pc, #44]	; (8000d54 <__libc_init_array+0x40>)
 8000d26:	4c0c      	ldr	r4, [pc, #48]	; (8000d58 <__libc_init_array+0x44>)
 8000d28:	f000 f818 	bl	8000d5c <_init>
 8000d2c:	1ba4      	subs	r4, r4, r6
 8000d2e:	10a4      	asrs	r4, r4, #2
 8000d30:	2500      	movs	r5, #0
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d3c:	4798      	blx	r3
 8000d3e:	3501      	adds	r5, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d46:	4798      	blx	r3
 8000d48:	3501      	adds	r5, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000d74 	.word	0x08000d74
 8000d50:	08000d74 	.word	0x08000d74
 8000d54:	08000d74 	.word	0x08000d74
 8000d58:	08000d78 	.word	0x08000d78

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
