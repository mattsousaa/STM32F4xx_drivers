
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ec8  08000ec8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ec8  08000ec8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000ec8  08000ec8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ec8  08000ec8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000018  08000ee8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000ee8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd8  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000524  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00022148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  000222b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022f6  00000000  00000000  000223e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012b0  00000000  00000000  000246d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000090dd  00000000  00000000  00025986  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ea63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000508  00000000  00000000  0002eae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000eb0 	.word	0x08000eb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000eb0 	.word	0x08000eb0

080001d4 <delay>:

#define MY_ADDR 	0x61

#define SLAVE_ADDR  0x68

void delay(void){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <I2C1_GPIOInits>:
/*
 * PA8-> SCL // 28
 * PB4-> SDA // 27
 */

void I2C1_GPIOInits(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <I2C1_GPIOInits+0x40>)
 8000208:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800020e:	2301      	movs	r3, #1
 8000210:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000212:	2301      	movs	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800021e:	2306      	movs	r3, #6
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f959 	bl	80004dc <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022a:	2307      	movs	r3, #7
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f953 	bl	80004dc <GPIO_Init>

}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <I2C1_Inits>:

void I2C1_Inits(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <I2C1_Inits+0x2c>)
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <I2C1_Inits+0x30>)
 800024c:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <I2C1_Inits+0x2c>)
 8000250:	2201      	movs	r2, #1
 8000252:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <I2C1_Inits+0x2c>)
 8000256:	2261      	movs	r2, #97	; 0x61
 8000258:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <I2C1_Inits+0x2c>)
 800025c:	2200      	movs	r2, #0
 800025e:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <I2C1_Inits+0x2c>)
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <I2C1_Inits+0x34>)
 8000264:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000266:	4802      	ldr	r0, [pc, #8]	; (8000270 <I2C1_Inits+0x2c>)
 8000268:	f000 fbd4 	bl	8000a14 <I2C_Init>

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000034 	.word	0x20000034
 8000274:	40005400 	.word	0x40005400
 8000278:	000186a0 	.word	0x000186a0

0800027c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <GPIO_ButtonInit+0x2c>)
 8000284:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000286:	2304      	movs	r3, #4
 8000288:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028a:	2300      	movs	r3, #0
 800028c:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028e:	2302      	movs	r3, #2
 8000290:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 f91f 	bl	80004dc <GPIO_Init>

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40020800 	.word	0x40020800

080002ac <main>:

int main(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af02      	add	r7, sp, #8

	uint8_t commandcode;

	uint8_t len;

	GPIO_ButtonInit();
 80002b2:	f7ff ffe3 	bl	800027c <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002b6:	f7ff ffa3 	bl	8000200 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ba:	f7ff ffc3 	bl	8000244 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	481d      	ldr	r0, [pc, #116]	; (8000338 <main+0x8c>)
 80002c2:	f000 fb8b 	bl	80009dc <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	481b      	ldr	r0, [pc, #108]	; (8000338 <main+0x8c>)
 80002ca:	f000 fb13 	bl	80008f4 <I2C_ManageAcking>

	while(1){
		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 80002ce:	bf00      	nop
 80002d0:	2104      	movs	r1, #4
 80002d2:	481a      	ldr	r0, [pc, #104]	; (800033c <main+0x90>)
 80002d4:	f000 faa4 	bl	8000820 <GPIO_ReadFromInputPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f8      	bne.n	80002d0 <main+0x24>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002de:	f7ff ff79 	bl	80001d4 <delay>

		commandcode = 0x51;
 80002e2:	2351      	movs	r3, #81	; 0x51
 80002e4:	71fb      	strb	r3, [r7, #7]

		I2C_MasterSendData(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR);
 80002e6:	1df9      	adds	r1, r7, #7
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2368      	movs	r3, #104	; 0x68
 80002ee:	2201      	movs	r2, #1
 80002f0:	4813      	ldr	r0, [pc, #76]	; (8000340 <main+0x94>)
 80002f2:	f000 fc65 	bl	8000bc0 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80002f6:	1db9      	adds	r1, r7, #6
 80002f8:	2301      	movs	r3, #1
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2368      	movs	r3, #104	; 0x68
 80002fe:	2201      	movs	r2, #1
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <main+0x94>)
 8000302:	f000 fcc0 	bl	8000c86 <I2C_MasterReceiveData>

		commandcode = 0x52;
 8000306:	2352      	movs	r3, #82	; 0x52
 8000308:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 800030a:	1df9      	adds	r1, r7, #7
 800030c:	2301      	movs	r3, #1
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2368      	movs	r3, #104	; 0x68
 8000312:	2201      	movs	r2, #1
 8000314:	480a      	ldr	r0, [pc, #40]	; (8000340 <main+0x94>)
 8000316:	f000 fc53 	bl	8000bc0 <I2C_MasterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR);
 800031a:	79ba      	ldrb	r2, [r7, #6]
 800031c:	2300      	movs	r3, #0
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2368      	movs	r3, #104	; 0x68
 8000322:	4908      	ldr	r1, [pc, #32]	; (8000344 <main+0x98>)
 8000324:	4806      	ldr	r0, [pc, #24]	; (8000340 <main+0x94>)
 8000326:	f000 fcae 	bl	8000c86 <I2C_MasterReceiveData>

		rcv_buf[len+1] = '\0';
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	3301      	adds	r3, #1
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <main+0x98>)
 8000330:	2100      	movs	r1, #0
 8000332:	54d1      	strb	r1, [r2, r3]
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_4));
 8000334:	e7cb      	b.n	80002ce <main+0x22>
 8000336:	bf00      	nop
 8000338:	40005400 	.word	0x40005400
 800033c:	40020800 	.word	0x40020800
 8000340:	20000034 	.word	0x20000034
 8000344:	2000005c 	.word	0x2000005c

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000372:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 fd77 	bl	8000e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ff97 	bl	80002ac <main>

0800037e <LoopForever>:

LoopForever:
    b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800038c:	08000ed0 	.word	0x08000ed0
  ldr r2, =_sbss
 8000390:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000394:	2000007c 	.word	0x2000007c

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d141      	bne.n	8000432 <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a43      	ldr	r2, [pc, #268]	; (80004c0 <GPIO_PeriClockControl+0x124>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a42      	ldr	r2, [pc, #264]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003c2:	e077      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a40      	ldr	r2, [pc, #256]	; (80004c8 <GPIO_PeriClockControl+0x12c>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003cc:	4b3d      	ldr	r3, [pc, #244]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a3c      	ldr	r2, [pc, #240]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e06c      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a3b      	ldr	r2, [pc, #236]	; (80004cc <GPIO_PeriClockControl+0x130>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a37      	ldr	r2, [pc, #220]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e061      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a37      	ldr	r2, [pc, #220]	; (80004d0 <GPIO_PeriClockControl+0x134>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003f8:	4b32      	ldr	r3, [pc, #200]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a31      	ldr	r2, [pc, #196]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e056      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <GPIO_PeriClockControl+0x138>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e04b      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a2e      	ldr	r2, [pc, #184]	; (80004d8 <GPIO_PeriClockControl+0x13c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d147      	bne.n	80004b4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 800042a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e040      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <GPIO_PeriClockControl+0x124>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e035      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <GPIO_PeriClockControl+0x12c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000456:	f023 0302 	bic.w	r3, r3, #2
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e02a      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <GPIO_PeriClockControl+0x130>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 800046c:	f023 0304 	bic.w	r3, r3, #4
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e01f      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <GPIO_PeriClockControl+0x134>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000482:	f023 0308 	bic.w	r3, r3, #8
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e014      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <GPIO_PeriClockControl+0x138>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 8000498:	f023 0310 	bic.w	r3, r3, #16
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e009      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <GPIO_PeriClockControl+0x13c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d105      	bne.n	80004b4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <GPIO_PeriClockControl+0x128>)
 80004ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021c00 	.word	0x40021c00

080004dc <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff54 	bl	800039c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d822      	bhi.n	8000542 <GPIO_Init+0x66>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	e0ca      	b.n	80006d8 <GPIO_Init+0x1fc>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d117      	bne.n	800057a <GPIO_Init+0x9e>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b43      	ldr	r3, [pc, #268]	; (8000658 <GPIO_Init+0x17c>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	4611      	mov	r1, r2
 800055a:	4a3f      	ldr	r2, [pc, #252]	; (8000658 <GPIO_Init+0x17c>)
 800055c:	430b      	orrs	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <GPIO_Init+0x17c>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	43d2      	mvns	r2, r2
 8000570:	4611      	mov	r1, r2
 8000572:	4a39      	ldr	r2, [pc, #228]	; (8000658 <GPIO_Init+0x17c>)
 8000574:	400b      	ands	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
 8000578:	e035      	b.n	80005e6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d117      	bne.n	80005b2 <GPIO_Init+0xd6>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <GPIO_Init+0x17c>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	4611      	mov	r1, r2
 8000592:	4a31      	ldr	r2, [pc, #196]	; (8000658 <GPIO_Init+0x17c>)
 8000594:	430b      	orrs	r3, r1
 8000596:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <GPIO_Init+0x17c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <GPIO_Init+0x17c>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e019      	b.n	80005e6 <GPIO_Init+0x10a>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d115      	bne.n	80005e6 <GPIO_Init+0x10a>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <GPIO_Init+0x17c>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <GPIO_Init+0x17c>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <GPIO_Init+0x17c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	4611      	mov	r1, r2
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <GPIO_Init+0x17c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <GPIO_Init+0x180>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <GPIO_Init+0x180>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	089b      	lsrs	r3, r3, #2
 80005f8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a15      	ldr	r2, [pc, #84]	; (8000660 <GPIO_Init+0x184>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d034      	beq.n	8000678 <GPIO_Init+0x19c>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <GPIO_Init+0x188>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d01d      	beq.n	8000654 <GPIO_Init+0x178>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <GPIO_Init+0x18c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d016      	beq.n	8000650 <GPIO_Init+0x174>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <GPIO_Init+0x190>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00f      	beq.n	800064c <GPIO_Init+0x170>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <GPIO_Init+0x194>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <GPIO_Init+0x16c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <GPIO_Init+0x198>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <GPIO_Init+0x168>
 8000640:	2307      	movs	r3, #7
 8000642:	e01a      	b.n	800067a <GPIO_Init+0x19e>
 8000644:	2300      	movs	r3, #0
 8000646:	e018      	b.n	800067a <GPIO_Init+0x19e>
 8000648:	2304      	movs	r3, #4
 800064a:	e016      	b.n	800067a <GPIO_Init+0x19e>
 800064c:	2303      	movs	r3, #3
 800064e:	e014      	b.n	800067a <GPIO_Init+0x19e>
 8000650:	2302      	movs	r3, #2
 8000652:	e012      	b.n	800067a <GPIO_Init+0x19e>
 8000654:	2301      	movs	r3, #1
 8000656:	e010      	b.n	800067a <GPIO_Init+0x19e>
 8000658:	40013c00 	.word	0x40013c00
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000
 8000664:	40020400 	.word	0x40020400
 8000668:	40020800 	.word	0x40020800
 800066c:	40020c00 	.word	0x40020c00
 8000670:	40021000 	.word	0x40021000
 8000674:	40021c00 	.word	0x40021c00
 8000678:	2300      	movs	r3, #0
 800067a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 800067c:	4a66      	ldr	r2, [pc, #408]	; (8000818 <GPIO_Init+0x33c>)
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	3302      	adds	r3, #2
 8000682:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000686:	7cbb      	ldrb	r3, [r7, #18]
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	210f      	movs	r1, #15
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	4960      	ldr	r1, [pc, #384]	; (8000818 <GPIO_Init+0x33c>)
 8000696:	7cfb      	ldrb	r3, [r7, #19]
 8000698:	4002      	ands	r2, r0
 800069a:	3302      	adds	r3, #2
 800069c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 80006a0:	4a5d      	ldr	r2, [pc, #372]	; (8000818 <GPIO_Init+0x33c>)
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	3302      	adds	r3, #2
 80006a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006aa:	7c79      	ldrb	r1, [r7, #17]
 80006ac:	7cbb      	ldrb	r3, [r7, #18]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	4958      	ldr	r1, [pc, #352]	; (8000818 <GPIO_Init+0x33c>)
 80006b8:	7cfb      	ldrb	r3, [r7, #19]
 80006ba:	4302      	orrs	r2, r0
 80006bc:	3302      	adds	r3, #2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006c2:	4b56      	ldr	r3, [pc, #344]	; (800081c <GPIO_Init+0x340>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a52      	ldr	r2, [pc, #328]	; (800081c <GPIO_Init+0x340>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6899      	ldr	r1, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	430a      	orrs	r2, r1
 800071a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	2103      	movs	r1, #3
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	4619      	mov	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	400a      	ands	r2, r1
 800074e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68d9      	ldr	r1, [r3, #12]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	430a      	orrs	r2, r1
 800075e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7a1b      	ldrb	r3, [r3, #8]
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	4619      	mov	r1, r3
 8000780:	2301      	movs	r3, #1
 8000782:	408b      	lsls	r3, r1
 8000784:	43db      	mvns	r3, r3
 8000786:	4619      	mov	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	400a      	ands	r2, r1
 800078e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6859      	ldr	r1, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	430a      	orrs	r2, r1
 800079e:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d131      	bne.n	8000810 <GPIO_Init+0x334>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	7c3a      	ldrb	r2, [r7, #16]
 80007c4:	3208      	adds	r2, #8
 80007c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	220f      	movs	r2, #15
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	4001      	ands	r1, r0
 80007e0:	3208      	adds	r2, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7c3a      	ldrb	r2, [r7, #16]
 80007ec:	3208      	adds	r2, #8
 80007ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7a5b      	ldrb	r3, [r3, #9]
 80007f6:	461a      	mov	r2, r3
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	4618      	mov	r0, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	7c3a      	ldrb	r2, [r7, #16]
 8000808:	4301      	orrs	r1, r0
 800080a:	3208      	adds	r2, #8
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <GPIO_ReadFromInputPin>:
 *
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	fa22 f303 	lsr.w	r3, r2, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]

	return value;
 800083e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <RCC_GetPCLK1Value>:
uint32_t RCC_GetPLLOutputClock();

uint16_t AHB_Prescaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_Prescaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void){
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <RCC_GetPCLK1Value+0x94>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 0303 	and.w	r3, r3, #3
 800085e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <RCC_GetPCLK1Value+0x98>)
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	e004      	b.n	8000876 <RCC_GetPCLK1Value+0x2a>

	} else if(clksrc == 1){
 800086c:	7a7b      	ldrb	r3, [r7, #9]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <RCC_GetPCLK1Value+0x2a>
		SystemClk = 8000000;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <RCC_GetPCLK1Value+0x9c>)
 8000874:	60fb      	str	r3, [r7, #12]
	} else if(clksrc == 2){
		//SystemClk = RCC_GetPLLOutputClock();
	}

	//AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <RCC_GetPCLK1Value+0x94>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000884:	7a3b      	ldrb	r3, [r7, #8]
 8000886:	2b07      	cmp	r3, #7
 8000888:	d802      	bhi.n	8000890 <RCC_GetPCLK1Value+0x44>
		ahbp = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	72fb      	strb	r3, [r7, #11]
 800088e:	e005      	b.n	800089c <RCC_GetPCLK1Value+0x50>
	} else{
		ahbp = AHB_Prescaler[temp - 8];
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	3b08      	subs	r3, #8
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <RCC_GetPCLK1Value+0xa0>)
 8000896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800089a:	72fb      	strb	r3, [r7, #11]
	}

	//APB1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <RCC_GetPCLK1Value+0x94>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	0a9b      	lsrs	r3, r3, #10
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f003 0307 	and.w	r3, r3, #7
 80008a8:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 80008aa:	7a3b      	ldrb	r3, [r7, #8]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d802      	bhi.n	80008b6 <RCC_GetPCLK1Value+0x6a>
		apb1 = 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	72bb      	strb	r3, [r7, #10]
 80008b4:	e005      	b.n	80008c2 <RCC_GetPCLK1Value+0x76>
	} else{
		apb1 = APB1_Prescaler[temp - 4];
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	3b04      	subs	r3, #4
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <RCC_GetPCLK1Value+0xa4>)
 80008bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp)/apb1;
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ca:	7abb      	ldrb	r3, [r7, #10]
 80008cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40023800 	.word	0x40023800
 80008e4:	00f42400 	.word	0x00f42400
 80008e8:	007a1200 	.word	0x007a1200
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000010 	.word	0x20000010

080008f4 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE){
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d106      	bne.n	8000914 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
	} else{
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000912:	e005      	b.n	8000920 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <I2C_PeriClockControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *********************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d120      	bne.n	8000980 <I2C_PeriClockControl+0x54>
		if(pI2Cx == I2C1){
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <I2C_PeriClockControl+0xa0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		}else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 8000952:	e035      	b.n	80009c0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <I2C_PeriClockControl+0xa8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 8000962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000968:	e02a      	b.n	80009c0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <I2C_PeriClockControl+0xac>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d126      	bne.n	80009c0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 8000978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800097e:	e01f      	b.n	80009c0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <I2C_PeriClockControl+0xa0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 800098e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000994:	e014      	b.n	80009c0 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <I2C_PeriClockControl+0xa8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 80009a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009aa:	e009      	b.n	80009c0 <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <I2C_PeriClockControl+0xac>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d105      	bne.n	80009c0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <I2C_PeriClockControl+0xa4>)
 80009ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40005800 	.word	0x40005800
 80009d8:	40005c00 	.word	0x40005c00

080009dc <I2C_PeripheralControl>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d106      	bne.n	80009fc <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f043 0201 	orr.w	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
	} else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 80009fa:	e005      	b.n	8000a08 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f023 0201 	bic.w	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <I2C_Init>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff80 	bl	800092c <I2C_PeriClockControl>

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << 10);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7a5b      	ldrb	r3, [r3, #9]
 8000a30:	029b      	lsls	r3, r3, #10
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000a4e:	f7ff fefd 	bl	800084c <RCC_GetPCLK1Value>
 8000a52:	4602      	mov	r2, r0
 8000a54:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <I2C_Init+0x178>)
 8000a56:	fba3 2302 	umull	r2, r3, r3, r2
 8000a5a:	0c9b      	lsrs	r3, r3, #18
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6859      	ldr	r1, [r3, #4]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	461a      	mov	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);													/* Should always be kept at 1 by software */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6899      	ldr	r1, [r3, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <I2C_Init+0x17c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d80f      	bhi.n	8000ad2 <I2C_Init+0xbe>
		 * T_high + T_low = T_scl
		 * T_scl = 2 * CCR * T_pclk1
		 * CCR = T_scl / (2 * T_pclk1) [time domain]
		 * CCR = F_pclk1 / (2 * F_scl) [frequency domain] */

		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ab2:	f7ff fecb 	bl	800084c <RCC_GetPCLK1Value>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);										/* Only 12 bits */
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e02d      	b.n	8000b2e <I2C_Init+0x11a>

	} else{
		//mode is fast mode

		tempreg |= (1 << 15);												/* F/S: I2C master mode selection (FM) */
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);			/* DUTY: Fm mode duty cycle */
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7a9b      	ldrb	r3, [r3, #10]
 8000ade:	039b      	lsls	r3, r3, #14
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7a9b      	ldrb	r3, [r3, #10]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10b      	bne.n	8000b08 <I2C_Init+0xf4>
			 * T_high + T_low = T_scl
			 * T_scl = 3 * CCR * T_pclk1
			 * CCR = T_scl / (3 * T_pclk1) [time domain]
			 * CCR = F_pclk1 / (3 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000af0:	f7ff feac 	bl	800084c <RCC_GetPCLK1Value>
 8000af4:	4601      	mov	r1, r0
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b04:	817b      	strh	r3, [r7, #10]
 8000b06:	e00c      	b.n	8000b22 <I2C_Init+0x10e>
			* T_high + T_low = T_scl
			* T_scl = 25 * CCR * T_pclk1
			* CCR = T_scl / (25 * T_pclk1) [time domain]
			* CCR = F_pclk1 / (25 * F_scl) [frequency domain] */

			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b08:	f7ff fea0 	bl	800084c <RCC_GetPCLK1Value>
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009a      	lsls	r2, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b20:	817b      	strh	r3, [r7, #10]
		}

		tempreg |= (ccr_value & 0xFFF);
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	69d9      	ldr	r1, [r3, #28]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <I2C_Init+0x17c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d809      	bhi.n	8000b5c <I2C_Init+0x148>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000b48:	f7ff fe80 	bl	800084c <RCC_GetPCLK1Value>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <I2C_Init+0x178>)
 8000b50:	fba3 2302 	umull	r2, r3, r3, r2
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e00d      	b.n	8000b78 <I2C_Init+0x164>
		 * */

		/* TRISE = (T_rise / T_pclk1) + 1
		 * TRISE = (T_rise * F_pclk1) + 1 */

		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000b5c:	f7ff fe76 	bl	800084c <RCC_GetPCLK1Value>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000b66:	fb03 f302 	mul.w	r3, r3, r2
 8000b6a:	0a5b      	lsrs	r3, r3, #9
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <I2C_Init+0x180>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	09db      	lsrs	r3, r3, #7
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b82:	621a      	str	r2, [r3, #32]
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	000186a0 	.word	0x000186a0
 8000b94:	00044b83 	.word	0x00044b83

08000b98 <I2C_GetFlagStatus>:
 * @return		- Flag status (True/False)
 *
 * @Note		- None
 *
 *************************************************************************/
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e000      	b.n	8000bb4 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <I2C_MasterSendData>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	70fb      	strb	r3, [r7, #3]

	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8f9 	bl	8000dca <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000bd8:	bf00      	nop
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2101      	movs	r1, #1
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ffd9 	bl	8000b98 <I2C_GetFlagStatus>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f6      	beq.n	8000bda <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	78fa      	ldrb	r2, [r7, #3]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f8f8 	bl	8000dea <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000bfa:	bf00      	nop
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2102      	movs	r1, #2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffc8 	bl	8000b98 <I2C_GetFlagStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f6      	beq.n	8000bfc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)

	I2C_ClearADDRFlag(pI2CHandle);
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f000 f917 	bl	8000e42 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0){
 8000c14:	e014      	b.n	8000c40 <I2C_MasterSendData+0x80>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 8000c16:	bf00      	nop
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ffba 	bl	8000b98 <I2C_GetFlagStatus>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f6      	beq.n	8000c18 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1e7      	bne.n	8000c16 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	// 	 Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	// 	 when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000c46:	bf00      	nop
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffa2 	bl	8000b98 <I2C_GetFlagStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f6      	beq.n	8000c48 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000c5a:	bf00      	nop
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff98 	bl	8000b98 <I2C_GetFlagStatus>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f6      	beq.n	8000c5c <I2C_MasterSendData+0x9c>

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)	//Repeated start (Sr)
 8000c6e:	7e3b      	ldrb	r3, [r7, #24]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d104      	bne.n	8000c7e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f896 	bl	8000daa <I2C_GenerateStopCondition>

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <I2C_MasterReceiveData>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	4611      	mov	r1, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f892 	bl	8000dca <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000ca6:	bf00      	nop
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff72 	bl	8000b98 <I2C_GetFlagStatus>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f6      	beq.n	8000ca8 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	79ba      	ldrb	r2, [r7, #6]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f8a7 	bl	8000e16 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000cc8:	bf00      	nop
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2102      	movs	r1, #2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff61 	bl	8000b98 <I2C_GetFlagStatus>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f6      	beq.n	8000cca <I2C_MasterReceiveData+0x44>

	//procedure to read only 1 byte from slave
	if(Len == 1){
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d121      	bne.n	8000d26 <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe03 	bl	80008f4 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 f8a7 	bl	8000e42 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8000cf4:	bf00      	nop
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff4b 	bl	8000b98 <I2C_GetFlagStatus>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f6      	beq.n	8000cf6 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR)	//Repeated start (Sr)
 8000d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d104      	bne.n	8000d1a <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f848 	bl	8000daa <I2C_GenerateStopCondition>

		//read data into buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	701a      	strb	r2, [r3, #0]

	}

	 //procedure to read data from slave when Len > 1
	if(Len > 1){
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d930      	bls.n	8000d8e <I2C_MasterReceiveData+0x108>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f888 	bl	8000e42 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for(uint32_t i = Len ; i > 0 ; i--){
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e027      	b.n	8000d88 <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000d38:	bf00      	nop
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff29 	bl	8000b98 <I2C_GetFlagStatus>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f6      	beq.n	8000d3a <I2C_MasterReceiveData+0xb4>

			if(i == 2){ //if last 2 bytes are remaining
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d10e      	bne.n	8000d70 <I2C_MasterReceiveData+0xea>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fdcb 	bl	80008f4 <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR)	//Repeated start (Sr)
 8000d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f81d 	bl	8000daa <I2C_GenerateStopCondition>
			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len ; i > 0 ; i--){
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d4      	bne.n	8000d38 <I2C_MasterReceiveData+0xb2>

		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE){
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	7a5b      	ldrb	r3, [r3, #9]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d105      	bne.n	8000da2 <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fda9 	bl	80008f4 <I2C_ManageAcking>
	}
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <I2C_GenerateStopCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	601a      	str	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <I2C_GenerateStartCondition>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <I2C_ExecuteAddressPhaseWrite>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;		// Makes space for read/write bit
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); 				// SlaveAddr is Slave address + r/nw bit=0 (write)
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	f023 0301 	bic.w	r3, r3, #1
 8000e02:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	611a      	str	r2, [r3, #16]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <I2C_ExecuteAddressPhaseRead>:
 * @return		- None
 *
 * @Note		- None
 *
 *******************************************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; 						//SlaveAddr is Slave address + r/nw bit=1
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	611a      	str	r2, [r3, #16]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <I2C_ClearADDRFlag>:
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle){
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2CHandle->pI2Cx->SR1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2CHandle->pI2Cx->SR2;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <__libc_init_array>:
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	4e0d      	ldr	r6, [pc, #52]	; (8000ea0 <__libc_init_array+0x38>)
 8000e6c:	4c0d      	ldr	r4, [pc, #52]	; (8000ea4 <__libc_init_array+0x3c>)
 8000e6e:	1ba4      	subs	r4, r4, r6
 8000e70:	10a4      	asrs	r4, r4, #2
 8000e72:	2500      	movs	r5, #0
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	d109      	bne.n	8000e8c <__libc_init_array+0x24>
 8000e78:	4e0b      	ldr	r6, [pc, #44]	; (8000ea8 <__libc_init_array+0x40>)
 8000e7a:	4c0c      	ldr	r4, [pc, #48]	; (8000eac <__libc_init_array+0x44>)
 8000e7c:	f000 f818 	bl	8000eb0 <_init>
 8000e80:	1ba4      	subs	r4, r4, r6
 8000e82:	10a4      	asrs	r4, r4, #2
 8000e84:	2500      	movs	r5, #0
 8000e86:	42a5      	cmp	r5, r4
 8000e88:	d105      	bne.n	8000e96 <__libc_init_array+0x2e>
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
 8000e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e90:	4798      	blx	r3
 8000e92:	3501      	adds	r5, #1
 8000e94:	e7ee      	b.n	8000e74 <__libc_init_array+0xc>
 8000e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e9a:	4798      	blx	r3
 8000e9c:	3501      	adds	r5, #1
 8000e9e:	e7f2      	b.n	8000e86 <__libc_init_array+0x1e>
 8000ea0:	08000ec8 	.word	0x08000ec8
 8000ea4:	08000ec8 	.word	0x08000ec8
 8000ea8:	08000ec8 	.word	0x08000ec8
 8000eac:	08000ecc 	.word	0x08000ecc

08000eb0 <_init>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr

08000ebc <_fini>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr
