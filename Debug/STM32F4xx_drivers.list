
STM32F4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a88  08000a88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a94  08000a9c  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a9c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a9c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001739  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000041c  00000000  00000000  00012205  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00012628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00012740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000021be  00000000  00000000  00012820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001141  00000000  00000000  000149de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b21  00000000  00000000  00015b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  0001e6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a70 	.word	0x08000a70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000a70 	.word	0x08000a70

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <SPI1_GPIOInits>:
 * PA5 --> SPI1_SCLK
 * PA4 --> SPI1_NSS
 * ALT function mode: 5
 * */

void SPI1_GPIOInits(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80001ea:	4b10      	ldr	r3, [pc, #64]	; (800022c <SPI1_GPIOInits+0x48>)
 80001ec:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001ee:	2302      	movs	r3, #2
 80001f0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f2:	2305      	movs	r3, #5
 80001f4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001f6:	2300      	movs	r3, #0
 80001f8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001fe:	2302      	movs	r3, #2
 8000200:	72bb      	strb	r3, [r7, #10]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000202:	2101      	movs	r1, #1
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <SPI1_GPIOInits+0x48>)
 8000206:	f000 f887 	bl	8000318 <GPIO_PeriClockControl>

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800020a:	2305      	movs	r3, #5
 800020c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f921 	bl	8000458 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000216:	2307      	movs	r3, #7
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f91b 	bl	8000458 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <SPI1_Inits>:

void SPI1_Inits(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1handle;

	SPI1handle.pSPIx = SPI1;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <SPI1_Inits+0x38>)
 8000238:	607b      	str	r3, [r7, #4]
	SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023a:	2301      	movs	r3, #1
 800023c:	727b      	strb	r3, [r7, #9]
	SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023e:	2301      	movs	r3, #1
 8000240:	723b      	strb	r3, [r7, #8]
	SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //generates sclk of 8MHz
 8000242:	2300      	movs	r3, #0
 8000244:	72bb      	strb	r3, [r7, #10]
	SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]
	SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	737b      	strb	r3, [r7, #13]
	SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // Software slave management enabled enabled for NSS pin
 8000252:	2301      	movs	r3, #1
 8000254:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1handle);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fb0b 	bl	8000874 <SPI_Init>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40013000 	.word	0x40013000

0800026c <main>:

int main(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <main+0x50>)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	ca07      	ldmia	r2, {r0, r1, r2}
 8000278:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI_PeriClockControl(SPI1, ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	4810      	ldr	r0, [pc, #64]	; (80002c0 <main+0x54>)
 8000280:	f000 fa88 	bl	8000794 <SPI_PeriClockControl>

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI1_GPIOInits();
 8000284:	f7ff ffae 	bl	80001e4 <SPI1_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI1_Inits();
 8000288:	f7ff ffd2 	bl	8000230 <SPI1_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI1,ENABLE);
 800028c:	2101      	movs	r1, #1
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <main+0x54>)
 8000290:	f000 fbad 	bl	80009ee <SPI_SSIConfig>

	// Enable the SPI2 peripheral after have done all register configurations
	SPI_PeripheralControl(SPI1, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	480a      	ldr	r0, [pc, #40]	; (80002c0 <main+0x54>)
 8000298:	f000 fb8d 	bl	80009b6 <SPI_PeripheralControl>

	while(1){
		// Send data
		SPI_SendData(SPI1, (uint8_t*)user_data, strlen(user_data));
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff98 	bl	80001d4 <strlen>
 80002a4:	4602      	mov	r2, r0
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4805      	ldr	r0, [pc, #20]	; (80002c0 <main+0x54>)
 80002ac:	f000 fb4d 	bl	800094a <SPI_SendData>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI1, DISABLE);
 80002b0:	2100      	movs	r1, #0
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <main+0x54>)
 80002b4:	f000 fb7f 	bl	80009b6 <SPI_PeripheralControl>
		SPI_SendData(SPI1, (uint8_t*)user_data, strlen(user_data));
 80002b8:	e7f0      	b.n	800029c <main+0x30>
 80002ba:	bf00      	nop
 80002bc:	08000a88 	.word	0x08000a88
 80002c0:	40013000 	.word	0x40013000

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490e      	ldr	r1, [pc, #56]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0b      	ldr	r4, [pc, #44]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ee:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 fb99 	bl	8000a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ffb9 	bl	800026c <main>

080002fa <LoopForever>:

LoopForever:
    b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000a9c 	.word	0x08000a9c
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	2000001c 	.word	0x2000001c

08000314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC_IRQHandler>
	...

08000318 <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d141      	bne.n	80003ae <GPIO_PeriClockControl+0x96>
		if(pGPIOx == GPIOA){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a43      	ldr	r2, [pc, #268]	; (800043c <GPIO_PeriClockControl+0x124>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000332:	4b43      	ldr	r3, [pc, #268]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOE_PCLK_DI();
		} else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800033e:	e077      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a40      	ldr	r2, [pc, #256]	; (8000444 <GPIO_PeriClockControl+0x12c>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <GPIO_PeriClockControl+0x128>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a3c      	ldr	r2, [pc, #240]	; (8000440 <GPIO_PeriClockControl+0x128>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e06c      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a3b      	ldr	r2, [pc, #236]	; (8000448 <GPIO_PeriClockControl+0x130>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a37      	ldr	r2, [pc, #220]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e061      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a37      	ldr	r2, [pc, #220]	; (800044c <GPIO_PeriClockControl+0x134>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a31      	ldr	r2, [pc, #196]	; (8000440 <GPIO_PeriClockControl+0x128>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e056      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a32      	ldr	r2, [pc, #200]	; (8000450 <GPIO_PeriClockControl+0x138>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <GPIO_PeriClockControl+0x128>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e04b      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a2e      	ldr	r2, [pc, #184]	; (8000454 <GPIO_PeriClockControl+0x13c>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d147      	bne.n	8000430 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a26      	ldr	r2, [pc, #152]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e040      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <GPIO_PeriClockControl+0x124>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003bc:	f023 0301 	bic.w	r3, r3, #1
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e035      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOB){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a1f      	ldr	r2, [pc, #124]	; (8000444 <GPIO_PeriClockControl+0x12c>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003d2:	f023 0302 	bic.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e02a      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOC){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <GPIO_PeriClockControl+0x130>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003e8:	f023 0304 	bic.w	r3, r3, #4
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e01f      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOD){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <GPIO_PeriClockControl+0x134>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <GPIO_PeriClockControl+0x128>)
 80003fe:	f023 0308 	bic.w	r3, r3, #8
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e014      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOE){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <GPIO_PeriClockControl+0x138>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000414:	f023 0310 	bic.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e009      	b.n	8000430 <GPIO_PeriClockControl+0x118>
		} else if(pGPIOx == GPIOH){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <GPIO_PeriClockControl+0x13c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d105      	bne.n	8000430 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <GPIO_PeriClockControl+0x128>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <GPIO_PeriClockControl+0x128>)
 800042a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40020000 	.word	0x40020000
 8000440:	40023800 	.word	0x40023800
 8000444:	40020400 	.word	0x40020400
 8000448:	40020800 	.word	0x40020800
 800044c:	40020c00 	.word	0x40020c00
 8000450:	40021000 	.word	0x40021000
 8000454:	40021c00 	.word	0x40021c00

08000458 <GPIO_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000458:	b480      	push	{r7}
 800045a:	b087      	sub	sp, #28
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;	// temp register
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d822      	bhi.n	80004b2 <GPIO_Init+0x5a>
		// The non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	461a      	mov	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2103      	movs	r1, #3
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	4619      	mov	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e0ca      	b.n	8000648 <GPIO_Init+0x1f0>
	} else{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d117      	bne.n	80004ea <GPIO_Init+0x92>
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ba:	4b43      	ldr	r3, [pc, #268]	; (80005c8 <GPIO_Init+0x170>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	4a3f      	ldr	r2, [pc, #252]	; (80005c8 <GPIO_Init+0x170>)
 80004cc:	430b      	orrs	r3, r1
 80004ce:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <GPIO_Init+0x170>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7912      	ldrb	r2, [r2, #4]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a39      	ldr	r2, [pc, #228]	; (80005c8 <GPIO_Init+0x170>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	6093      	str	r3, [r2, #8]
 80004e8:	e035      	b.n	8000556 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT){
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b05      	cmp	r3, #5
 80004f0:	d117      	bne.n	8000522 <GPIO_Init+0xca>
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <GPIO_Init+0x170>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a31      	ldr	r2, [pc, #196]	; (80005c8 <GPIO_Init+0x170>)
 8000504:	430b      	orrs	r3, r1
 8000506:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <GPIO_Init+0x170>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	43d2      	mvns	r2, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a2b      	ldr	r2, [pc, #172]	; (80005c8 <GPIO_Init+0x170>)
 800051c:	400b      	ands	r3, r1
 800051e:	60d3      	str	r3, [r2, #12]
 8000520:	e019      	b.n	8000556 <GPIO_Init+0xfe>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b06      	cmp	r3, #6
 8000528:	d115      	bne.n	8000556 <GPIO_Init+0xfe>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <GPIO_Init+0x170>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a23      	ldr	r2, [pc, #140]	; (80005c8 <GPIO_Init+0x170>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <GPIO_Init+0x170>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <GPIO_Init+0x170>)
 8000552:	430b      	orrs	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]

		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN();	// Enable the SYSCFG clock
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <GPIO_Init+0x174>)
 8000558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <GPIO_Init+0x174>)
 800055c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000560:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;		// EXTICR[x], where x = 0...4
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;		// range = {0,4,8,12}
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	f003 0303 	and.w	r3, r3, #3
 8000572:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <GPIO_Init+0x178>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d034      	beq.n	80005e8 <GPIO_Init+0x190>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <GPIO_Init+0x17c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d01d      	beq.n	80005c4 <GPIO_Init+0x16c>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <GPIO_Init+0x180>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d016      	beq.n	80005c0 <GPIO_Init+0x168>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <GPIO_Init+0x184>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d00f      	beq.n	80005bc <GPIO_Init+0x164>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <GPIO_Init+0x188>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d008      	beq.n	80005b8 <GPIO_Init+0x160>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <GPIO_Init+0x18c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d101      	bne.n	80005b4 <GPIO_Init+0x15c>
 80005b0:	2307      	movs	r3, #7
 80005b2:	e01a      	b.n	80005ea <GPIO_Init+0x192>
 80005b4:	2300      	movs	r3, #0
 80005b6:	e018      	b.n	80005ea <GPIO_Init+0x192>
 80005b8:	2304      	movs	r3, #4
 80005ba:	e016      	b.n	80005ea <GPIO_Init+0x192>
 80005bc:	2303      	movs	r3, #3
 80005be:	e014      	b.n	80005ea <GPIO_Init+0x192>
 80005c0:	2302      	movs	r3, #2
 80005c2:	e012      	b.n	80005ea <GPIO_Init+0x192>
 80005c4:	2301      	movs	r3, #1
 80005c6:	e010      	b.n	80005ea <GPIO_Init+0x192>
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40021c00 	.word	0x40021c00
 80005e8:	2300      	movs	r3, #0
 80005ea:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));		 // Clear the current value
 80005ec:	4a67      	ldr	r2, [pc, #412]	; (800078c <GPIO_Init+0x334>)
 80005ee:	7cfb      	ldrb	r3, [r7, #19]
 80005f0:	3302      	adds	r3, #2
 80005f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f6:	7cbb      	ldrb	r3, [r7, #18]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	210f      	movs	r1, #15
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	4961      	ldr	r1, [pc, #388]	; (800078c <GPIO_Init+0x334>)
 8000606:	7cfb      	ldrb	r3, [r7, #19]
 8000608:	4002      	ands	r2, r0
 800060a:	3302      	adds	r3, #2
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << (temp2 * 4);	 // Set current value
 8000610:	4a5e      	ldr	r2, [pc, #376]	; (800078c <GPIO_Init+0x334>)
 8000612:	7cfb      	ldrb	r3, [r7, #19]
 8000614:	3302      	adds	r3, #2
 8000616:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800061a:	7c79      	ldrb	r1, [r7, #17]
 800061c:	7cbb      	ldrb	r3, [r7, #18]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	4618      	mov	r0, r3
 8000626:	4959      	ldr	r1, [pc, #356]	; (800078c <GPIO_Init+0x334>)
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	4302      	orrs	r2, r0
 800062c:	3302      	adds	r3, #2
 800062e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3 . Enable the EXTI interrupt delivery to the processor using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000632:	4b57      	ldr	r3, [pc, #348]	; (8000790 <GPIO_Init+0x338>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	7912      	ldrb	r2, [r2, #4]
 800063a:	4611      	mov	r1, r2
 800063c:	2201      	movs	r2, #1
 800063e:	408a      	lsls	r2, r1
 8000640:	4611      	mov	r1, r2
 8000642:	4a53      	ldr	r2, [pc, #332]	; (8000790 <GPIO_Init+0x338>)
 8000644:	430b      	orrs	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	2103      	movs	r1, #3
 800066c:	fa01 f303 	lsl.w	r3, r1, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	400a      	ands	r2, r1
 800067a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	6899      	ldr	r1, [r3, #8]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	430a      	orrs	r2, r1
 800068a:	609a      	str	r2, [r3, #8]

	temp = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]

	//3. configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	79db      	ldrb	r3, [r3, #7]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	2103      	movs	r1, #3
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	400a      	ands	r2, r1
 80006be:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68d9      	ldr	r1, [r3, #12]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	430a      	orrs	r2, r1
 80006ce:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7a1b      	ldrb	r3, [r3, #8]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	4619      	mov	r1, r3
 80006f0:	2301      	movs	r3, #1
 80006f2:	408b      	lsls	r3, r1
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6859      	ldr	r1, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	430a      	orrs	r2, r1
 800070e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d131      	bne.n	8000780 <GPIO_Init+0x328>
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	08db      	lsrs	r3, r3, #3
 8000722:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	f003 0307 	and.w	r3, r3, #7
 800072c:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	7c3a      	ldrb	r2, [r7, #16]
 8000734:	3208      	adds	r2, #8
 8000736:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	220f      	movs	r2, #15
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	43db      	mvns	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	7c3a      	ldrb	r2, [r7, #16]
 800074e:	4001      	ands	r1, r0
 8000750:	3208      	adds	r2, #8
 8000752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	7c3a      	ldrb	r2, [r7, #16]
 800075c:	3208      	adds	r2, #8
 800075e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a5b      	ldrb	r3, [r3, #9]
 8000766:	461a      	mov	r2, r3
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	4618      	mov	r0, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7c3a      	ldrb	r2, [r7, #16]
 8000778:	4301      	orrs	r1, r0
 800077a:	3208      	adds	r2, #8
 800077c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40013800 	.word	0x40013800
 8000790:	40013c00 	.word	0x40013c00

08000794 <SPI_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d12b      	bne.n	80007fe <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <SPI_PeriClockControl+0xcc>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d106      	bne.n	80007bc <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		} else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 80007ba:	e04b      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI2){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a2a      	ldr	r2, [pc, #168]	; (8000868 <SPI_PeriClockControl+0xd4>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d106      	bne.n	80007d2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	4a26      	ldr	r2, [pc, #152]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ce:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007d0:	e040      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI3){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a25      	ldr	r2, [pc, #148]	; (800086c <SPI_PeriClockControl+0xd8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007e6:	e035      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI4){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SPI_PeriClockControl+0xdc>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d131      	bne.n	8000854 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <SPI_PeriClockControl+0xd0>)
 80007f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007fa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007fc:	e02a      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <SPI_PeriClockControl+0xcc>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <SPI_PeriClockControl+0xd0>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <SPI_PeriClockControl+0xd0>)
 800080c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000812:	e01f      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI2){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <SPI_PeriClockControl+0xd4>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <SPI_PeriClockControl+0xd0>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a10      	ldr	r2, [pc, #64]	; (8000864 <SPI_PeriClockControl+0xd0>)
 8000822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	e014      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI3){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <SPI_PeriClockControl+0xd8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <SPI_PeriClockControl+0xd0>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <SPI_PeriClockControl+0xd0>)
 8000838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083e:	e009      	b.n	8000854 <SPI_PeriClockControl+0xc0>
		} else if(pSPIx == SPI4){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <SPI_PeriClockControl+0xdc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d105      	bne.n	8000854 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <SPI_PeriClockControl+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <SPI_PeriClockControl+0xd0>)
 800084e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40013000 	.word	0x40013000
 8000864:	40023800 	.word	0x40023800
 8000868:	40003800 	.word	0x40003800
 800086c:	40003c00 	.word	0x40003c00
 8000870:	40013400 	.word	0x40013400

08000874 <SPI_Init>:
 *
 * @return            -	none
 *
 * @Note              - none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4313      	orrs	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d104      	bne.n	80008a0 <SPI_Init+0x2c>
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	e014      	b.n	80008ca <SPI_Init+0x56>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d104      	bne.n	80008b2 <SPI_Init+0x3e>
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e00b      	b.n	80008ca <SPI_Init+0x56>

	} else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	795b      	ldrb	r3, [r3, #5]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d107      	bne.n	80008ca <SPI_Init+0x56>
		//BIDI mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c0:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	799b      	ldrb	r3, [r3, #6]
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	79db      	ldrb	r3, [r3, #7]
 80008dc:	02db      	lsls	r3, r3, #11
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7a1b      	ldrb	r3, [r3, #8]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7a5b      	ldrb	r3, [r3, #9]
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

	//7 . configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7a9b      	ldrb	r3, [r3, #10]
 8000904:	025b      	lsls	r3, r3, #9
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

	// Writing to register CR1
	pSPIHandle->pSPIx->CR1 = tempreg;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName){
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	4013      	ands	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SPI_SendData>:
 * @return            -
 *
 * @Note              - This is actually a blocking API call;
 * 					  -	The function will wait until all the bytes are transmitted.
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000956:	e027      	b.n	80009a8 <SPI_SendData+0x5e>
		//1. Wait until TXE is set/empty
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000958:	bf00      	nop
 800095a:	2102      	movs	r1, #2
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f7ff ffe0 	bl	8000922 <SPI_GetFlagStatus>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f8      	beq.n	800095a <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if((pSPIx->CR1 & (1 << SPI_CR1_DFF))){
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00e      	beq.n	8000992 <SPI_SendData+0x48>
			//16 bit DFF
			pSPIx->DR = *((uint16_t*)pTxBuffer);	// Dereferencing to load the data and typecasting uint8_t to uint16_t
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	60da      	str	r2, [r3, #12]
			Len--;	// Decrement 1 byte
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
			Len--;	// Decrement 2 bytes
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;	// Increment the adress pointer to the next data
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	3301      	adds	r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	e00a      	b.n	80009a8 <SPI_SendData+0x5e>
		} else{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	60da      	str	r2, [r3, #12]
			Len--;			// Decrement 1 byte
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
			pTxBuffer++;	// Increment the adress pointer to the next data
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d1d4      	bne.n	8000958 <SPI_SendData+0xe>
		}
	}
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SPI_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d106      	bne.n	80009d6 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009d4:	e005      	b.n	80009e2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SPI_SSIConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	70fb      	strb	r3, [r7, #3]

	if(EnOrDi == ENABLE){
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d106      	bne.n	8000a0e <SPI_SSIConfig+0x20>
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
	} else{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}
}
 8000a0c:	e005      	b.n	8000a1a <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <__libc_init_array>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	4e0d      	ldr	r6, [pc, #52]	; (8000a60 <__libc_init_array+0x38>)
 8000a2c:	4c0d      	ldr	r4, [pc, #52]	; (8000a64 <__libc_init_array+0x3c>)
 8000a2e:	1ba4      	subs	r4, r4, r6
 8000a30:	10a4      	asrs	r4, r4, #2
 8000a32:	2500      	movs	r5, #0
 8000a34:	42a5      	cmp	r5, r4
 8000a36:	d109      	bne.n	8000a4c <__libc_init_array+0x24>
 8000a38:	4e0b      	ldr	r6, [pc, #44]	; (8000a68 <__libc_init_array+0x40>)
 8000a3a:	4c0c      	ldr	r4, [pc, #48]	; (8000a6c <__libc_init_array+0x44>)
 8000a3c:	f000 f818 	bl	8000a70 <_init>
 8000a40:	1ba4      	subs	r4, r4, r6
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	2500      	movs	r5, #0
 8000a46:	42a5      	cmp	r5, r4
 8000a48:	d105      	bne.n	8000a56 <__libc_init_array+0x2e>
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a50:	4798      	blx	r3
 8000a52:	3501      	adds	r5, #1
 8000a54:	e7ee      	b.n	8000a34 <__libc_init_array+0xc>
 8000a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a5a:	4798      	blx	r3
 8000a5c:	3501      	adds	r5, #1
 8000a5e:	e7f2      	b.n	8000a46 <__libc_init_array+0x1e>
 8000a60:	08000a94 	.word	0x08000a94
 8000a64:	08000a94 	.word	0x08000a94
 8000a68:	08000a94 	.word	0x08000a94
 8000a6c:	08000a98 	.word	0x08000a98

08000a70 <_init>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr

08000a7c <_fini>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr
